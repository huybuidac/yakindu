/*
* generated by Xtext
*/
package org.eclipselabs.damos.scripting.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipselabs.damos.scripting.services.MscriptGrammarAccess;

public class MscriptParser extends AbstractContentAssistParser {
	
	@Inject
	private MscriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipselabs.damos.scripting.ui.contentassist.antlr.internal.InternalMscriptParser createParser() {
		org.eclipselabs.damos.scripting.ui.contentassist.antlr.internal.InternalMscriptParser result = new org.eclipselabs.damos.scripting.ui.contentassist.antlr.internal.InternalMscriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPackageDefinitionElementAccess().getAlternatives(), "rule__PackageDefinitionElement__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getLogicalNotExpressionAccess().getAlternatives(), "rule__LogicalNotExpression__Alternatives");
					put(grammarAccess.getUnaryMinusExpressionAccess().getAlternatives(), "rule__UnaryMinusExpression__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getNumericalLiteralAccess().getAlternatives(), "rule__NumericalLiteral__Alternatives");
					put(grammarAccess.getFunctionCallAccess().getAlternatives(), "rule__FunctionCall__Alternatives");
					put(grammarAccess.getKeywordFunctionCallAccess().getNameAlternatives_0_0(), "rule__KeywordFunctionCall__NameAlternatives_0_0");
					put(grammarAccess.getFunctionArgumentListAccess().getAlternatives(), "rule__FunctionArgumentList__Alternatives");
					put(grammarAccess.getSubscriptAccess().getAlternatives(), "rule__Subscript__Alternatives");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getAlternatives(), "rule__UnitExpressionNumerator__Alternatives");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getAlternatives(), "rule__UnitExpressionDenominator__Alternatives");
					put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
					put(grammarAccess.getAddSubtractOperatorAccess().getAlternatives(), "rule__AddSubtractOperator__Alternatives");
					put(grammarAccess.getMultiplyDivideOperatorAccess().getAlternatives(), "rule__MultiplyDivideOperator__Alternatives");
					put(grammarAccess.getPowerOperatorAccess().getAlternatives(), "rule__PowerOperator__Alternatives");
					put(grammarAccess.getBooleanKindAccess().getAlternatives(), "rule__BooleanKind__Alternatives");
					put(grammarAccess.getPackageDefinitionAccess().getGroup(), "rule__PackageDefinition__Group__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup(), "rule__EnumerationDefinition__Group__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup_3(), "rule__EnumerationDefinition__Group_3__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup_3_1(), "rule__EnumerationDefinition__Group_3_1__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup(), "rule__ConditionalExpression__Group__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup_2(), "rule__ConditionalExpression__Group_2__0");
					put(grammarAccess.getConditionalExpressionCaseAccess().getGroup(), "rule__ConditionalExpressionCase__Group__0");
					put(grammarAccess.getRangeExpressionAccess().getGroup(), "rule__RangeExpression__Group__0");
					put(grammarAccess.getRangeExpressionAccess().getGroup_1(), "rule__RangeExpression__Group_1__0");
					put(grammarAccess.getRangeExpressionAccess().getGroup_1_3(), "rule__RangeExpression__Group_1_3__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup(), "rule__LogicalOrExpression__Group__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup_1(), "rule__LogicalOrExpression__Group_1__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1(), "rule__LogicalOrExpression__Group_1_1__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup(), "rule__LogicalAndExpression__Group__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup_1(), "rule__LogicalAndExpression__Group_1__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1(), "rule__LogicalAndExpression__Group_1_1__0");
					put(grammarAccess.getLogicalNotExpressionAccess().getGroup_1(), "rule__LogicalNotExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_1(), "rule__RelationalExpression__Group_1_1__0");
					put(grammarAccess.getAddSubtractExpressionAccess().getGroup(), "rule__AddSubtractExpression__Group__0");
					put(grammarAccess.getAddSubtractExpressionAccess().getGroup_1(), "rule__AddSubtractExpression__Group_1__0");
					put(grammarAccess.getAddSubtractExpressionAccess().getGroup_1_1(), "rule__AddSubtractExpression__Group_1_1__0");
					put(grammarAccess.getMultiplyDivideExpressionAccess().getGroup(), "rule__MultiplyDivideExpression__Group__0");
					put(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1(), "rule__MultiplyDivideExpression__Group_1__0");
					put(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1_1(), "rule__MultiplyDivideExpression__Group_1_1__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup(), "rule__PowerExpression__Group__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup_1(), "rule__PowerExpression__Group_1__0");
					put(grammarAccess.getUnaryMinusExpressionAccess().getGroup_1(), "rule__UnaryMinusExpression__Group_1__0");
					put(grammarAccess.getRealLiteralAccess().getGroup(), "rule__RealLiteral__Group__0");
					put(grammarAccess.getRealLiteralAccess().getGroup_1(), "rule__RealLiteral__Group_1__0");
					put(grammarAccess.getIntegerLiteralAccess().getGroup(), "rule__IntegerLiteral__Group__0");
					put(grammarAccess.getIntegerLiteralAccess().getGroup_1(), "rule__IntegerLiteral__Group_1__0");
					put(grammarAccess.getNamedFunctionCallAccess().getGroup(), "rule__NamedFunctionCall__Group__0");
					put(grammarAccess.getNameAccess().getGroup(), "rule__Name__Group__0");
					put(grammarAccess.getNameAccess().getGroup_2(), "rule__Name__Group_2__0");
					put(grammarAccess.getKeywordFunctionCallAccess().getGroup(), "rule__KeywordFunctionCall__Group__0");
					put(grammarAccess.getFunctionArgumentListAccess().getGroup_0(), "rule__FunctionArgumentList__Group_0__0");
					put(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1(), "rule__FunctionArgumentList__Group_0_1__0");
					put(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1_0(), "rule__FunctionArgumentList__Group_0_1_0__0");
					put(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1_1(), "rule__FunctionArgumentList__Group_0_1_1__0");
					put(grammarAccess.getFunctionArgumentListAccess().getGroup_1(), "rule__FunctionArgumentList__Group_1__0");
					put(grammarAccess.getFunctionArgumentListAccess().getGroup_1_1(), "rule__FunctionArgumentList__Group_1_1__0");
					put(grammarAccess.getNamedArgumentAccess().getGroup(), "rule__NamedArgument__Group__0");
					put(grammarAccess.getComponentReferenceAccess().getGroup(), "rule__ComponentReference__Group__0");
					put(grammarAccess.getComponentReferenceAccess().getGroup_2(), "rule__ComponentReference__Group_2__0");
					put(grammarAccess.getComponentReferenceSegmentAccess().getGroup(), "rule__ComponentReferenceSegment__Group__0");
					put(grammarAccess.getArraySubscriptListAccess().getGroup(), "rule__ArraySubscriptList__Group__0");
					put(grammarAccess.getArraySubscriptListAccess().getGroup_2(), "rule__ArraySubscriptList__Group_2__0");
					put(grammarAccess.getColonSubscriptAccess().getGroup(), "rule__ColonSubscript__Group__0");
					put(grammarAccess.getArrayConcatenationOperatorAccess().getGroup(), "rule__ArrayConcatenationOperator__Group__0");
					put(grammarAccess.getArrayConcatenationOperatorAccess().getGroup_2(), "rule__ArrayConcatenationOperator__Group_2__0");
					put(grammarAccess.getArrayConstructionOperatorAccess().getGroup(), "rule__ArrayConstructionOperator__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
					put(grammarAccess.getBeginExpressionAccess().getGroup(), "rule__BeginExpression__Group__0");
					put(grammarAccess.getEndExpressionAccess().getGroup(), "rule__EndExpression__Group__0");
					put(grammarAccess.getUnitExpressionAccess().getGroup(), "rule__UnitExpression__Group__0");
					put(grammarAccess.getUnitExpressionAccess().getGroup_1(), "rule__UnitExpression__Group_1__0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1(), "rule__UnitExpressionNumerator__Group_1__0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1_1(), "rule__UnitExpressionNumerator__Group_1_1__0");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1(), "rule__UnitExpressionDenominator__Group_1__0");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1_2(), "rule__UnitExpressionDenominator__Group_1_2__0");
					put(grammarAccess.getUnitExpressionFactorAccess().getGroup(), "rule__UnitExpressionFactor__Group__0");
					put(grammarAccess.getUnitExpressionFactorAccess().getGroup_1(), "rule__UnitExpressionFactor__Group_1__0");
					put(grammarAccess.getUnitExpressionExponentAccess().getGroup(), "rule__UnitExpressionExponent__Group__0");
					put(grammarAccess.getMscriptAccess().getPackagesAssignment(), "rule__Mscript__PackagesAssignment");
					put(grammarAccess.getPackageDefinitionAccess().getNameAssignment_1(), "rule__PackageDefinition__NameAssignment_1");
					put(grammarAccess.getPackageDefinitionAccess().getElementsAssignment_3(), "rule__PackageDefinition__ElementsAssignment_3");
					put(grammarAccess.getEnumerationDefinitionAccess().getNameAssignment_1(), "rule__EnumerationDefinition__NameAssignment_1");
					put(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_0(), "rule__EnumerationDefinition__LiteralsAssignment_3_0");
					put(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_1_1(), "rule__EnumerationDefinition__LiteralsAssignment_3_1_1");
					put(grammarAccess.getEnumerationLiteralDefinitionAccess().getNameAssignment(), "rule__EnumerationLiteralDefinition__NameAssignment");
					put(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_1(), "rule__ConditionalExpression__CasesAssignment_1");
					put(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_2_1(), "rule__ConditionalExpression__CasesAssignment_2_1");
					put(grammarAccess.getConditionalExpressionAccess().getElseExpressionAssignment_4(), "rule__ConditionalExpression__ElseExpressionAssignment_4");
					put(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionAssignment_0(), "rule__ConditionalExpressionCase__ConditionExpressionAssignment_0");
					put(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionAssignment_2(), "rule__ConditionalExpressionCase__ThenExpressionAssignment_2");
					put(grammarAccess.getRangeExpressionAccess().getExpressionsAssignment_1_2(), "rule__RangeExpression__ExpressionsAssignment_1_2");
					put(grammarAccess.getRangeExpressionAccess().getExpressionsAssignment_1_3_1(), "rule__RangeExpression__ExpressionsAssignment_1_3_1");
					put(grammarAccess.getLogicalOrExpressionAccess().getOperandsAssignment_1_1_1(), "rule__LogicalOrExpression__OperandsAssignment_1_1_1");
					put(grammarAccess.getLogicalAndExpressionAccess().getOperandsAssignment_1_1_1(), "rule__LogicalAndExpression__OperandsAssignment_1_1_1");
					put(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2(), "rule__LogicalNotExpression__OperandAssignment_1_2");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorsAssignment_1_1_0(), "rule__RelationalExpression__OperatorsAssignment_1_1_0");
					put(grammarAccess.getRelationalExpressionAccess().getOperandsAssignment_1_1_1(), "rule__RelationalExpression__OperandsAssignment_1_1_1");
					put(grammarAccess.getAddSubtractExpressionAccess().getOperatorsAssignment_1_1_0(), "rule__AddSubtractExpression__OperatorsAssignment_1_1_0");
					put(grammarAccess.getAddSubtractExpressionAccess().getOperandsAssignment_1_1_1(), "rule__AddSubtractExpression__OperandsAssignment_1_1_1");
					put(grammarAccess.getMultiplyDivideExpressionAccess().getOperatorsAssignment_1_1_0(), "rule__MultiplyDivideExpression__OperatorsAssignment_1_1_0");
					put(grammarAccess.getMultiplyDivideExpressionAccess().getOperandsAssignment_1_1_1(), "rule__MultiplyDivideExpression__OperandsAssignment_1_1_1");
					put(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1(), "rule__PowerExpression__OperatorAssignment_1_1");
					put(grammarAccess.getPowerExpressionAccess().getExponentAssignment_1_2(), "rule__PowerExpression__ExponentAssignment_1_2");
					put(grammarAccess.getUnaryMinusExpressionAccess().getOperandAssignment_1_2(), "rule__UnaryMinusExpression__OperandAssignment_1_2");
					put(grammarAccess.getRealLiteralAccess().getValueAssignment_0(), "rule__RealLiteral__ValueAssignment_0");
					put(grammarAccess.getRealLiteralAccess().getUnitAssignment_1_1(), "rule__RealLiteral__UnitAssignment_1_1");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment_0(), "rule__IntegerLiteral__ValueAssignment_0");
					put(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_1_1(), "rule__IntegerLiteral__UnitAssignment_1_1");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getNamedFunctionCallAccess().getNameAssignment_0(), "rule__NamedFunctionCall__NameAssignment_0");
					put(grammarAccess.getNamedFunctionCallAccess().getArgumentListAssignment_2(), "rule__NamedFunctionCall__ArgumentListAssignment_2");
					put(grammarAccess.getNameAccess().getGlobalAssignment_0(), "rule__Name__GlobalAssignment_0");
					put(grammarAccess.getNameAccess().getIdentifiersAssignment_1(), "rule__Name__IdentifiersAssignment_1");
					put(grammarAccess.getNameAccess().getIdentifiersAssignment_2_1(), "rule__Name__IdentifiersAssignment_2_1");
					put(grammarAccess.getKeywordFunctionCallAccess().getNameAssignment_0(), "rule__KeywordFunctionCall__NameAssignment_0");
					put(grammarAccess.getKeywordFunctionCallAccess().getArgumentListAssignment_2(), "rule__KeywordFunctionCall__ArgumentListAssignment_2");
					put(grammarAccess.getFunctionArgumentListAccess().getArgumentsAssignment_0_0(), "rule__FunctionArgumentList__ArgumentsAssignment_0_0");
					put(grammarAccess.getFunctionArgumentListAccess().getArgumentsAssignment_0_1_0_1(), "rule__FunctionArgumentList__ArgumentsAssignment_0_1_0_1");
					put(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_0_1_1_1(), "rule__FunctionArgumentList__NamedArgumentsAssignment_0_1_1_1");
					put(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_1_0(), "rule__FunctionArgumentList__NamedArgumentsAssignment_1_0");
					put(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_1_1_1(), "rule__FunctionArgumentList__NamedArgumentsAssignment_1_1_1");
					put(grammarAccess.getNamedArgumentAccess().getIdentifierAssignment_0(), "rule__NamedArgument__IdentifierAssignment_0");
					put(grammarAccess.getNamedArgumentAccess().getExpressionAssignment_2(), "rule__NamedArgument__ExpressionAssignment_2");
					put(grammarAccess.getComponentReferenceAccess().getGlobalAssignment_0(), "rule__ComponentReference__GlobalAssignment_0");
					put(grammarAccess.getComponentReferenceAccess().getSegmentsAssignment_1(), "rule__ComponentReference__SegmentsAssignment_1");
					put(grammarAccess.getComponentReferenceAccess().getSegmentsAssignment_2_1(), "rule__ComponentReference__SegmentsAssignment_2_1");
					put(grammarAccess.getComponentReferenceSegmentAccess().getIdentifierAssignment_0(), "rule__ComponentReferenceSegment__IdentifierAssignment_0");
					put(grammarAccess.getComponentReferenceSegmentAccess().getSubscriptListAssignment_1(), "rule__ComponentReferenceSegment__SubscriptListAssignment_1");
					put(grammarAccess.getArraySubscriptListAccess().getSubscriptsAssignment_1(), "rule__ArraySubscriptList__SubscriptsAssignment_1");
					put(grammarAccess.getArraySubscriptListAccess().getSubscriptsAssignment_2_1(), "rule__ArraySubscriptList__SubscriptsAssignment_2_1");
					put(grammarAccess.getExpressionSubscriptAccess().getExpressionAssignment(), "rule__ExpressionSubscript__ExpressionAssignment");
					put(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsAssignment_1(), "rule__ArrayConcatenationOperator__ExpressionListsAssignment_1");
					put(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsAssignment_2_1(), "rule__ArrayConcatenationOperator__ExpressionListsAssignment_2_1");
					put(grammarAccess.getArrayConstructionOperatorAccess().getArgumentListAssignment_1(), "rule__ArrayConstructionOperator__ArgumentListAssignment_1");
					put(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0(), "rule__ExpressionList__ExpressionsAssignment_0");
					put(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1(), "rule__ExpressionList__ExpressionsAssignment_1_1");
					put(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1(), "rule__ParenthesizedExpression__ExpressionAssignment_1");
					put(grammarAccess.getUnitExpressionAccess().getNumeratorAssignment_0(), "rule__UnitExpression__NumeratorAssignment_0");
					put(grammarAccess.getUnitExpressionAccess().getDenominatorAssignment_1_1(), "rule__UnitExpression__DenominatorAssignment_1_1");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getOneAssignment_0(), "rule__UnitExpressionNumerator__OneAssignment_0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_0(), "rule__UnitExpressionNumerator__FactorsAssignment_1_0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_1_1(), "rule__UnitExpressionNumerator__FactorsAssignment_1_1_1");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_0(), "rule__UnitExpressionDenominator__FactorsAssignment_0");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_1(), "rule__UnitExpressionDenominator__FactorsAssignment_1_1");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_2_1(), "rule__UnitExpressionDenominator__FactorsAssignment_1_2_1");
					put(grammarAccess.getUnitExpressionFactorAccess().getOperandAssignment_0(), "rule__UnitExpressionFactor__OperandAssignment_0");
					put(grammarAccess.getUnitExpressionFactorAccess().getExponentAssignment_1_1(), "rule__UnitExpressionFactor__ExponentAssignment_1_1");
					put(grammarAccess.getUnitExpressionExponentAccess().getNegativeAssignment_0(), "rule__UnitExpressionExponent__NegativeAssignment_0");
					put(grammarAccess.getUnitExpressionExponentAccess().getValueAssignment_1(), "rule__UnitExpressionExponent__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipselabs.damos.scripting.ui.contentassist.antlr.internal.InternalMscriptParser typedParser = (org.eclipselabs.damos.scripting.ui.contentassist.antlr.internal.InternalMscriptParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MscriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MscriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
