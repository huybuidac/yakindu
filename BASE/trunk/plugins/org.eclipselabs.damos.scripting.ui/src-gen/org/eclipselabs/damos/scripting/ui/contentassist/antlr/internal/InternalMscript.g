/*
* generated by Xtext
*/
grammar InternalMscript;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipselabs.damos.scripting.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.damos.scripting.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.damos.scripting.services.MscriptGrammarAccess;

}

@parser::members {
 
 	private MscriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MscriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getExpressionParserRuleCall()); }
	ruleExpression
{ after(grammarAccess.getModelAccess().getExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulePackageAS
entryRulePackageAS 
:
{ before(grammarAccess.getPackageASRule()); }
	 rulePackageAS
{ after(grammarAccess.getPackageASRule()); } 
	 EOF 
;

// Rule PackageAS
rulePackageAS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageASAccess().getGroup()); }
(rule__PackageAS__Group__0)
{ after(grammarAccess.getPackageASAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageableElementAS
entryRulePackageableElementAS 
:
{ before(grammarAccess.getPackageableElementASRule()); }
	 rulePackageableElementAS
{ after(grammarAccess.getPackageableElementASRule()); } 
	 EOF 
;

// Rule PackageableElementAS
rulePackageableElementAS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageableElementASAccess().getAlternatives()); }
(rule__PackageableElementAS__Alternatives)
{ after(grammarAccess.getPackageableElementASAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationAS
entryRuleEnumerationAS 
:
{ before(grammarAccess.getEnumerationASRule()); }
	 ruleEnumerationAS
{ after(grammarAccess.getEnumerationASRule()); } 
	 EOF 
;

// Rule EnumerationAS
ruleEnumerationAS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationASAccess().getGroup()); }
(rule__EnumerationAS__Group__0)
{ after(grammarAccess.getEnumerationASAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteralAS
entryRuleEnumerationLiteralAS 
:
{ before(grammarAccess.getEnumerationLiteralASRule()); }
	 ruleEnumerationLiteralAS
{ after(grammarAccess.getEnumerationLiteralASRule()); } 
	 EOF 
;

// Rule EnumerationLiteralAS
ruleEnumerationLiteralAS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationLiteralASAccess().getNameAssignment()); }
(rule__EnumerationLiteralAS__NameAssignment)
{ after(grammarAccess.getEnumerationLiteralASAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpressionCase
entryRuleConditionalExpressionCase 
:
{ before(grammarAccess.getConditionalExpressionCaseRule()); }
	 ruleConditionalExpressionCase
{ after(grammarAccess.getConditionalExpressionCaseRule()); } 
	 EOF 
;

// Rule ConditionalExpressionCase
ruleConditionalExpressionCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getGroup()); }
(rule__ConditionalExpressionCase__Group__0)
{ after(grammarAccess.getConditionalExpressionCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeExpression
entryRuleRangeExpression 
:
{ before(grammarAccess.getRangeExpressionRule()); }
	 ruleRangeExpression
{ after(grammarAccess.getRangeExpressionRule()); } 
	 EOF 
;

// Rule RangeExpression
ruleRangeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup()); }
(rule__RangeExpression__Group__0)
{ after(grammarAccess.getRangeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression 
:
{ before(grammarAccess.getLogicalNotExpressionRule()); }
	 ruleLogicalNotExpression
{ after(grammarAccess.getLogicalNotExpressionRule()); } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
(rule__LogicalNotExpression__Alternatives)
{ after(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddSubtractExpression
entryRuleAddSubtractExpression 
:
{ before(grammarAccess.getAddSubtractExpressionRule()); }
	 ruleAddSubtractExpression
{ after(grammarAccess.getAddSubtractExpressionRule()); } 
	 EOF 
;

// Rule AddSubtractExpression
ruleAddSubtractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getGroup()); }
(rule__AddSubtractExpression__Group__0)
{ after(grammarAccess.getAddSubtractExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplyDivideExpression
entryRuleMultiplyDivideExpression 
:
{ before(grammarAccess.getMultiplyDivideExpressionRule()); }
	 ruleMultiplyDivideExpression
{ after(grammarAccess.getMultiplyDivideExpressionRule()); } 
	 EOF 
;

// Rule MultiplyDivideExpression
ruleMultiplyDivideExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getGroup()); }
(rule__MultiplyDivideExpression__Group__0)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePowerExpression
entryRulePowerExpression 
:
{ before(grammarAccess.getPowerExpressionRule()); }
	 rulePowerExpression
{ after(grammarAccess.getPowerExpressionRule()); } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowerExpressionAccess().getGroup()); }
(rule__PowerExpression__Group__0)
{ after(grammarAccess.getPowerExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryMinusExpression
entryRuleUnaryMinusExpression 
:
{ before(grammarAccess.getUnaryMinusExpressionRule()); }
	 ruleUnaryMinusExpression
{ after(grammarAccess.getUnaryMinusExpressionRule()); } 
	 EOF 
;

// Rule UnaryMinusExpression
ruleUnaryMinusExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getAlternatives()); }
(rule__UnaryMinusExpression__Alternatives)
{ after(grammarAccess.getUnaryMinusExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalLiteral
entryRuleNumericalLiteral 
:
{ before(grammarAccess.getNumericalLiteralRule()); }
	 ruleNumericalLiteral
{ after(grammarAccess.getNumericalLiteralRule()); } 
	 EOF 
;

// Rule NumericalLiteral
ruleNumericalLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalLiteralAccess().getAlternatives()); }
(rule__NumericalLiteral__Alternatives)
{ after(grammarAccess.getNumericalLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealLiteral
entryRuleRealLiteral 
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealLiteralAccess().getGroup()); }
(rule__RealLiteral__Group__0)
{ after(grammarAccess.getRealLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getGroup()); }
(rule__IntegerLiteral__Group__0)
{ after(grammarAccess.getIntegerLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getAlternatives()); }
(rule__FunctionCall__Alternatives)
{ after(grammarAccess.getFunctionCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedFunctionCall
entryRuleNamedFunctionCall 
:
{ before(grammarAccess.getNamedFunctionCallRule()); }
	 ruleNamedFunctionCall
{ after(grammarAccess.getNamedFunctionCallRule()); } 
	 EOF 
;

// Rule NamedFunctionCall
ruleNamedFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedFunctionCallAccess().getGroup()); }
(rule__NamedFunctionCall__Group__0)
{ after(grammarAccess.getNamedFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getGroup()); }
(rule__Name__Group__0)
{ after(grammarAccess.getNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeywordFunctionCall
entryRuleKeywordFunctionCall 
:
{ before(grammarAccess.getKeywordFunctionCallRule()); }
	 ruleKeywordFunctionCall
{ after(grammarAccess.getKeywordFunctionCallRule()); } 
	 EOF 
;

// Rule KeywordFunctionCall
ruleKeywordFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getGroup()); }
(rule__KeywordFunctionCall__Group__0)
{ after(grammarAccess.getKeywordFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionArgumentList
entryRuleFunctionArgumentList 
:
{ before(grammarAccess.getFunctionArgumentListRule()); }
	 ruleFunctionArgumentList
{ after(grammarAccess.getFunctionArgumentListRule()); } 
	 EOF 
;

// Rule FunctionArgumentList
ruleFunctionArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getAlternatives()); }
(rule__FunctionArgumentList__Alternatives)
{ after(grammarAccess.getFunctionArgumentListAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedArgument
entryRuleNamedArgument 
:
{ before(grammarAccess.getNamedArgumentRule()); }
	 ruleNamedArgument
{ after(grammarAccess.getNamedArgumentRule()); } 
	 EOF 
;

// Rule NamedArgument
ruleNamedArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedArgumentAccess().getGroup()); }
(rule__NamedArgument__Group__0)
{ after(grammarAccess.getNamedArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentReference
entryRuleComponentReference 
:
{ before(grammarAccess.getComponentReferenceRule()); }
	 ruleComponentReference
{ after(grammarAccess.getComponentReferenceRule()); } 
	 EOF 
;

// Rule ComponentReference
ruleComponentReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentReferenceAccess().getGroup()); }
(rule__ComponentReference__Group__0)
{ after(grammarAccess.getComponentReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentReferenceSegment
entryRuleComponentReferenceSegment 
:
{ before(grammarAccess.getComponentReferenceSegmentRule()); }
	 ruleComponentReferenceSegment
{ after(grammarAccess.getComponentReferenceSegmentRule()); } 
	 EOF 
;

// Rule ComponentReferenceSegment
ruleComponentReferenceSegment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentReferenceSegmentAccess().getGroup()); }
(rule__ComponentReferenceSegment__Group__0)
{ after(grammarAccess.getComponentReferenceSegmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArraySubscriptList
entryRuleArraySubscriptList 
:
{ before(grammarAccess.getArraySubscriptListRule()); }
	 ruleArraySubscriptList
{ after(grammarAccess.getArraySubscriptListRule()); } 
	 EOF 
;

// Rule ArraySubscriptList
ruleArraySubscriptList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArraySubscriptListAccess().getGroup()); }
(rule__ArraySubscriptList__Group__0)
{ after(grammarAccess.getArraySubscriptListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubscript
entryRuleSubscript 
:
{ before(grammarAccess.getSubscriptRule()); }
	 ruleSubscript
{ after(grammarAccess.getSubscriptRule()); } 
	 EOF 
;

// Rule Subscript
ruleSubscript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubscriptAccess().getAlternatives()); }
(rule__Subscript__Alternatives)
{ after(grammarAccess.getSubscriptAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColonSubscript
entryRuleColonSubscript 
:
{ before(grammarAccess.getColonSubscriptRule()); }
	 ruleColonSubscript
{ after(grammarAccess.getColonSubscriptRule()); } 
	 EOF 
;

// Rule ColonSubscript
ruleColonSubscript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColonSubscriptAccess().getGroup()); }
(rule__ColonSubscript__Group__0)
{ after(grammarAccess.getColonSubscriptAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionSubscript
entryRuleExpressionSubscript 
:
{ before(grammarAccess.getExpressionSubscriptRule()); }
	 ruleExpressionSubscript
{ after(grammarAccess.getExpressionSubscriptRule()); } 
	 EOF 
;

// Rule ExpressionSubscript
ruleExpressionSubscript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionSubscriptAccess().getExpressionAssignment()); }
(rule__ExpressionSubscript__ExpressionAssignment)
{ after(grammarAccess.getExpressionSubscriptAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayConcatenationOperator
entryRuleArrayConcatenationOperator 
:
{ before(grammarAccess.getArrayConcatenationOperatorRule()); }
	 ruleArrayConcatenationOperator
{ after(grammarAccess.getArrayConcatenationOperatorRule()); } 
	 EOF 
;

// Rule ArrayConcatenationOperator
ruleArrayConcatenationOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getGroup()); }
(rule__ArrayConcatenationOperator__Group__0)
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayConstructionOperator
entryRuleArrayConstructionOperator 
:
{ before(grammarAccess.getArrayConstructionOperatorRule()); }
	 ruleArrayConstructionOperator
{ after(grammarAccess.getArrayConstructionOperatorRule()); } 
	 EOF 
;

// Rule ArrayConstructionOperator
ruleArrayConstructionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getGroup()); }
(rule__ArrayConstructionOperator__Group__0)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionList
entryRuleExpressionList 
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBeginExpression
entryRuleBeginExpression 
:
{ before(grammarAccess.getBeginExpressionRule()); }
	 ruleBeginExpression
{ after(grammarAccess.getBeginExpressionRule()); } 
	 EOF 
;

// Rule BeginExpression
ruleBeginExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBeginExpressionAccess().getGroup()); }
(rule__BeginExpression__Group__0)
{ after(grammarAccess.getBeginExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEndExpression
entryRuleEndExpression 
:
{ before(grammarAccess.getEndExpressionRule()); }
	 ruleEndExpression
{ after(grammarAccess.getEndExpressionRule()); } 
	 EOF 
;

// Rule EndExpression
ruleEndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEndExpressionAccess().getGroup()); }
(rule__EndExpression__Group__0)
{ after(grammarAccess.getEndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpression
entryRuleUnitExpression 
:
{ before(grammarAccess.getUnitExpressionRule()); }
	 ruleUnitExpression
{ after(grammarAccess.getUnitExpressionRule()); } 
	 EOF 
;

// Rule UnitExpression
ruleUnitExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionAccess().getGroup()); }
(rule__UnitExpression__Group__0)
{ after(grammarAccess.getUnitExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionNumerator
entryRuleUnitExpressionNumerator 
:
{ before(grammarAccess.getUnitExpressionNumeratorRule()); }
	 ruleUnitExpressionNumerator
{ after(grammarAccess.getUnitExpressionNumeratorRule()); } 
	 EOF 
;

// Rule UnitExpressionNumerator
ruleUnitExpressionNumerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getAlternatives()); }
(rule__UnitExpressionNumerator__Alternatives)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionDenominator
entryRuleUnitExpressionDenominator 
:
{ before(grammarAccess.getUnitExpressionDenominatorRule()); }
	 ruleUnitExpressionDenominator
{ after(grammarAccess.getUnitExpressionDenominatorRule()); } 
	 EOF 
;

// Rule UnitExpressionDenominator
ruleUnitExpressionDenominator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getAlternatives()); }
(rule__UnitExpressionDenominator__Alternatives)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionFactor
entryRuleUnitExpressionFactor 
:
{ before(grammarAccess.getUnitExpressionFactorRule()); }
	 ruleUnitExpressionFactor
{ after(grammarAccess.getUnitExpressionFactorRule()); } 
	 EOF 
;

// Rule UnitExpressionFactor
ruleUnitExpressionFactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getGroup()); }
(rule__UnitExpressionFactor__Group__0)
{ after(grammarAccess.getUnitExpressionFactorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionExponent
entryRuleUnitExpressionExponent 
:
{ before(grammarAccess.getUnitExpressionExponentRule()); }
	 ruleUnitExpressionExponent
{ after(grammarAccess.getUnitExpressionExponentRule()); } 
	 EOF 
;

// Rule UnitExpressionExponent
ruleUnitExpressionExponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getGroup()); }
(rule__UnitExpressionExponent__Group__0)
{ after(grammarAccess.getUnitExpressionExponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddSubtractOperator
ruleAddSubtractOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractOperatorAccess().getAlternatives()); }
(rule__AddSubtractOperator__Alternatives)
{ after(grammarAccess.getAddSubtractOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplyDivideOperator
ruleMultiplyDivideOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getAlternatives()); }
(rule__MultiplyDivideOperator__Alternatives)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PowerOperator
rulePowerOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOperatorAccess().getAlternatives()); }
(rule__PowerOperator__Alternatives)
{ after(grammarAccess.getPowerOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BooleanKind
ruleBooleanKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanKindAccess().getAlternatives()); }
(rule__BooleanKind__Alternatives)
{ after(grammarAccess.getBooleanKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PackageableElementAS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageableElementASAccess().getPackageASParserRuleCall_0()); }
	rulePackageAS
{ after(grammarAccess.getPackageableElementASAccess().getPackageASParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPackageableElementASAccess().getEnumerationASParserRuleCall_1()); }
	ruleEnumerationAS
{ after(grammarAccess.getPackageableElementASAccess().getEnumerationASParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
	ruleConditionalExpression
{ after(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getRangeExpressionParserRuleCall_1()); }
	ruleRangeExpression
{ after(grammarAccess.getExpressionAccess().getRangeExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getLogicalNotExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
(rule__LogicalNotExpression__Group_1__0)
{ after(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getUnaryMinusExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getGroup_1()); }
(rule__UnaryMinusExpression__Group_1__0)
{ after(grammarAccess.getUnaryMinusExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_1()); }
	ruleFunctionCall
{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getComponentReferenceParserRuleCall_2()); }
	ruleComponentReference
{ after(grammarAccess.getPrimaryExpressionAccess().getComponentReferenceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_3()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getArrayConcatenationOperatorParserRuleCall_4()); }
	ruleArrayConcatenationOperator
{ after(grammarAccess.getPrimaryExpressionAccess().getArrayConcatenationOperatorParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getArrayConstructionOperatorParserRuleCall_5()); }
	ruleArrayConstructionOperator
{ after(grammarAccess.getPrimaryExpressionAccess().getArrayConstructionOperatorParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getBeginExpressionParserRuleCall_6()); }
	ruleBeginExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getBeginExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getEndExpressionParserRuleCall_7()); }
	ruleEndExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getEndExpressionParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumericalLiteralParserRuleCall_0()); }
	ruleNumericalLiteral
{ after(grammarAccess.getLiteralAccess().getNumericalLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalLiteralAccess().getRealLiteralParserRuleCall_0()); }
	ruleRealLiteral
{ after(grammarAccess.getNumericalLiteralAccess().getRealLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
	ruleIntegerLiteral
{ after(grammarAccess.getNumericalLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getNamedFunctionCallParserRuleCall_0()); }
	ruleNamedFunctionCall
{ after(grammarAccess.getFunctionCallAccess().getNamedFunctionCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFunctionCallAccess().getKeywordFunctionCallParserRuleCall_1()); }
	ruleKeywordFunctionCall
{ after(grammarAccess.getFunctionCallAccess().getKeywordFunctionCallParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordFunctionCall__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getNameDerKeyword_0_0_0()); }

	'der' 

{ after(grammarAccess.getKeywordFunctionCallAccess().getNameDerKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getKeywordFunctionCallAccess().getNameInitialKeyword_0_0_1()); }

	'initial' 

{ after(grammarAccess.getKeywordFunctionCallAccess().getNameInitialKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getGroup_0()); }
(rule__FunctionArgumentList__Group_0__0)
{ after(grammarAccess.getFunctionArgumentListAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentListAccess().getGroup_1()); }
(rule__FunctionArgumentList__Group_1__0)
{ after(grammarAccess.getFunctionArgumentListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subscript__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubscriptAccess().getColonSubscriptParserRuleCall_0()); }
	ruleColonSubscript
{ after(grammarAccess.getSubscriptAccess().getColonSubscriptParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSubscriptAccess().getExpressionSubscriptParserRuleCall_1()); }
	ruleExpressionSubscript
{ after(grammarAccess.getSubscriptAccess().getExpressionSubscriptParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getOneAssignment_0()); }
(rule__UnitExpressionNumerator__OneAssignment_0)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getOneAssignment_0()); }
)

    |(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1()); }
(rule__UnitExpressionNumerator__Group_1__0)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_0()); }
(rule__UnitExpressionDenominator__FactorsAssignment_0)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_0()); }
)

    |(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1()); }
(rule__UnitExpressionDenominator__Group_1__0)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_5()); }
(	'<>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractOperatorAccess().getAddEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAddSubtractOperatorAccess().getAddEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAddSubtractOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAddSubtractOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAddSubtractOperatorAccess().getElementWiseAddEnumLiteralDeclaration_2()); }
(	'.+' 
)
{ after(grammarAccess.getAddSubtractOperatorAccess().getElementWiseAddEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAddSubtractOperatorAccess().getElementWiseSubtractEnumLiteralDeclaration_3()); }
(	'.-' 
)
{ after(grammarAccess.getAddSubtractOperatorAccess().getElementWiseSubtractEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_2()); }
(	'.*' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_3()); }
(	'./' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0()); }
(	'^' 
)
{ after(grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1()); }
(	'.^' 
)
{ after(grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanKindAccess().getFalseEnumLiteralDeclaration_0()); }
(	'false' 
)
{ after(grammarAccess.getBooleanKindAccess().getFalseEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBooleanKindAccess().getTrueEnumLiteralDeclaration_1()); }
(	'true' 
)
{ after(grammarAccess.getBooleanKindAccess().getTrueEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PackageAS__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageAS__Group__0__Impl
	rule__PackageAS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageAS__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageASAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageASAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageAS__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageAS__Group__1__Impl
	rule__PackageAS__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageAS__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageASAccess().getNameAssignment_1()); }
(rule__PackageAS__NameAssignment_1)
{ after(grammarAccess.getPackageASAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageAS__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageAS__Group__2__Impl
	rule__PackageAS__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageAS__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageASAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getPackageASAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageAS__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageAS__Group__3__Impl
	rule__PackageAS__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageAS__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageASAccess().getPackagedElementsAssignment_3()); }
(rule__PackageAS__PackagedElementsAssignment_3)*
{ after(grammarAccess.getPackageASAccess().getPackagedElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageAS__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageAS__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageAS__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageASAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getPackageASAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationAS__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group__0__Impl
	rule__EnumerationAS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getEnumerationKeyword_0()); }

	'enumeration' 

{ after(grammarAccess.getEnumerationASAccess().getEnumerationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationAS__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group__1__Impl
	rule__EnumerationAS__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getNameAssignment_1()); }
(rule__EnumerationAS__NameAssignment_1)
{ after(grammarAccess.getEnumerationASAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationAS__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group__2__Impl
	rule__EnumerationAS__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumerationASAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationAS__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group__3__Impl
	rule__EnumerationAS__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getGroup_3()); }
(rule__EnumerationAS__Group_3__0)?
{ after(grammarAccess.getEnumerationASAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationAS__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumerationASAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationAS__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group_3__0__Impl
	rule__EnumerationAS__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getLiteralsAssignment_3_0()); }
(rule__EnumerationAS__LiteralsAssignment_3_0)
{ after(grammarAccess.getEnumerationASAccess().getLiteralsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationAS__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getGroup_3_1()); }
(rule__EnumerationAS__Group_3_1__0)*
{ after(grammarAccess.getEnumerationASAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationAS__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group_3_1__0__Impl
	rule__EnumerationAS__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getEnumerationASAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationAS__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationAS__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getLiteralsAssignment_3_1_1()); }
(rule__EnumerationAS__LiteralsAssignment_3_1_1)
{ after(grammarAccess.getEnumerationASAccess().getLiteralsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getConditionalExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
	rule__ConditionalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_1()); }
(rule__ConditionalExpression__CasesAssignment_1)
{ after(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__2__Impl
	rule__ConditionalExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
(rule__ConditionalExpression__Group_2__0)*
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__3__Impl
	rule__ConditionalExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseKeyword_3()); }

	'else' 

{ after(grammarAccess.getConditionalExpressionAccess().getElseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseExpressionAssignment_4()); }
(rule__ConditionalExpression__ElseExpressionAssignment_4)
{ after(grammarAccess.getConditionalExpressionAccess().getElseExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConditionalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__0__Impl
	rule__ConditionalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseifKeyword_2_0()); }

	'elseif' 

{ after(grammarAccess.getConditionalExpressionAccess().getElseifKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_2_1()); }
(rule__ConditionalExpression__CasesAssignment_2_1)
{ after(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpressionCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpressionCase__Group__0__Impl
	rule__ConditionalExpressionCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionAssignment_0()); }
(rule__ConditionalExpressionCase__ConditionExpressionAssignment_0)
{ after(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpressionCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpressionCase__Group__1__Impl
	rule__ConditionalExpressionCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getThenKeyword_1()); }

	'then' 

{ after(grammarAccess.getConditionalExpressionCaseAccess().getThenKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpressionCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpressionCase__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionAssignment_2()); }
(rule__ConditionalExpressionCase__ThenExpressionAssignment_2)
{ after(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RangeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__0__Impl
	rule__RangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getRangeExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
(rule__RangeExpression__Group_1__0)?
{ after(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__0__Impl
	rule__RangeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getRangeExpressionExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getRangeExpressionAccess().getRangeExpressionExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__1__Impl
	rule__RangeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__2__Impl
	rule__RangeExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getExpressionsAssignment_1_2()); }
(rule__RangeExpression__ExpressionsAssignment_1_2)
{ after(grammarAccess.getRangeExpressionAccess().getExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup_1_3()); }
(rule__RangeExpression__Group_1_3__0)?
{ after(grammarAccess.getRangeExpressionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RangeExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1_3__0__Impl
	rule__RangeExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_3_0()); }

	':' 

{ after(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getExpressionsAssignment_1_3_1()); }
(rule__RangeExpression__ExpressionsAssignment_1_3_1)
{ after(grammarAccess.getRangeExpressionAccess().getExpressionsAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)?
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
(rule__LogicalOrExpression__Group_1_1__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
(rule__LogicalOrExpression__Group_1_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_1__0__Impl
	rule__LogicalOrExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOrKeyword_1_1_0()); }

	'or' 

{ after(grammarAccess.getLogicalOrExpressionAccess().getOrKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__LogicalOrExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
	ruleLogicalNotExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)?
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
(rule__LogicalAndExpression__Group_1_1__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
(rule__LogicalAndExpression__Group_1_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_1__0__Impl
	rule__LogicalAndExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getLogicalAndExpressionAccess().getAndKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__LogicalAndExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalNotExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__0__Impl
	rule__LogicalNotExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__1__Impl
	rule__LogicalNotExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getNotKeyword_1_1()); }

	'not' 

{ after(grammarAccess.getLogicalNotExpressionAccess().getNotKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
(rule__LogicalNotExpression__OperandAssignment_1_2)
{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAddSubtractExpressionParserRuleCall_0()); }
	ruleAddSubtractExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAddSubtractExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)?
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
(rule__RelationalExpression__Group_1_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
(rule__RelationalExpression__Group_1_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_1__0__Impl
	rule__RelationalExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorsAssignment_1_1_0()); }
(rule__RelationalExpression__OperatorsAssignment_1_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorsAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__RelationalExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddSubtractExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group__0__Impl
	rule__AddSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getMultiplyDivideExpressionParserRuleCall_0()); }
	ruleMultiplyDivideExpression
{ after(grammarAccess.getAddSubtractExpressionAccess().getMultiplyDivideExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddSubtractExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getGroup_1()); }
(rule__AddSubtractExpression__Group_1__0)?
{ after(grammarAccess.getAddSubtractExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddSubtractExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group_1__0__Impl
	rule__AddSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getAddSubtractExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getAddSubtractExpressionAccess().getAddSubtractExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddSubtractExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getGroup_1_1()); }
(rule__AddSubtractExpression__Group_1_1__0)
{ after(grammarAccess.getAddSubtractExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getGroup_1_1()); }
(rule__AddSubtractExpression__Group_1_1__0)*
{ after(grammarAccess.getAddSubtractExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddSubtractExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group_1_1__0__Impl
	rule__AddSubtractExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getOperatorsAssignment_1_1_0()); }
(rule__AddSubtractExpression__OperatorsAssignment_1_1_0)
{ after(grammarAccess.getAddSubtractExpressionAccess().getOperatorsAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddSubtractExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__AddSubtractExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getAddSubtractExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyDivideExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group__0__Impl
	rule__MultiplyDivideExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getPowerExpressionParserRuleCall_0()); }
	rulePowerExpression
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getPowerExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1()); }
(rule__MultiplyDivideExpression__Group_1__0)?
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyDivideExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group_1__0__Impl
	rule__MultiplyDivideExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getMultiplyDivideExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getMultiplyDivideExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1_1()); }
(rule__MultiplyDivideExpression__Group_1_1__0)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1_1()); }
(rule__MultiplyDivideExpression__Group_1_1__0)*
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyDivideExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group_1_1__0__Impl
	rule__MultiplyDivideExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getOperatorsAssignment_1_1_0()); }
(rule__MultiplyDivideExpression__OperatorsAssignment_1_1_0)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getOperatorsAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__MultiplyDivideExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowerExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group__0__Impl
	rule__PowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getUnaryMinusExpressionParserRuleCall_0()); }
	ruleUnaryMinusExpression
{ after(grammarAccess.getPowerExpressionAccess().getUnaryMinusExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
(rule__PowerExpression__Group_1__0)?
{ after(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowerExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__0__Impl
	rule__PowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getPowerExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getPowerExpressionAccess().getPowerExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__1__Impl
	rule__PowerExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1()); }
(rule__PowerExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getExponentAssignment_1_2()); }
(rule__PowerExpression__ExponentAssignment_1_2)
{ after(grammarAccess.getPowerExpressionAccess().getExponentAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryMinusExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryMinusExpression__Group_1__0__Impl
	rule__UnaryMinusExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getUnaryMinusExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getUnaryMinusExpressionAccess().getUnaryMinusExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryMinusExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryMinusExpression__Group_1__1__Impl
	rule__UnaryMinusExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_1_1()); }

	'-' 

{ after(grammarAccess.getUnaryMinusExpressionAccess().getHyphenMinusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryMinusExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryMinusExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getOperandAssignment_1_2()); }
(rule__UnaryMinusExpression__OperandAssignment_1_2)
{ after(grammarAccess.getUnaryMinusExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RealLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__0__Impl
	rule__RealLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getValueAssignment_0()); }
(rule__RealLiteral__ValueAssignment_0)
{ after(grammarAccess.getRealLiteralAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getGroup_1()); }
(rule__RealLiteral__Group_1__0)?
{ after(grammarAccess.getRealLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group_1__0__Impl
	rule__RealLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getRealLiteralAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group_1__1__Impl
	rule__RealLiteral__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getUnitAssignment_1_1()); }
(rule__RealLiteral__UnitAssignment_1_1)
{ after(grammarAccess.getRealLiteralAccess().getUnitAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getRealLiteralAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntegerLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group__0__Impl
	rule__IntegerLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment_0()); }
(rule__IntegerLiteral__ValueAssignment_0)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getGroup_1()); }
(rule__IntegerLiteral__Group_1__0)?
{ after(grammarAccess.getIntegerLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group_1__0__Impl
	rule__IntegerLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getIntegerLiteralAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group_1__1__Impl
	rule__IntegerLiteral__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_1_1()); }
(rule__IntegerLiteral__UnitAssignment_1_1)
{ after(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getIntegerLiteralAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamedFunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedFunctionCall__Group__0__Impl
	rule__NamedFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedFunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedFunctionCallAccess().getNameAssignment_0()); }
(rule__NamedFunctionCall__NameAssignment_0)
{ after(grammarAccess.getNamedFunctionCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedFunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedFunctionCall__Group__1__Impl
	rule__NamedFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedFunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getNamedFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedFunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedFunctionCall__Group__2__Impl
	rule__NamedFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedFunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedFunctionCallAccess().getArgumentListAssignment_2()); }
(rule__NamedFunctionCall__ArgumentListAssignment_2)?
{ after(grammarAccess.getNamedFunctionCallAccess().getArgumentListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedFunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedFunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedFunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getNamedFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Name__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__0__Impl
	rule__Name__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getGlobalAssignment_0()); }
(rule__Name__GlobalAssignment_0)?
{ after(grammarAccess.getNameAccess().getGlobalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__1__Impl
	rule__Name__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getIdentifiersAssignment_1()); }
(rule__Name__IdentifiersAssignment_1)
{ after(grammarAccess.getNameAccess().getIdentifiersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getGroup_2()); }
(rule__Name__Group_2__0)*
{ after(grammarAccess.getNameAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Name__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group_2__0__Impl
	rule__Name__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getColonColonKeyword_2_0()); }

	'::' 

{ after(grammarAccess.getNameAccess().getColonColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getIdentifiersAssignment_2_1()); }
(rule__Name__IdentifiersAssignment_2_1)
{ after(grammarAccess.getNameAccess().getIdentifiersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__KeywordFunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeywordFunctionCall__Group__0__Impl
	rule__KeywordFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordFunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getNameAssignment_0()); }
(rule__KeywordFunctionCall__NameAssignment_0)
{ after(grammarAccess.getKeywordFunctionCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeywordFunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeywordFunctionCall__Group__1__Impl
	rule__KeywordFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordFunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getKeywordFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeywordFunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeywordFunctionCall__Group__2__Impl
	rule__KeywordFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordFunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getArgumentListAssignment_2()); }
(rule__KeywordFunctionCall__ArgumentListAssignment_2)?
{ after(grammarAccess.getKeywordFunctionCallAccess().getArgumentListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeywordFunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeywordFunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordFunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getKeywordFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionArgumentList__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0__0__Impl
	rule__FunctionArgumentList__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getArgumentsAssignment_0_0()); }
(rule__FunctionArgumentList__ArgumentsAssignment_0_0)
{ after(grammarAccess.getFunctionArgumentListAccess().getArgumentsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentList__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1()); }
(rule__FunctionArgumentList__Group_0_1__0)
{ after(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentList__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0_1__0__Impl
	rule__FunctionArgumentList__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1_0()); }
(rule__FunctionArgumentList__Group_0_1_0__0)*
{ after(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentList__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1_1()); }
(rule__FunctionArgumentList__Group_0_1_1__0)*
{ after(grammarAccess.getFunctionArgumentListAccess().getGroup_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentList__Group_0_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0_1_0__0__Impl
	rule__FunctionArgumentList__Group_0_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getCommaKeyword_0_1_0_0()); }

	',' 

{ after(grammarAccess.getFunctionArgumentListAccess().getCommaKeyword_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentList__Group_0_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getArgumentsAssignment_0_1_0_1()); }
(rule__FunctionArgumentList__ArgumentsAssignment_0_1_0_1)
{ after(grammarAccess.getFunctionArgumentListAccess().getArgumentsAssignment_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentList__Group_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0_1_1__0__Impl
	rule__FunctionArgumentList__Group_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getCommaKeyword_0_1_1_0()); }

	',' 

{ after(grammarAccess.getFunctionArgumentListAccess().getCommaKeyword_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentList__Group_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_0_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_0_1_1_1()); }
(rule__FunctionArgumentList__NamedArgumentsAssignment_0_1_1_1)
{ after(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_1__0__Impl
	rule__FunctionArgumentList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_1_0()); }
(rule__FunctionArgumentList__NamedArgumentsAssignment_1_0)
{ after(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getGroup_1_1()); }
(rule__FunctionArgumentList__Group_1_1__0)*
{ after(grammarAccess.getFunctionArgumentListAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_1_1__0__Impl
	rule__FunctionArgumentList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getFunctionArgumentListAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionArgumentList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_1_1_1()); }
(rule__FunctionArgumentList__NamedArgumentsAssignment_1_1_1)
{ after(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__0__Impl
	rule__NamedArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getIdentifierAssignment_0()); }
(rule__NamedArgument__IdentifierAssignment_0)
{ after(grammarAccess.getNamedArgumentAccess().getIdentifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__1__Impl
	rule__NamedArgument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getNamedArgumentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedArgument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedArgument__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExpressionAssignment_2()); }
(rule__NamedArgument__ExpressionAssignment_2)
{ after(grammarAccess.getNamedArgumentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentReference__Group__0__Impl
	rule__ComponentReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getGlobalAssignment_0()); }
(rule__ComponentReference__GlobalAssignment_0)?
{ after(grammarAccess.getComponentReferenceAccess().getGlobalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentReference__Group__1__Impl
	rule__ComponentReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getSegmentsAssignment_1()); }
(rule__ComponentReference__SegmentsAssignment_1)
{ after(grammarAccess.getComponentReferenceAccess().getSegmentsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getGroup_2()); }
(rule__ComponentReference__Group_2__0)*
{ after(grammarAccess.getComponentReferenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentReference__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentReference__Group_2__0__Impl
	rule__ComponentReference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getComponentReferenceAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentReference__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentReference__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getSegmentsAssignment_2_1()); }
(rule__ComponentReference__SegmentsAssignment_2_1)
{ after(grammarAccess.getComponentReferenceAccess().getSegmentsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentReferenceSegment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentReferenceSegment__Group__0__Impl
	rule__ComponentReferenceSegment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReferenceSegment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceSegmentAccess().getIdentifierAssignment_0()); }
(rule__ComponentReferenceSegment__IdentifierAssignment_0)
{ after(grammarAccess.getComponentReferenceSegmentAccess().getIdentifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentReferenceSegment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentReferenceSegment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReferenceSegment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceSegmentAccess().getSubscriptListAssignment_1()); }
(rule__ComponentReferenceSegment__SubscriptListAssignment_1)?
{ after(grammarAccess.getComponentReferenceSegmentAccess().getSubscriptListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArraySubscriptList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySubscriptList__Group__0__Impl
	rule__ArraySubscriptList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getArraySubscriptListAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySubscriptList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySubscriptList__Group__1__Impl
	rule__ArraySubscriptList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getSubscriptsAssignment_1()); }
(rule__ArraySubscriptList__SubscriptsAssignment_1)
{ after(grammarAccess.getArraySubscriptListAccess().getSubscriptsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySubscriptList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySubscriptList__Group__2__Impl
	rule__ArraySubscriptList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getGroup_2()); }
(rule__ArraySubscriptList__Group_2__0)*
{ after(grammarAccess.getArraySubscriptListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySubscriptList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySubscriptList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArraySubscriptListAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArraySubscriptList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySubscriptList__Group_2__0__Impl
	rule__ArraySubscriptList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getArraySubscriptListAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArraySubscriptList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArraySubscriptList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getSubscriptsAssignment_2_1()); }
(rule__ArraySubscriptList__SubscriptsAssignment_2_1)
{ after(grammarAccess.getArraySubscriptListAccess().getSubscriptsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColonSubscript__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColonSubscript__Group__0__Impl
	rule__ColonSubscript__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonSubscript__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColonSubscriptAccess().getColonSubscriptAction_0()); }
(

)
{ after(grammarAccess.getColonSubscriptAccess().getColonSubscriptAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColonSubscript__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColonSubscript__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonSubscript__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColonSubscriptAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getColonSubscriptAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayConcatenationOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__0__Impl
	rule__ArrayConcatenationOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getArrayConcatenationOperatorAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__1__Impl
	rule__ArrayConcatenationOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsAssignment_1()); }
(rule__ArrayConcatenationOperator__ExpressionListsAssignment_1)
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__2__Impl
	rule__ArrayConcatenationOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getGroup_2()); }
(rule__ArrayConcatenationOperator__Group_2__0)*
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayConcatenationOperatorAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayConcatenationOperator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group_2__0__Impl
	rule__ArrayConcatenationOperator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getSemicolonKeyword_2_0()); }

	';' 

{ after(grammarAccess.getArrayConcatenationOperatorAccess().getSemicolonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsAssignment_2_1()); }
(rule__ArrayConcatenationOperator__ExpressionListsAssignment_2_1)
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayConstructionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group__0__Impl
	rule__ArrayConstructionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getArrayConstructionOperatorAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group__1__Impl
	rule__ArrayConstructionOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getArgumentListAssignment_1()); }
(rule__ArrayConstructionOperator__ArgumentListAssignment_1)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getArgumentListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getArrayConstructionOperatorAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
(rule__ExpressionList__ExpressionsAssignment_0)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
(rule__ExpressionList__ExpressionsAssignment_1_1)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); }
(rule__ParenthesizedExpression__ExpressionAssignment_1)
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BeginExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeginExpression__Group__0__Impl
	rule__BeginExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BeginExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeginExpressionAccess().getBeginExpressionAction_0()); }
(

)
{ after(grammarAccess.getBeginExpressionAccess().getBeginExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BeginExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeginExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BeginExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeginExpressionAccess().getBeginKeyword_1()); }

	'begin' 

{ after(grammarAccess.getBeginExpressionAccess().getBeginKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndExpression__Group__0__Impl
	rule__EndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndExpressionAccess().getEndExpressionAction_0()); }
(

)
{ after(grammarAccess.getEndExpressionAccess().getEndExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndExpressionAccess().getEndKeyword_1()); }

	'end' 

{ after(grammarAccess.getEndExpressionAccess().getEndKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group__0__Impl
	rule__UnitExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getNumeratorAssignment_0()); }
(rule__UnitExpression__NumeratorAssignment_0)
{ after(grammarAccess.getUnitExpressionAccess().getNumeratorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getGroup_1()); }
(rule__UnitExpression__Group_1__0)?
{ after(grammarAccess.getUnitExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_1__0__Impl
	rule__UnitExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getSolidusKeyword_1_0()); }

	'/' 

{ after(grammarAccess.getUnitExpressionAccess().getSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getDenominatorAssignment_1_1()); }
(rule__UnitExpression__DenominatorAssignment_1_1)
{ after(grammarAccess.getUnitExpressionAccess().getDenominatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionNumerator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1__0__Impl
	rule__UnitExpressionNumerator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_0()); }
(rule__UnitExpressionNumerator__FactorsAssignment_1_0)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionNumerator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1_1()); }
(rule__UnitExpressionNumerator__Group_1_1__0)*
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionNumerator__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1_1__0__Impl
	rule__UnitExpressionNumerator__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getUnitExpressionNumeratorAccess().getAsteriskKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionNumerator__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_1_1()); }
(rule__UnitExpressionNumerator__FactorsAssignment_1_1_1)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionDenominator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__0__Impl
	rule__UnitExpressionDenominator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getUnitExpressionDenominatorAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__1__Impl
	rule__UnitExpressionDenominator__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_1()); }
(rule__UnitExpressionDenominator__FactorsAssignment_1_1)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__2__Impl
	rule__UnitExpressionDenominator__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1_2()); }
(rule__UnitExpressionDenominator__Group_1_2__0)*
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getUnitExpressionDenominatorAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnitExpressionDenominator__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1_2__0__Impl
	rule__UnitExpressionDenominator__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getAsteriskKeyword_1_2_0()); }

	'*' 

{ after(grammarAccess.getUnitExpressionDenominatorAccess().getAsteriskKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_2_1()); }
(rule__UnitExpressionDenominator__FactorsAssignment_1_2_1)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionFactor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group__0__Impl
	rule__UnitExpressionFactor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getOperandAssignment_0()); }
(rule__UnitExpressionFactor__OperandAssignment_0)
{ after(grammarAccess.getUnitExpressionFactorAccess().getOperandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionFactor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getGroup_1()); }
(rule__UnitExpressionFactor__Group_1__0)?
{ after(grammarAccess.getUnitExpressionFactorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionFactor__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group_1__0__Impl
	rule__UnitExpressionFactor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getCircumflexAccentKeyword_1_0()); }

	'^' 

{ after(grammarAccess.getUnitExpressionFactorAccess().getCircumflexAccentKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionFactor__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getExponentAssignment_1_1()); }
(rule__UnitExpressionFactor__ExponentAssignment_1_1)
{ after(grammarAccess.getUnitExpressionFactorAccess().getExponentAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionExponent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionExponent__Group__0__Impl
	rule__UnitExpressionExponent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getNegativeAssignment_0()); }
(rule__UnitExpressionExponent__NegativeAssignment_0)?
{ after(grammarAccess.getUnitExpressionExponentAccess().getNegativeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionExponent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionExponent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getValueAssignment_1()); }
(rule__UnitExpressionExponent__ValueAssignment_1)
{ after(grammarAccess.getUnitExpressionExponentAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PackageAS__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageASAccess().getNameNameParserRuleCall_1_0()); }
	ruleName{ after(grammarAccess.getPackageASAccess().getNameNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageAS__PackagedElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageASAccess().getPackagedElementsPackageableElementASParserRuleCall_3_0()); }
	rulePackageableElementAS{ after(grammarAccess.getPackageASAccess().getPackagedElementsPackageableElementASParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getNameIDENTTerminalRuleCall_1_0()); }
	RULE_IDENT{ after(grammarAccess.getEnumerationASAccess().getNameIDENTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__LiteralsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getLiteralsEnumerationLiteralASParserRuleCall_3_0_0()); }
	ruleEnumerationLiteralAS{ after(grammarAccess.getEnumerationASAccess().getLiteralsEnumerationLiteralASParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationAS__LiteralsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationASAccess().getLiteralsEnumerationLiteralASParserRuleCall_3_1_1_0()); }
	ruleEnumerationLiteralAS{ after(grammarAccess.getEnumerationASAccess().getLiteralsEnumerationLiteralASParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteralAS__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralASAccess().getNameIDENTTerminalRuleCall_0()); }
	RULE_IDENT{ after(grammarAccess.getEnumerationLiteralASAccess().getNameIDENTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__CasesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_1_0()); }
	ruleConditionalExpressionCase{ after(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__CasesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_2_1_0()); }
	ruleConditionalExpressionCase{ after(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__ElseExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getElseExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__ConditionExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__ThenExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__ExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getExpressionsLogicalOrExpressionParserRuleCall_1_2_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getRangeExpressionAccess().getExpressionsLogicalOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__ExpressionsAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getExpressionsLogicalOrExpressionParserRuleCall_1_3_1_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getRangeExpressionAccess().getExpressionsLogicalOrExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperandsLogicalAndExpressionParserRuleCall_1_1_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getOperandsLogicalAndExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperandsLogicalNotExpressionParserRuleCall_1_1_1_0()); }
	ruleLogicalNotExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getOperandsLogicalNotExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandRelationalExpressionParserRuleCall_1_2_0()); }
	ruleRelationalExpression{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandRelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorsRelationalOperatorEnumRuleCall_1_1_0_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorsRelationalOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperandsAddSubtractExpressionParserRuleCall_1_1_1_0()); }
	ruleAddSubtractExpression{ after(grammarAccess.getRelationalExpressionAccess().getOperandsAddSubtractExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__OperatorsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getOperatorsAddSubtractOperatorEnumRuleCall_1_1_0_0()); }
	ruleAddSubtractOperator{ after(grammarAccess.getAddSubtractExpressionAccess().getOperatorsAddSubtractOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getOperandsMultiplyDivideExpressionParserRuleCall_1_1_1_0()); }
	ruleMultiplyDivideExpression{ after(grammarAccess.getAddSubtractExpressionAccess().getOperandsMultiplyDivideExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__OperatorsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getOperatorsMultiplyDivideOperatorEnumRuleCall_1_1_0_0()); }
	ruleMultiplyDivideOperator{ after(grammarAccess.getMultiplyDivideExpressionAccess().getOperatorsMultiplyDivideOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getOperandsPowerExpressionParserRuleCall_1_1_1_0()); }
	rulePowerExpression{ after(grammarAccess.getMultiplyDivideExpressionAccess().getOperandsPowerExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getOperatorPowerOperatorEnumRuleCall_1_1_0()); }
	rulePowerOperator{ after(grammarAccess.getPowerExpressionAccess().getOperatorPowerOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__ExponentAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getExponentUnaryMinusExpressionParserRuleCall_1_2_0()); }
	ruleUnaryMinusExpression{ after(grammarAccess.getPowerExpressionAccess().getExponentUnaryMinusExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryMinusExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryMinusExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getUnaryMinusExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_0_0()); }
	RULE_REAL{ after(grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__UnitAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getUnitUnitExpressionParserRuleCall_1_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getRealLiteralAccess().getUnitUnitExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTEGERTerminalRuleCall_0_0()); }
	RULE_INTEGER{ after(grammarAccess.getIntegerLiteralAccess().getValueINTEGERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__UnitAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getUnitUnitExpressionParserRuleCall_1_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getIntegerLiteralAccess().getUnitUnitExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueBooleanKindEnumRuleCall_0()); }
	ruleBooleanKind{ after(grammarAccess.getBooleanLiteralAccess().getValueBooleanKindEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedFunctionCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedFunctionCallAccess().getNameNameParserRuleCall_0_0()); }
	ruleName{ after(grammarAccess.getNamedFunctionCallAccess().getNameNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedFunctionCall__ArgumentListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedFunctionCallAccess().getArgumentListFunctionArgumentListParserRuleCall_2_0()); }
	ruleFunctionArgumentList{ after(grammarAccess.getNamedFunctionCallAccess().getArgumentListFunctionArgumentListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Name__GlobalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getGlobalColonColonKeyword_0_0()); }
(
{ before(grammarAccess.getNameAccess().getGlobalColonColonKeyword_0_0()); }

	'::' 

{ after(grammarAccess.getNameAccess().getGlobalColonColonKeyword_0_0()); }
)

{ after(grammarAccess.getNameAccess().getGlobalColonColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Name__IdentifiersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getIdentifiersIDENTTerminalRuleCall_1_0()); }
	RULE_IDENT{ after(grammarAccess.getNameAccess().getIdentifiersIDENTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Name__IdentifiersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getIdentifiersIDENTTerminalRuleCall_2_1_0()); }
	RULE_IDENT{ after(grammarAccess.getNameAccess().getIdentifiersIDENTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordFunctionCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getNameAlternatives_0_0()); }
(rule__KeywordFunctionCall__NameAlternatives_0_0)
{ after(grammarAccess.getKeywordFunctionCallAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordFunctionCall__ArgumentListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordFunctionCallAccess().getArgumentListFunctionArgumentListParserRuleCall_2_0()); }
	ruleFunctionArgumentList{ after(grammarAccess.getKeywordFunctionCallAccess().getArgumentListFunctionArgumentListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__ArgumentsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getArgumentsExpressionParserRuleCall_0_0_0()); }
	ruleExpression{ after(grammarAccess.getFunctionArgumentListAccess().getArgumentsExpressionParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__ArgumentsAssignment_0_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getArgumentsExpressionParserRuleCall_0_1_0_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionArgumentListAccess().getArgumentsExpressionParserRuleCall_0_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__NamedArgumentsAssignment_0_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsNamedArgumentParserRuleCall_0_1_1_1_0()); }
	ruleNamedArgument{ after(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsNamedArgumentParserRuleCall_0_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__NamedArgumentsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsNamedArgumentParserRuleCall_1_0_0()); }
	ruleNamedArgument{ after(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsNamedArgumentParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentList__NamedArgumentsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0()); }
	ruleNamedArgument{ after(grammarAccess.getFunctionArgumentListAccess().getNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__IdentifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getIdentifierIDENTTerminalRuleCall_0_0()); }
	RULE_IDENT{ after(grammarAccess.getNamedArgumentAccess().getIdentifierIDENTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedArgument__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedArgumentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getNamedArgumentAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__GlobalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getGlobalFullStopKeyword_0_0()); }
(
{ before(grammarAccess.getComponentReferenceAccess().getGlobalFullStopKeyword_0_0()); }

	'.' 

{ after(grammarAccess.getComponentReferenceAccess().getGlobalFullStopKeyword_0_0()); }
)

{ after(grammarAccess.getComponentReferenceAccess().getGlobalFullStopKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__SegmentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getSegmentsComponentReferenceSegmentParserRuleCall_1_0()); }
	ruleComponentReferenceSegment{ after(grammarAccess.getComponentReferenceAccess().getSegmentsComponentReferenceSegmentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReference__SegmentsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceAccess().getSegmentsComponentReferenceSegmentParserRuleCall_2_1_0()); }
	ruleComponentReferenceSegment{ after(grammarAccess.getComponentReferenceAccess().getSegmentsComponentReferenceSegmentParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReferenceSegment__IdentifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceSegmentAccess().getIdentifierIDENTTerminalRuleCall_0_0()); }
	RULE_IDENT{ after(grammarAccess.getComponentReferenceSegmentAccess().getIdentifierIDENTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentReferenceSegment__SubscriptListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentReferenceSegmentAccess().getSubscriptListArraySubscriptListParserRuleCall_1_0()); }
	ruleArraySubscriptList{ after(grammarAccess.getComponentReferenceSegmentAccess().getSubscriptListArraySubscriptListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__SubscriptsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getSubscriptsSubscriptParserRuleCall_1_0()); }
	ruleSubscript{ after(grammarAccess.getArraySubscriptListAccess().getSubscriptsSubscriptParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscriptList__SubscriptsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptListAccess().getSubscriptsSubscriptParserRuleCall_2_1_0()); }
	ruleSubscript{ after(grammarAccess.getArraySubscriptListAccess().getSubscriptsSubscriptParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionSubscript__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionSubscriptAccess().getExpressionExpressionParserRuleCall_0()); }
	ruleExpression{ after(grammarAccess.getExpressionSubscriptAccess().getExpressionExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__ExpressionListsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsExpressionListParserRuleCall_1_0()); }
	ruleExpressionList{ after(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsExpressionListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__ExpressionListsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsExpressionListParserRuleCall_2_1_0()); }
	ruleExpressionList{ after(grammarAccess.getArrayConcatenationOperatorAccess().getExpressionListsExpressionListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__ArgumentListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getArgumentListFunctionArgumentListParserRuleCall_1_0()); }
	ruleFunctionArgumentList{ after(grammarAccess.getArrayConstructionOperatorAccess().getArgumentListFunctionArgumentListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__NumeratorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getNumeratorUnitExpressionNumeratorParserRuleCall_0_0()); }
	ruleUnitExpressionNumerator{ after(grammarAccess.getUnitExpressionAccess().getNumeratorUnitExpressionNumeratorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__DenominatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getDenominatorUnitExpressionDenominatorParserRuleCall_1_1_0()); }
	ruleUnitExpressionDenominator{ after(grammarAccess.getUnitExpressionAccess().getDenominatorUnitExpressionDenominatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__OneAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getOneINTEGERTerminalRuleCall_0_0()); }
	RULE_INTEGER{ after(grammarAccess.getUnitExpressionNumeratorAccess().getOneINTEGERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__FactorsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_0_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__FactorsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_1_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__FactorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_0_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__FactorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__FactorsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_2_1_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__OperandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getOperandIDENTTerminalRuleCall_0_0()); }
	RULE_IDENT{ after(grammarAccess.getUnitExpressionFactorAccess().getOperandIDENTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__ExponentAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getExponentUnitExpressionExponentParserRuleCall_1_1_0()); }
	ruleUnitExpressionExponent{ after(grammarAccess.getUnitExpressionFactorAccess().getExponentUnitExpressionExponentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__NegativeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }
)

{ after(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getValueINTEGERTerminalRuleCall_1_0()); }
	RULE_INTEGER{ after(grammarAccess.getUnitExpressionExponentAccess().getValueINTEGERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_IDENT : ('_'|'a'..'z'|'A'..'Z') ('0'..'9'|'_'|'a'..'z'|'A'..'Z')*;

RULE_STRING : '"' (~(('\\'|'"'))|'\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v'))* '"';

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?;

RULE_INTEGER : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


