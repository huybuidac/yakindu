/*
* generated by Xtext
*/
package org.eclipselabs.mscript.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipselabs.mscript.language.services.MscriptGrammarAccess;

public class MscriptParser extends AbstractContentAssistParser {
	
	@Inject
	private MscriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipselabs.mscript.language.ui.contentassist.antlr.internal.InternalMscriptParser createParser() {
		org.eclipselabs.mscript.language.ui.contentassist.antlr.internal.InternalMscriptParser result = new org.eclipselabs.mscript.language.ui.contentassist.antlr.internal.InternalMscriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNamespaceMemberAccess().getAlternatives(), "rule__NamespaceMember__Alternatives");
					put(grammarAccess.getTypeDefinitionAccess().getAlternatives(), "rule__TypeDefinition__Alternatives");
					put(grammarAccess.getDataTypeDefinitionAccess().getAlternatives(), "rule__DataTypeDefinition__Alternatives");
					put(grammarAccess.getFunctionDefinitionAccess().getAlternatives_10(), "rule__FunctionDefinition__Alternatives_10");
					put(grammarAccess.getTypeSpecifierAccess().getAlternatives(), "rule__TypeSpecifier__Alternatives");
					put(grammarAccess.getDataTypeSpecifierAccess().getAlternatives(), "rule__DataTypeSpecifier__Alternatives");
					put(grammarAccess.getPrimitiveTypeSpecifierAccess().getAlternatives(), "rule__PrimitiveTypeSpecifier__Alternatives");
					put(grammarAccess.getNumericTypeSpecifierAccess().getAlternatives(), "rule__NumericTypeSpecifier__Alternatives");
					put(grammarAccess.getArrayDimensionSpecificationAccess().getAlternatives(), "rule__ArrayDimensionSpecification__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_1(), "rule__RelationalExpression__Alternatives_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
					put(grammarAccess.getFeatureCallAccess().getAlternatives(), "rule__FeatureCall__Alternatives");
					put(grammarAccess.getFeatureCallPartAccess().getAlternatives(), "rule__FeatureCallPart__Alternatives");
					put(grammarAccess.getFeatureReferenceAccess().getFeatureNameAlternatives_1_0(), "rule__FeatureReference__FeatureNameAlternatives_1_0");
					put(grammarAccess.getCallablePrimaryExpressionAccess().getAlternatives(), "rule__CallablePrimaryExpression__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getNumericLiteralAccess().getAlternatives(), "rule__NumericLiteral__Alternatives");
					put(grammarAccess.getSubscriptAccess().getAlternatives(), "rule__Subscript__Alternatives");
					put(grammarAccess.getUnitExpressionAccess().getAlternatives(), "rule__UnitExpression__Alternatives");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getAlternatives(), "rule__UnitExpressionNumerator__Alternatives");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getAlternatives(), "rule__UnitExpressionDenominator__Alternatives");
					put(grammarAccess.getKeywordIDAccess().getAlternatives(), "rule__KeywordID__Alternatives");
					put(grammarAccess.getAssertionStatusKindAccess().getAlternatives(), "rule__AssertionStatusKind__Alternatives");
					put(grammarAccess.getEqualityOperatorAccess().getAlternatives(), "rule__EqualityOperator__Alternatives");
					put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
					put(grammarAccess.getAdditiveOperatorAccess().getAlternatives(), "rule__AdditiveOperator__Alternatives");
					put(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives(), "rule__MultiplicativeOperator__Alternatives");
					put(grammarAccess.getPowerOperatorAccess().getAlternatives(), "rule__PowerOperator__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getBooleanKindAccess().getAlternatives(), "rule__BooleanKind__Alternatives");
					put(grammarAccess.getNamespaceDefinitionAccess().getGroup(), "rule__NamespaceDefinition__Group__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup(), "rule__EnumerationDefinition__Group__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup_3(), "rule__EnumerationDefinition__Group_3__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup_3_1(), "rule__EnumerationDefinition__Group_3_1__0");
					put(grammarAccess.getTypeAliasDefinitionAccess().getGroup(), "rule__TypeAliasDefinition__Group__0");
					put(grammarAccess.getRecordDefinitionAccess().getGroup(), "rule__RecordDefinition__Group__0");
					put(grammarAccess.getRecordFieldDeclarationAccess().getGroup(), "rule__RecordFieldDeclaration__Group__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup(), "rule__FunctionDefinition__Group__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_2(), "rule__FunctionDefinition__Group_2__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_2_2(), "rule__FunctionDefinition__Group_2_2__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_4(), "rule__FunctionDefinition__Group_4__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_4_1(), "rule__FunctionDefinition__Group_4_1__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_8(), "rule__FunctionDefinition__Group_8__0");
					put(grammarAccess.getAssertionDeclarationAccess().getGroup(), "rule__AssertionDeclaration__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getFunctorDeclarationAccess().getGroup(), "rule__FunctorDeclaration__Group__0");
					put(grammarAccess.getFunctorDeclarationAccess().getGroup_4(), "rule__FunctorDeclaration__Group_4__0");
					put(grammarAccess.getFunctorDeclarationAccess().getGroup_4_2(), "rule__FunctorDeclaration__Group_4_2__0");
					put(grammarAccess.getEquationAccess().getGroup(), "rule__Equation__Group__0");
					put(grammarAccess.getRealTypeSpecifierAccess().getGroup(), "rule__RealTypeSpecifier__Group__0");
					put(grammarAccess.getRealTypeSpecifierAccess().getGroup_2(), "rule__RealTypeSpecifier__Group_2__0");
					put(grammarAccess.getRealTypeSpecifierAccess().getGroup_3(), "rule__RealTypeSpecifier__Group_3__0");
					put(grammarAccess.getRealTypeSpecifierAccess().getGroup_3_2(), "rule__RealTypeSpecifier__Group_3_2__0");
					put(grammarAccess.getIntegerTypeSpecifierAccess().getGroup(), "rule__IntegerTypeSpecifier__Group__0");
					put(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_2(), "rule__IntegerTypeSpecifier__Group_2__0");
					put(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_3(), "rule__IntegerTypeSpecifier__Group_3__0");
					put(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_3_2(), "rule__IntegerTypeSpecifier__Group_3_2__0");
					put(grammarAccess.getComplexTypeSpecifierAccess().getGroup(), "rule__ComplexTypeSpecifier__Group__0");
					put(grammarAccess.getComplexTypeSpecifierAccess().getGroup_2(), "rule__ComplexTypeSpecifier__Group_2__0");
					put(grammarAccess.getComplexTypeSpecifierAccess().getGroup_3(), "rule__ComplexTypeSpecifier__Group_3__0");
					put(grammarAccess.getComplexTypeSpecifierAccess().getGroup_3_2(), "rule__ComplexTypeSpecifier__Group_3_2__0");
					put(grammarAccess.getGaussianTypeSpecifierAccess().getGroup(), "rule__GaussianTypeSpecifier__Group__0");
					put(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_2(), "rule__GaussianTypeSpecifier__Group_2__0");
					put(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_3(), "rule__GaussianTypeSpecifier__Group_3__0");
					put(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_3_2(), "rule__GaussianTypeSpecifier__Group_3_2__0");
					put(grammarAccess.getBooleanTypeSpecifierAccess().getGroup(), "rule__BooleanTypeSpecifier__Group__0");
					put(grammarAccess.getBooleanTypeSpecifierAccess().getGroup_2(), "rule__BooleanTypeSpecifier__Group_2__0");
					put(grammarAccess.getBooleanTypeSpecifierAccess().getGroup_2_2(), "rule__BooleanTypeSpecifier__Group_2_2__0");
					put(grammarAccess.getStringTypeSpecifierAccess().getGroup(), "rule__StringTypeSpecifier__Group__0");
					put(grammarAccess.getStringTypeSpecifierAccess().getGroup_2(), "rule__StringTypeSpecifier__Group_2__0");
					put(grammarAccess.getStringTypeSpecifierAccess().getGroup_2_2(), "rule__StringTypeSpecifier__Group_2_2__0");
					put(grammarAccess.getNamedTypeSpecifierAccess().getGroup(), "rule__NamedTypeSpecifier__Group__0");
					put(grammarAccess.getNamedTypeSpecifierAccess().getGroup_1(), "rule__NamedTypeSpecifier__Group_1__0");
					put(grammarAccess.getNamedTypeSpecifierAccess().getGroup_1_2(), "rule__NamedTypeSpecifier__Group_1_2__0");
					put(grammarAccess.getUnitTypeSpecifierAccess().getGroup(), "rule__UnitTypeSpecifier__Group__0");
					put(grammarAccess.getIfExpressionAccess().getGroup(), "rule__IfExpression__Group__0");
					put(grammarAccess.getSwitchExpressionAccess().getGroup(), "rule__SwitchExpression__Group__0");
					put(grammarAccess.getSwitchCaseAccess().getGroup(), "rule__SwitchCase__Group__0");
					put(grammarAccess.getRangeExpressionAccess().getGroup(), "rule__RangeExpression__Group__0");
					put(grammarAccess.getRangeExpressionAccess().getGroup_1(), "rule__RangeExpression__Group_1__0");
					put(grammarAccess.getRangeExpressionAccess().getGroup_1_3(), "rule__RangeExpression__Group_1_3__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup(), "rule__ImpliesExpression__Group__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup_1(), "rule__ImpliesExpression__Group_1__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup(), "rule__LogicalOrExpression__Group__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup_1(), "rule__LogicalOrExpression__Group_1__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1(), "rule__LogicalOrExpression__Group_1_1__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup(), "rule__LogicalAndExpression__Group__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup_1(), "rule__LogicalAndExpression__Group_1__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1(), "rule__LogicalAndExpression__Group_1_1__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_0(), "rule__RelationalExpression__Group_1_1_0__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1(), "rule__RelationalExpression__Group_1_1_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionPartAccess().getGroup(), "rule__AdditiveExpressionPart__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionPartAccess().getGroup(), "rule__MultiplicativeExpressionPart__Group__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup(), "rule__PowerExpression__Group__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup_1(), "rule__PowerExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_1(), "rule__UnaryExpression__Group_1__0");
					put(grammarAccess.getPostfixExpressionAccess().getGroup(), "rule__PostfixExpression__Group__0");
					put(grammarAccess.getPostfixExpressionAccess().getGroup_1(), "rule__PostfixExpression__Group_1__0");
					put(grammarAccess.getFeatureCallAccess().getGroup_1(), "rule__FeatureCall__Group_1__0");
					put(grammarAccess.getFeatureCallAccess().getGroup_1_1(), "rule__FeatureCall__Group_1_1__0");
					put(grammarAccess.getFeatureReferenceAccess().getGroup(), "rule__FeatureReference__Group__0");
					put(grammarAccess.getArrayElementReferenceAccess().getGroup(), "rule__ArrayElementReference__Group__0");
					put(grammarAccess.getArrayElementReferenceAccess().getGroup_2(), "rule__ArrayElementReference__Group_2__0");
					put(grammarAccess.getOperationCallAccess().getGroup(), "rule__OperationCall__Group__0");
					put(grammarAccess.getOperationCallAccess().getGroup_2(), "rule__OperationCall__Group_2__0");
					put(grammarAccess.getOperationCallAccess().getGroup_2_1(), "rule__OperationCall__Group_2_1__0");
					put(grammarAccess.getIteratorCallAccess().getGroup(), "rule__IteratorCall__Group__0");
					put(grammarAccess.getIteratorCallAccess().getGroup_3(), "rule__IteratorCall__Group_3__0");
					put(grammarAccess.getRealLiteralAccess().getGroup(), "rule__RealLiteral__Group__0");
					put(grammarAccess.getRealLiteralAccess().getGroup_2(), "rule__RealLiteral__Group_2__0");
					put(grammarAccess.getIntegerLiteralAccess().getGroup(), "rule__IntegerLiteral__Group__0");
					put(grammarAccess.getIntegerLiteralAccess().getGroup_2(), "rule__IntegerLiteral__Group_2__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getMatrixConstructionOperatorAccess().getGroup(), "rule__MatrixConstructionOperator__Group__0");
					put(grammarAccess.getMatrixConstructionOperatorAccess().getGroup_2(), "rule__MatrixConstructionOperator__Group_2__0");
					put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
					put(grammarAccess.getUnitConstructionOperatorAccess().getGroup(), "rule__UnitConstructionOperator__Group__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup_2(), "rule__ParenthesizedExpression__Group_2__0");
					put(grammarAccess.getBeginExpressionAccess().getGroup(), "rule__BeginExpression__Group__0");
					put(grammarAccess.getEndExpressionAccess().getGroup(), "rule__EndExpression__Group__0");
					put(grammarAccess.getUnitExpressionAccess().getGroup_1(), "rule__UnitExpression__Group_1__0");
					put(grammarAccess.getUnitExpressionAccess().getGroup_2(), "rule__UnitExpression__Group_2__0");
					put(grammarAccess.getUnitExpressionAccess().getGroup_2_1(), "rule__UnitExpression__Group_2_1__0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1(), "rule__UnitExpressionNumerator__Group_1__0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1_1(), "rule__UnitExpressionNumerator__Group_1_1__0");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1(), "rule__UnitExpressionDenominator__Group_1__0");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1_2(), "rule__UnitExpressionDenominator__Group_1_2__0");
					put(grammarAccess.getUnitExpressionFactorAccess().getGroup(), "rule__UnitExpressionFactor__Group__0");
					put(grammarAccess.getUnitExpressionFactorAccess().getGroup_1(), "rule__UnitExpressionFactor__Group_1__0");
					put(grammarAccess.getUnitExpressionExponentAccess().getGroup(), "rule__UnitExpressionExponent__Group__0");
					put(grammarAccess.getMscriptAccess().getNamespacesAssignment(), "rule__Mscript__NamespacesAssignment");
					put(grammarAccess.getNamespaceDefinitionAccess().getNameAssignment_1(), "rule__NamespaceDefinition__NameAssignment_1");
					put(grammarAccess.getNamespaceDefinitionAccess().getElementsAssignment_3(), "rule__NamespaceDefinition__ElementsAssignment_3");
					put(grammarAccess.getEnumerationDefinitionAccess().getNameAssignment_1(), "rule__EnumerationDefinition__NameAssignment_1");
					put(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_0(), "rule__EnumerationDefinition__LiteralsAssignment_3_0");
					put(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_1_1(), "rule__EnumerationDefinition__LiteralsAssignment_3_1_1");
					put(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameAssignment(), "rule__EnumerationLiteralDeclaration__NameAssignment");
					put(grammarAccess.getTypeAliasDefinitionAccess().getNameAssignment_1(), "rule__TypeAliasDefinition__NameAssignment_1");
					put(grammarAccess.getTypeAliasDefinitionAccess().getTypeAssignment_3(), "rule__TypeAliasDefinition__TypeAssignment_3");
					put(grammarAccess.getRecordDefinitionAccess().getNameAssignment_1(), "rule__RecordDefinition__NameAssignment_1");
					put(grammarAccess.getRecordDefinitionAccess().getFieldsAssignment_3(), "rule__RecordDefinition__FieldsAssignment_3");
					put(grammarAccess.getRecordFieldDeclarationAccess().getNameAssignment_0(), "rule__RecordFieldDeclaration__NameAssignment_0");
					put(grammarAccess.getRecordFieldDeclarationAccess().getTypeAssignment_2(), "rule__RecordFieldDeclaration__TypeAssignment_2");
					put(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1(), "rule__FunctionDefinition__NameAssignment_1");
					put(grammarAccess.getFunctionDefinitionAccess().getTemplateParametersAssignment_2_1(), "rule__FunctionDefinition__TemplateParametersAssignment_2_1");
					put(grammarAccess.getFunctionDefinitionAccess().getTemplateParametersAssignment_2_2_1(), "rule__FunctionDefinition__TemplateParametersAssignment_2_2_1");
					put(grammarAccess.getFunctionDefinitionAccess().getInputParametersAssignment_4_0(), "rule__FunctionDefinition__InputParametersAssignment_4_0");
					put(grammarAccess.getFunctionDefinitionAccess().getInputParametersAssignment_4_1_1(), "rule__FunctionDefinition__InputParametersAssignment_4_1_1");
					put(grammarAccess.getFunctionDefinitionAccess().getOutputParametersAssignment_7(), "rule__FunctionDefinition__OutputParametersAssignment_7");
					put(grammarAccess.getFunctionDefinitionAccess().getOutputParametersAssignment_8_1(), "rule__FunctionDefinition__OutputParametersAssignment_8_1");
					put(grammarAccess.getFunctionDefinitionAccess().getAssertionsAssignment_10_0(), "rule__FunctionDefinition__AssertionsAssignment_10_0");
					put(grammarAccess.getFunctionDefinitionAccess().getFunctorsAssignment_10_1(), "rule__FunctionDefinition__FunctorsAssignment_10_1");
					put(grammarAccess.getFunctionDefinitionAccess().getVariablesAssignment_10_2(), "rule__FunctionDefinition__VariablesAssignment_10_2");
					put(grammarAccess.getFunctionDefinitionAccess().getEquationsAssignment_10_3(), "rule__FunctionDefinition__EquationsAssignment_10_3");
					put(grammarAccess.getParameterDeclarationAccess().getNameAssignment(), "rule__ParameterDeclaration__NameAssignment");
					put(grammarAccess.getAssertionDeclarationAccess().getPredicateAssignment_1(), "rule__AssertionDeclaration__PredicateAssignment_1");
					put(grammarAccess.getAssertionDeclarationAccess().getStatusKindAssignment_3(), "rule__AssertionDeclaration__StatusKindAssignment_3");
					put(grammarAccess.getAssertionDeclarationAccess().getMessageAssignment_4(), "rule__AssertionDeclaration__MessageAssignment_4");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
					put(grammarAccess.getFunctorDeclarationAccess().getNameAssignment_1(), "rule__FunctorDeclaration__NameAssignment_1");
					put(grammarAccess.getFunctorDeclarationAccess().getFunctionNameAssignment_3(), "rule__FunctorDeclaration__FunctionNameAssignment_3");
					put(grammarAccess.getFunctorDeclarationAccess().getTemplateArgumentsAssignment_4_1(), "rule__FunctorDeclaration__TemplateArgumentsAssignment_4_1");
					put(grammarAccess.getFunctorDeclarationAccess().getTemplateArgumentsAssignment_4_2_1(), "rule__FunctorDeclaration__TemplateArgumentsAssignment_4_2_1");
					put(grammarAccess.getArgumentDeclarationAccess().getNameAssignment(), "rule__ArgumentDeclaration__NameAssignment");
					put(grammarAccess.getEquationAccess().getLeftHandSideAssignment_0(), "rule__Equation__LeftHandSideAssignment_0");
					put(grammarAccess.getEquationAccess().getRightHandSideAssignment_2(), "rule__Equation__RightHandSideAssignment_2");
					put(grammarAccess.getRealTypeSpecifierAccess().getUnitAssignment_2_1(), "rule__RealTypeSpecifier__UnitAssignment_2_1");
					put(grammarAccess.getRealTypeSpecifierAccess().getDimensionsAssignment_3_1(), "rule__RealTypeSpecifier__DimensionsAssignment_3_1");
					put(grammarAccess.getRealTypeSpecifierAccess().getDimensionsAssignment_3_2_1(), "rule__RealTypeSpecifier__DimensionsAssignment_3_2_1");
					put(grammarAccess.getIntegerTypeSpecifierAccess().getUnitAssignment_2_1(), "rule__IntegerTypeSpecifier__UnitAssignment_2_1");
					put(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsAssignment_3_1(), "rule__IntegerTypeSpecifier__DimensionsAssignment_3_1");
					put(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsAssignment_3_2_1(), "rule__IntegerTypeSpecifier__DimensionsAssignment_3_2_1");
					put(grammarAccess.getComplexTypeSpecifierAccess().getUnitAssignment_2_1(), "rule__ComplexTypeSpecifier__UnitAssignment_2_1");
					put(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsAssignment_3_1(), "rule__ComplexTypeSpecifier__DimensionsAssignment_3_1");
					put(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsAssignment_3_2_1(), "rule__ComplexTypeSpecifier__DimensionsAssignment_3_2_1");
					put(grammarAccess.getGaussianTypeSpecifierAccess().getUnitAssignment_2_1(), "rule__GaussianTypeSpecifier__UnitAssignment_2_1");
					put(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsAssignment_3_1(), "rule__GaussianTypeSpecifier__DimensionsAssignment_3_1");
					put(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsAssignment_3_2_1(), "rule__GaussianTypeSpecifier__DimensionsAssignment_3_2_1");
					put(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsAssignment_2_1(), "rule__BooleanTypeSpecifier__DimensionsAssignment_2_1");
					put(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsAssignment_2_2_1(), "rule__BooleanTypeSpecifier__DimensionsAssignment_2_2_1");
					put(grammarAccess.getStringTypeSpecifierAccess().getDimensionsAssignment_2_1(), "rule__StringTypeSpecifier__DimensionsAssignment_2_1");
					put(grammarAccess.getStringTypeSpecifierAccess().getDimensionsAssignment_2_2_1(), "rule__StringTypeSpecifier__DimensionsAssignment_2_2_1");
					put(grammarAccess.getNamedTypeSpecifierAccess().getTypeReferenceAssignment_0(), "rule__NamedTypeSpecifier__TypeReferenceAssignment_0");
					put(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsAssignment_1_1(), "rule__NamedTypeSpecifier__DimensionsAssignment_1_1");
					put(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsAssignment_1_2_1(), "rule__NamedTypeSpecifier__DimensionsAssignment_1_2_1");
					put(grammarAccess.getArrayDimensionSpecificationAccess().getUnspecifiedAssignment_0(), "rule__ArrayDimensionSpecification__UnspecifiedAssignment_0");
					put(grammarAccess.getArrayDimensionSpecificationAccess().getSizeAssignment_1(), "rule__ArrayDimensionSpecification__SizeAssignment_1");
					put(grammarAccess.getIfExpressionAccess().getConditionAssignment_1(), "rule__IfExpression__ConditionAssignment_1");
					put(grammarAccess.getIfExpressionAccess().getThenExpressionAssignment_3(), "rule__IfExpression__ThenExpressionAssignment_3");
					put(grammarAccess.getIfExpressionAccess().getElseExpressionAssignment_5(), "rule__IfExpression__ElseExpressionAssignment_5");
					put(grammarAccess.getSwitchExpressionAccess().getControlExpressionAssignment_1(), "rule__SwitchExpression__ControlExpressionAssignment_1");
					put(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_2(), "rule__SwitchExpression__CasesAssignment_2");
					put(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionAssignment_5(), "rule__SwitchExpression__DefaultExpressionAssignment_5");
					put(grammarAccess.getSwitchCaseAccess().getValueAssignment_1(), "rule__SwitchCase__ValueAssignment_1");
					put(grammarAccess.getSwitchCaseAccess().getExpressionAssignment_3(), "rule__SwitchCase__ExpressionAssignment_3");
					put(grammarAccess.getRangeExpressionAccess().getEndAssignment_1_2(), "rule__RangeExpression__EndAssignment_1_2");
					put(grammarAccess.getRangeExpressionAccess().getEndAssignment_1_3_2(), "rule__RangeExpression__EndAssignment_1_3_2");
					put(grammarAccess.getImpliesExpressionAccess().getRightOperandAssignment_1_2(), "rule__ImpliesExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getLogicalOrExpressionAccess().getOperandsAssignment_1_1_1(), "rule__LogicalOrExpression__OperandsAssignment_1_1_1");
					put(grammarAccess.getLogicalAndExpressionAccess().getOperandsAssignment_1_1_1(), "rule__LogicalAndExpression__OperandsAssignment_1_1_1");
					put(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_1(), "rule__EqualityExpression__OperatorAssignment_1_1");
					put(grammarAccess.getEqualityExpressionAccess().getRightOperandAssignment_1_2(), "rule__EqualityExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getRelationalExpressionAccess().getTypeTestAssignment_1_1_0_0(), "rule__RelationalExpression__TypeTestAssignment_1_1_0_0");
					put(grammarAccess.getRelationalExpressionAccess().getTypeAssignment_1_1_0_1(), "rule__RelationalExpression__TypeAssignment_1_1_0_1");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1_1_0(), "rule__RelationalExpression__OperatorAssignment_1_1_1_0");
					put(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_1_1_1(), "rule__RelationalExpression__RightOperandAssignment_1_1_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getRightPartsAssignment_1_1(), "rule__AdditiveExpression__RightPartsAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionPartAccess().getOperatorAssignment_0(), "rule__AdditiveExpressionPart__OperatorAssignment_0");
					put(grammarAccess.getAdditiveExpressionPartAccess().getOperandAssignment_1(), "rule__AdditiveExpressionPart__OperandAssignment_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRightPartsAssignment_1_1(), "rule__MultiplicativeExpression__RightPartsAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionPartAccess().getOperatorAssignment_0(), "rule__MultiplicativeExpressionPart__OperatorAssignment_0");
					put(grammarAccess.getMultiplicativeExpressionPartAccess().getOperandAssignment_1(), "rule__MultiplicativeExpressionPart__OperandAssignment_1");
					put(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1(), "rule__PowerExpression__OperatorAssignment_1_1");
					put(grammarAccess.getPowerExpressionAccess().getExponentAssignment_1_2(), "rule__PowerExpression__ExponentAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_1_1(), "rule__UnaryExpression__OperatorAssignment_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2(), "rule__UnaryExpression__OperandAssignment_1_2");
					put(grammarAccess.getPostfixExpressionAccess().getOperatorAssignment_1_1(), "rule__PostfixExpression__OperatorAssignment_1_1");
					put(grammarAccess.getFeatureCallAccess().getPartsAssignment_1_1_1(), "rule__FeatureCall__PartsAssignment_1_1_1");
					put(grammarAccess.getFeatureReferenceAccess().getFeatureNameAssignment_1(), "rule__FeatureReference__FeatureNameAssignment_1");
					put(grammarAccess.getArrayElementReferenceAccess().getSubscriptsAssignment_1(), "rule__ArrayElementReference__SubscriptsAssignment_1");
					put(grammarAccess.getArrayElementReferenceAccess().getSubscriptsAssignment_2_1(), "rule__ArrayElementReference__SubscriptsAssignment_2_1");
					put(grammarAccess.getOperationCallAccess().getArgumentsAssignment_2_0(), "rule__OperationCall__ArgumentsAssignment_2_0");
					put(grammarAccess.getOperationCallAccess().getArgumentsAssignment_2_1_1(), "rule__OperationCall__ArgumentsAssignment_2_1_1");
					put(grammarAccess.getIteratorCallAccess().getElementNameAssignment_2(), "rule__IteratorCall__ElementNameAssignment_2");
					put(grammarAccess.getIteratorCallAccess().getAccumulatorNameAssignment_3_1(), "rule__IteratorCall__AccumulatorNameAssignment_3_1");
					put(grammarAccess.getIteratorCallAccess().getInitialValueAssignment_3_3(), "rule__IteratorCall__InitialValueAssignment_3_3");
					put(grammarAccess.getIteratorCallAccess().getExpressionAssignment_5(), "rule__IteratorCall__ExpressionAssignment_5");
					put(grammarAccess.getRealLiteralAccess().getValueAssignment_0(), "rule__RealLiteral__ValueAssignment_0");
					put(grammarAccess.getRealLiteralAccess().getImaginaryAssignment_1(), "rule__RealLiteral__ImaginaryAssignment_1");
					put(grammarAccess.getRealLiteralAccess().getUnitAssignment_2_1(), "rule__RealLiteral__UnitAssignment_2_1");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment_0(), "rule__IntegerLiteral__ValueAssignment_0");
					put(grammarAccess.getIntegerLiteralAccess().getImaginaryAssignment_1(), "rule__IntegerLiteral__ImaginaryAssignment_1");
					put(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_2_1(), "rule__IntegerLiteral__UnitAssignment_2_1");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getSimpleNameAccess().getIdentifierAssignment(), "rule__SimpleName__IdentifierAssignment");
					put(grammarAccess.getQualifiedNameAccess().getIdentifiersAssignment_0(), "rule__QualifiedName__IdentifiersAssignment_0");
					put(grammarAccess.getQualifiedNameAccess().getIdentifiersAssignment_1_1(), "rule__QualifiedName__IdentifiersAssignment_1_1");
					put(grammarAccess.getSubscriptAccess().getSliceAssignment_0(), "rule__Subscript__SliceAssignment_0");
					put(grammarAccess.getSubscriptAccess().getExpressionAssignment_1(), "rule__Subscript__ExpressionAssignment_1");
					put(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsAssignment_1(), "rule__MatrixConstructionOperator__ExpressionListsAssignment_1");
					put(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsAssignment_2_1(), "rule__MatrixConstructionOperator__ExpressionListsAssignment_2_1");
					put(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0(), "rule__ExpressionList__ExpressionsAssignment_0");
					put(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1(), "rule__ExpressionList__ExpressionsAssignment_1_1");
					put(grammarAccess.getUnitConstructionOperatorAccess().getUnitAssignment_2(), "rule__UnitConstructionOperator__UnitAssignment_2");
					put(grammarAccess.getParenthesizedExpressionAccess().getExpressionsAssignment_1(), "rule__ParenthesizedExpression__ExpressionsAssignment_1");
					put(grammarAccess.getParenthesizedExpressionAccess().getExpressionsAssignment_2_1(), "rule__ParenthesizedExpression__ExpressionsAssignment_2_1");
					put(grammarAccess.getUnitExpressionAccess().getUnspecifiedAssignment_0(), "rule__UnitExpression__UnspecifiedAssignment_0");
					put(grammarAccess.getUnitExpressionAccess().getExpressionAssignment_1_1(), "rule__UnitExpression__ExpressionAssignment_1_1");
					put(grammarAccess.getUnitExpressionAccess().getNumeratorAssignment_2_0(), "rule__UnitExpression__NumeratorAssignment_2_0");
					put(grammarAccess.getUnitExpressionAccess().getDenominatorAssignment_2_1_1(), "rule__UnitExpression__DenominatorAssignment_2_1_1");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getOneAssignment_0(), "rule__UnitExpressionNumerator__OneAssignment_0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_0(), "rule__UnitExpressionNumerator__FactorsAssignment_1_0");
					put(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_1_1(), "rule__UnitExpressionNumerator__FactorsAssignment_1_1_1");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_0(), "rule__UnitExpressionDenominator__FactorsAssignment_0");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_1(), "rule__UnitExpressionDenominator__FactorsAssignment_1_1");
					put(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_2_1(), "rule__UnitExpressionDenominator__FactorsAssignment_1_2_1");
					put(grammarAccess.getUnitExpressionFactorAccess().getOperandAssignment_0(), "rule__UnitExpressionFactor__OperandAssignment_0");
					put(grammarAccess.getUnitExpressionFactorAccess().getExponentAssignment_1_1(), "rule__UnitExpressionFactor__ExponentAssignment_1_1");
					put(grammarAccess.getUnitExpressionExponentAccess().getNegativeAssignment_0(), "rule__UnitExpressionExponent__NegativeAssignment_0");
					put(grammarAccess.getUnitExpressionExponentAccess().getValueAssignment_1(), "rule__UnitExpressionExponent__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipselabs.mscript.language.ui.contentassist.antlr.internal.InternalMscriptParser typedParser = (org.eclipselabs.mscript.language.ui.contentassist.antlr.internal.InternalMscriptParser) parser;
			typedParser.entryRuleMscript();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MscriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MscriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
