/*
* generated by Xtext
*/
grammar InternalMscript;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipselabs.mscript.language.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.mscript.language.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.mscript.language.services.MscriptGrammarAccess;

}

@parser::members {
 
 	private MscriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MscriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMscript
entryRuleMscript 
:
{ before(grammarAccess.getMscriptRule()); }
	 ruleMscript
{ after(grammarAccess.getMscriptRule()); } 
	 EOF 
;

// Rule Mscript
ruleMscript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMscriptAccess().getPackagesAssignment()); }
(rule__Mscript__PackagesAssignment)*
{ after(grammarAccess.getMscriptAccess().getPackagesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDefinition
entryRulePackageDefinition 
:
{ before(grammarAccess.getPackageDefinitionRule()); }
	 rulePackageDefinition
{ after(grammarAccess.getPackageDefinitionRule()); } 
	 EOF 
;

// Rule PackageDefinition
rulePackageDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDefinitionAccess().getGroup()); }
(rule__PackageDefinition__Group__0)
{ after(grammarAccess.getPackageDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDefinitionElement
entryRulePackageDefinitionElement 
:
{ before(grammarAccess.getPackageDefinitionElementRule()); }
	 rulePackageDefinitionElement
{ after(grammarAccess.getPackageDefinitionElementRule()); } 
	 EOF 
;

// Rule PackageDefinitionElement
rulePackageDefinitionElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDefinitionElementAccess().getAlternatives()); }
(rule__PackageDefinitionElement__Alternatives)
{ after(grammarAccess.getPackageDefinitionElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition 
:
{ before(grammarAccess.getTypeDefinitionRule()); }
	 ruleTypeDefinition
{ after(grammarAccess.getTypeDefinitionRule()); } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
(rule__TypeDefinition__Alternatives)
{ after(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataTypeDefinition
entryRuleDataTypeDefinition 
:
{ before(grammarAccess.getDataTypeDefinitionRule()); }
	 ruleDataTypeDefinition
{ after(grammarAccess.getDataTypeDefinitionRule()); } 
	 EOF 
;

// Rule DataTypeDefinition
ruleDataTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeDefinitionAccess().getAlternatives()); }
(rule__DataTypeDefinition__Alternatives)
{ after(grammarAccess.getDataTypeDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationDefinition
entryRuleEnumerationDefinition 
:
{ before(grammarAccess.getEnumerationDefinitionRule()); }
	 ruleEnumerationDefinition
{ after(grammarAccess.getEnumerationDefinitionRule()); } 
	 EOF 
;

// Rule EnumerationDefinition
ruleEnumerationDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getGroup()); }
(rule__EnumerationDefinition__Group__0)
{ after(grammarAccess.getEnumerationDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteralDeclaration
entryRuleEnumerationLiteralDeclaration 
:
{ before(grammarAccess.getEnumerationLiteralDeclarationRule()); }
	 ruleEnumerationLiteralDeclaration
{ after(grammarAccess.getEnumerationLiteralDeclarationRule()); } 
	 EOF 
;

// Rule EnumerationLiteralDeclaration
ruleEnumerationLiteralDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameAssignment()); }
(rule__EnumerationLiteralDeclaration__NameAssignment)
{ after(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeAliasDefinition
entryRuleTypeAliasDefinition 
:
{ before(grammarAccess.getTypeAliasDefinitionRule()); }
	 ruleTypeAliasDefinition
{ after(grammarAccess.getTypeAliasDefinitionRule()); } 
	 EOF 
;

// Rule TypeAliasDefinition
ruleTypeAliasDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getGroup()); }
(rule__TypeAliasDefinition__Group__0)
{ after(grammarAccess.getTypeAliasDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordDefinition
entryRuleRecordDefinition 
:
{ before(grammarAccess.getRecordDefinitionRule()); }
	 ruleRecordDefinition
{ after(grammarAccess.getRecordDefinitionRule()); } 
	 EOF 
;

// Rule RecordDefinition
ruleRecordDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecordDefinitionAccess().getGroup()); }
(rule__RecordDefinition__Group__0)
{ after(grammarAccess.getRecordDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordFieldDeclaration
entryRuleRecordFieldDeclaration 
:
{ before(grammarAccess.getRecordFieldDeclarationRule()); }
	 ruleRecordFieldDeclaration
{ after(grammarAccess.getRecordFieldDeclarationRule()); } 
	 EOF 
;

// Rule RecordFieldDeclaration
ruleRecordFieldDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecordFieldDeclarationAccess().getGroup()); }
(rule__RecordFieldDeclaration__Group__0)
{ after(grammarAccess.getRecordFieldDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubroutineDefinition
entryRuleSubroutineDefinition 
:
{ before(grammarAccess.getSubroutineDefinitionRule()); }
	 ruleSubroutineDefinition
{ after(grammarAccess.getSubroutineDefinitionRule()); } 
	 EOF 
;

// Rule SubroutineDefinition
ruleSubroutineDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubroutineDefinitionAccess().getAlternatives()); }
(rule__SubroutineDefinition__Alternatives)
{ after(grammarAccess.getSubroutineDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition 
:
{ before(grammarAccess.getFunctionDefinitionRule()); }
	 ruleFunctionDefinition
{ after(grammarAccess.getFunctionDefinitionRule()); } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
(rule__FunctionDefinition__Group__0)
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheckDefinition
entryRuleCheckDefinition 
:
{ before(grammarAccess.getCheckDefinitionRule()); }
	 ruleCheckDefinition
{ after(grammarAccess.getCheckDefinitionRule()); } 
	 EOF 
;

// Rule CheckDefinition
ruleCheckDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckDefinitionAccess().getGroup()); }
(rule__CheckDefinition__Group__0)
{ after(grammarAccess.getCheckDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreconditionChain
entryRulePreconditionChain 
:
{ before(grammarAccess.getPreconditionChainRule()); }
	 rulePreconditionChain
{ after(grammarAccess.getPreconditionChainRule()); } 
	 EOF 
;

// Rule PreconditionChain
rulePreconditionChain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreconditionChainAccess().getGroup()); }
(rule__PreconditionChain__Group__0)
{ after(grammarAccess.getPreconditionChainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockStatement
entryRuleBlockStatement 
:
{ before(grammarAccess.getBlockStatementRule()); }
	 ruleBlockStatement
{ after(grammarAccess.getBlockStatementRule()); } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup()); }
(rule__BlockStatement__Group__0)
{ after(grammarAccess.getBlockStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement 
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup()); }
(rule__ExpressionStatement__Group__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfCase
entryRuleIfCase 
:
{ before(grammarAccess.getIfCaseRule()); }
	 ruleIfCase
{ after(grammarAccess.getIfCaseRule()); } 
	 EOF 
;

// Rule IfCase
ruleIfCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfCaseAccess().getGroup()); }
(rule__IfCase__Group__0)
{ after(grammarAccess.getIfCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoWhileStatement
entryRuleDoWhileStatement 
:
{ before(grammarAccess.getDoWhileStatementRule()); }
	 ruleDoWhileStatement
{ after(grammarAccess.getDoWhileStatementRule()); } 
	 EOF 
;

// Rule DoWhileStatement
ruleDoWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoWhileStatementAccess().getGroup()); }
(rule__DoWhileStatement__Group__0)
{ after(grammarAccess.getDoWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForeachStatement
entryRuleForeachStatement 
:
{ before(grammarAccess.getForeachStatementRule()); }
	 ruleForeachStatement
{ after(grammarAccess.getForeachStatementRule()); } 
	 EOF 
;

// Rule ForeachStatement
ruleForeachStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForeachStatementAccess().getGroup()); }
(rule__ForeachStatement__Group__0)
{ after(grammarAccess.getForeachStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheckStatusStatement
entryRuleCheckStatusStatement 
:
{ before(grammarAccess.getCheckStatusStatementRule()); }
	 ruleCheckStatusStatement
{ after(grammarAccess.getCheckStatusStatementRule()); } 
	 EOF 
;

// Rule CheckStatusStatement
ruleCheckStatusStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckStatusStatementAccess().getGroup()); }
(rule__CheckStatusStatement__Group__0)
{ after(grammarAccess.getCheckStatusStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier 
:
{ before(grammarAccess.getTypeSpecifierRule()); }
	 ruleTypeSpecifier
{ after(grammarAccess.getTypeSpecifierRule()); } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
(rule__TypeSpecifier__Alternatives)
{ after(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataTypeSpecifier
entryRuleDataTypeSpecifier 
:
{ before(grammarAccess.getDataTypeSpecifierRule()); }
	 ruleDataTypeSpecifier
{ after(grammarAccess.getDataTypeSpecifierRule()); } 
	 EOF 
;

// Rule DataTypeSpecifier
ruleDataTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeSpecifierAccess().getAlternatives()); }
(rule__DataTypeSpecifier__Alternatives)
{ after(grammarAccess.getDataTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveTypeSpecifier
entryRulePrimitiveTypeSpecifier 
:
{ before(grammarAccess.getPrimitiveTypeSpecifierRule()); }
	 rulePrimitiveTypeSpecifier
{ after(grammarAccess.getPrimitiveTypeSpecifierRule()); } 
	 EOF 
;

// Rule PrimitiveTypeSpecifier
rulePrimitiveTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeSpecifierAccess().getAlternatives()); }
(rule__PrimitiveTypeSpecifier__Alternatives)
{ after(grammarAccess.getPrimitiveTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalTypeSpecifier
entryRuleNumericalTypeSpecifier 
:
{ before(grammarAccess.getNumericalTypeSpecifierRule()); }
	 ruleNumericalTypeSpecifier
{ after(grammarAccess.getNumericalTypeSpecifierRule()); } 
	 EOF 
;

// Rule NumericalTypeSpecifier
ruleNumericalTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalTypeSpecifierAccess().getAlternatives()); }
(rule__NumericalTypeSpecifier__Alternatives)
{ after(grammarAccess.getNumericalTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealTypeSpecifier
entryRuleRealTypeSpecifier 
:
{ before(grammarAccess.getRealTypeSpecifierRule()); }
	 ruleRealTypeSpecifier
{ after(grammarAccess.getRealTypeSpecifierRule()); } 
	 EOF 
;

// Rule RealTypeSpecifier
ruleRealTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getGroup()); }
(rule__RealTypeSpecifier__Group__0)
{ after(grammarAccess.getRealTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerTypeSpecifier
entryRuleIntegerTypeSpecifier 
:
{ before(grammarAccess.getIntegerTypeSpecifierRule()); }
	 ruleIntegerTypeSpecifier
{ after(grammarAccess.getIntegerTypeSpecifierRule()); } 
	 EOF 
;

// Rule IntegerTypeSpecifier
ruleIntegerTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getGroup()); }
(rule__IntegerTypeSpecifier__Group__0)
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComplexTypeSpecifier
entryRuleComplexTypeSpecifier 
:
{ before(grammarAccess.getComplexTypeSpecifierRule()); }
	 ruleComplexTypeSpecifier
{ after(grammarAccess.getComplexTypeSpecifierRule()); } 
	 EOF 
;

// Rule ComplexTypeSpecifier
ruleComplexTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getGroup()); }
(rule__ComplexTypeSpecifier__Group__0)
{ after(grammarAccess.getComplexTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGaussianTypeSpecifier
entryRuleGaussianTypeSpecifier 
:
{ before(grammarAccess.getGaussianTypeSpecifierRule()); }
	 ruleGaussianTypeSpecifier
{ after(grammarAccess.getGaussianTypeSpecifierRule()); } 
	 EOF 
;

// Rule GaussianTypeSpecifier
ruleGaussianTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getGroup()); }
(rule__GaussianTypeSpecifier__Group__0)
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanTypeSpecifier
entryRuleBooleanTypeSpecifier 
:
{ before(grammarAccess.getBooleanTypeSpecifierRule()); }
	 ruleBooleanTypeSpecifier
{ after(grammarAccess.getBooleanTypeSpecifierRule()); } 
	 EOF 
;

// Rule BooleanTypeSpecifier
ruleBooleanTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getGroup()); }
(rule__BooleanTypeSpecifier__Group__0)
{ after(grammarAccess.getBooleanTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringTypeSpecifier
entryRuleStringTypeSpecifier 
:
{ before(grammarAccess.getStringTypeSpecifierRule()); }
	 ruleStringTypeSpecifier
{ after(grammarAccess.getStringTypeSpecifierRule()); } 
	 EOF 
;

// Rule StringTypeSpecifier
ruleStringTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getGroup()); }
(rule__StringTypeSpecifier__Group__0)
{ after(grammarAccess.getStringTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedTypeSpecifier
entryRuleNamedTypeSpecifier 
:
{ before(grammarAccess.getNamedTypeSpecifierRule()); }
	 ruleNamedTypeSpecifier
{ after(grammarAccess.getNamedTypeSpecifierRule()); } 
	 EOF 
;

// Rule NamedTypeSpecifier
ruleNamedTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getGroup()); }
(rule__NamedTypeSpecifier__Group__0)
{ after(grammarAccess.getNamedTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayDimensionSpecification
entryRuleArrayDimensionSpecification 
:
{ before(grammarAccess.getArrayDimensionSpecificationRule()); }
	 ruleArrayDimensionSpecification
{ after(grammarAccess.getArrayDimensionSpecificationRule()); } 
	 EOF 
;

// Rule ArrayDimensionSpecification
ruleArrayDimensionSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getAlternatives()); }
(rule__ArrayDimensionSpecification__Alternatives)
{ after(grammarAccess.getArrayDimensionSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitTypeSpecifier
entryRuleUnitTypeSpecifier 
:
{ before(grammarAccess.getUnitTypeSpecifierRule()); }
	 ruleUnitTypeSpecifier
{ after(grammarAccess.getUnitTypeSpecifierRule()); } 
	 EOF 
;

// Rule UnitTypeSpecifier
ruleUnitTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitTypeSpecifierAccess().getGroup()); }
(rule__UnitTypeSpecifier__Group__0)
{ after(grammarAccess.getUnitTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpressionCase
entryRuleConditionalExpressionCase 
:
{ before(grammarAccess.getConditionalExpressionCaseRule()); }
	 ruleConditionalExpressionCase
{ after(grammarAccess.getConditionalExpressionCaseRule()); } 
	 EOF 
;

// Rule ConditionalExpressionCase
ruleConditionalExpressionCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getGroup()); }
(rule__ConditionalExpressionCase__Group__0)
{ after(grammarAccess.getConditionalExpressionCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeExpression
entryRuleRangeExpression 
:
{ before(grammarAccess.getRangeExpressionRule()); }
	 ruleRangeExpression
{ after(grammarAccess.getRangeExpressionRule()); } 
	 EOF 
;

// Rule RangeExpression
ruleRangeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup()); }
(rule__RangeExpression__Group__0)
{ after(grammarAccess.getRangeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddSubtractExpression
entryRuleAddSubtractExpression 
:
{ before(grammarAccess.getAddSubtractExpressionRule()); }
	 ruleAddSubtractExpression
{ after(grammarAccess.getAddSubtractExpressionRule()); } 
	 EOF 
;

// Rule AddSubtractExpression
ruleAddSubtractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getGroup()); }
(rule__AddSubtractExpression__Group__0)
{ after(grammarAccess.getAddSubtractExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddSubtractExpressionPart
entryRuleAddSubtractExpressionPart 
:
{ before(grammarAccess.getAddSubtractExpressionPartRule()); }
	 ruleAddSubtractExpressionPart
{ after(grammarAccess.getAddSubtractExpressionPartRule()); } 
	 EOF 
;

// Rule AddSubtractExpressionPart
ruleAddSubtractExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddSubtractExpressionPartAccess().getGroup()); }
(rule__AddSubtractExpressionPart__Group__0)
{ after(grammarAccess.getAddSubtractExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplyDivideExpression
entryRuleMultiplyDivideExpression 
:
{ before(grammarAccess.getMultiplyDivideExpressionRule()); }
	 ruleMultiplyDivideExpression
{ after(grammarAccess.getMultiplyDivideExpressionRule()); } 
	 EOF 
;

// Rule MultiplyDivideExpression
ruleMultiplyDivideExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getGroup()); }
(rule__MultiplyDivideExpression__Group__0)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplyDivideExpressionPart
entryRuleMultiplyDivideExpressionPart 
:
{ before(grammarAccess.getMultiplyDivideExpressionPartRule()); }
	 ruleMultiplyDivideExpressionPart
{ after(grammarAccess.getMultiplyDivideExpressionPartRule()); } 
	 EOF 
;

// Rule MultiplyDivideExpressionPart
ruleMultiplyDivideExpressionPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplyDivideExpressionPartAccess().getGroup()); }
(rule__MultiplyDivideExpressionPart__Group__0)
{ after(grammarAccess.getMultiplyDivideExpressionPartAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePowerExpression
entryRulePowerExpression 
:
{ before(grammarAccess.getPowerExpressionRule()); }
	 rulePowerExpression
{ after(grammarAccess.getPowerExpressionRule()); } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowerExpressionAccess().getGroup()); }
(rule__PowerExpression__Group__0)
{ after(grammarAccess.getPowerExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureCall
entryRuleFeatureCall 
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureCallAccess().getAlternatives()); }
(rule__FeatureCall__Alternatives)
{ after(grammarAccess.getFeatureCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureCallPart
entryRuleFeatureCallPart 
:
{ before(grammarAccess.getFeatureCallPartRule()); }
	 ruleFeatureCallPart
{ after(grammarAccess.getFeatureCallPartRule()); } 
	 EOF 
;

// Rule FeatureCallPart
ruleFeatureCallPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureCallPartAccess().getAlternatives()); }
(rule__FeatureCallPart__Alternatives)
{ after(grammarAccess.getFeatureCallPartAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureReference
entryRuleFeatureReference 
:
{ before(grammarAccess.getFeatureReferenceRule()); }
	 ruleFeatureReference
{ after(grammarAccess.getFeatureReferenceRule()); } 
	 EOF 
;

// Rule FeatureReference
ruleFeatureReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureReferenceAccess().getGroup()); }
(rule__FeatureReference__Group__0)
{ after(grammarAccess.getFeatureReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayElementReference
entryRuleArrayElementReference 
:
{ before(grammarAccess.getArrayElementReferenceRule()); }
	 ruleArrayElementReference
{ after(grammarAccess.getArrayElementReferenceRule()); } 
	 EOF 
;

// Rule ArrayElementReference
ruleArrayElementReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getGroup()); }
(rule__ArrayElementReference__Group__0)
{ after(grammarAccess.getArrayElementReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperationCall
entryRuleOperationCall 
:
{ before(grammarAccess.getOperationCallRule()); }
	 ruleOperationCall
{ after(grammarAccess.getOperationCallRule()); } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationCallAccess().getGroup()); }
(rule__OperationCall__Group__0)
{ after(grammarAccess.getOperationCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCallablePrimaryExpression
entryRuleCallablePrimaryExpression 
:
{ before(grammarAccess.getCallablePrimaryExpressionRule()); }
	 ruleCallablePrimaryExpression
{ after(grammarAccess.getCallablePrimaryExpressionRule()); } 
	 EOF 
;

// Rule CallablePrimaryExpression
ruleCallablePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallablePrimaryExpressionAccess().getAlternatives()); }
(rule__CallablePrimaryExpression__Alternatives)
{ after(grammarAccess.getCallablePrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalLiteral
entryRuleNumericalLiteral 
:
{ before(grammarAccess.getNumericalLiteralRule()); }
	 ruleNumericalLiteral
{ after(grammarAccess.getNumericalLiteralRule()); } 
	 EOF 
;

// Rule NumericalLiteral
ruleNumericalLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalLiteralAccess().getAlternatives()); }
(rule__NumericalLiteral__Alternatives)
{ after(grammarAccess.getNumericalLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealLiteral
entryRuleRealLiteral 
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealLiteralAccess().getGroup()); }
(rule__RealLiteral__Group__0)
{ after(grammarAccess.getRealLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getGroup()); }
(rule__IntegerLiteral__Group__0)
{ after(grammarAccess.getIntegerLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSymbolReference
entryRuleSymbolReference 
:
{ before(grammarAccess.getSymbolReferenceRule()); }
	 ruleSymbolReference
{ after(grammarAccess.getSymbolReferenceRule()); } 
	 EOF 
;

// Rule SymbolReference
ruleSymbolReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSymbolReferenceAccess().getGroup()); }
(rule__SymbolReference__Group__0)
{ after(grammarAccess.getSymbolReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubscript
entryRuleSubscript 
:
{ before(grammarAccess.getSubscriptRule()); }
	 ruleSubscript
{ after(grammarAccess.getSubscriptRule()); } 
	 EOF 
;

// Rule Subscript
ruleSubscript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubscriptAccess().getAlternatives()); }
(rule__Subscript__Alternatives)
{ after(grammarAccess.getSubscriptAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMatrixConstructionOperator
entryRuleMatrixConstructionOperator 
:
{ before(grammarAccess.getMatrixConstructionOperatorRule()); }
	 ruleMatrixConstructionOperator
{ after(grammarAccess.getMatrixConstructionOperatorRule()); } 
	 EOF 
;

// Rule MatrixConstructionOperator
ruleMatrixConstructionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getGroup()); }
(rule__MatrixConstructionOperator__Group__0)
{ after(grammarAccess.getMatrixConstructionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionList
entryRuleExpressionList 
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitConstructionOperator
entryRuleUnitConstructionOperator 
:
{ before(grammarAccess.getUnitConstructionOperatorRule()); }
	 ruleUnitConstructionOperator
{ after(grammarAccess.getUnitConstructionOperatorRule()); } 
	 EOF 
;

// Rule UnitConstructionOperator
ruleUnitConstructionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getGroup()); }
(rule__UnitConstructionOperator__Group__0)
{ after(grammarAccess.getUnitConstructionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBeginExpression
entryRuleBeginExpression 
:
{ before(grammarAccess.getBeginExpressionRule()); }
	 ruleBeginExpression
{ after(grammarAccess.getBeginExpressionRule()); } 
	 EOF 
;

// Rule BeginExpression
ruleBeginExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBeginExpressionAccess().getGroup()); }
(rule__BeginExpression__Group__0)
{ after(grammarAccess.getBeginExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEndExpression
entryRuleEndExpression 
:
{ before(grammarAccess.getEndExpressionRule()); }
	 ruleEndExpression
{ after(grammarAccess.getEndExpressionRule()); } 
	 EOF 
;

// Rule EndExpression
ruleEndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEndExpressionAccess().getGroup()); }
(rule__EndExpression__Group__0)
{ after(grammarAccess.getEndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpression
entryRuleUnitExpression 
:
{ before(grammarAccess.getUnitExpressionRule()); }
	 ruleUnitExpression
{ after(grammarAccess.getUnitExpressionRule()); } 
	 EOF 
;

// Rule UnitExpression
ruleUnitExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionAccess().getAlternatives()); }
(rule__UnitExpression__Alternatives)
{ after(grammarAccess.getUnitExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionNumerator
entryRuleUnitExpressionNumerator 
:
{ before(grammarAccess.getUnitExpressionNumeratorRule()); }
	 ruleUnitExpressionNumerator
{ after(grammarAccess.getUnitExpressionNumeratorRule()); } 
	 EOF 
;

// Rule UnitExpressionNumerator
ruleUnitExpressionNumerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getAlternatives()); }
(rule__UnitExpressionNumerator__Alternatives)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionDenominator
entryRuleUnitExpressionDenominator 
:
{ before(grammarAccess.getUnitExpressionDenominatorRule()); }
	 ruleUnitExpressionDenominator
{ after(grammarAccess.getUnitExpressionDenominatorRule()); } 
	 EOF 
;

// Rule UnitExpressionDenominator
ruleUnitExpressionDenominator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getAlternatives()); }
(rule__UnitExpressionDenominator__Alternatives)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionFactor
entryRuleUnitExpressionFactor 
:
{ before(grammarAccess.getUnitExpressionFactorRule()); }
	 ruleUnitExpressionFactor
{ after(grammarAccess.getUnitExpressionFactorRule()); } 
	 EOF 
;

// Rule UnitExpressionFactor
ruleUnitExpressionFactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getGroup()); }
(rule__UnitExpressionFactor__Group__0)
{ after(grammarAccess.getUnitExpressionFactorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExpressionExponent
entryRuleUnitExpressionExponent 
:
{ before(grammarAccess.getUnitExpressionExponentRule()); }
	 ruleUnitExpressionExponent
{ after(grammarAccess.getUnitExpressionExponentRule()); } 
	 EOF 
;

// Rule UnitExpressionExponent
ruleUnitExpressionExponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getGroup()); }
(rule__UnitExpressionExponent__Group__0)
{ after(grammarAccess.getUnitExpressionExponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeywordID
entryRuleKeywordID 
:
{ before(grammarAccess.getKeywordIDRule()); }
	 ruleKeywordID
{ after(grammarAccess.getKeywordIDRule()); } 
	 EOF 
;

// Rule KeywordID
ruleKeywordID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeywordIDAccess().getAlternatives()); }
(rule__KeywordID__Alternatives)
{ after(grammarAccess.getKeywordIDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule CheckStatusKind
ruleCheckStatusKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckStatusKindAccess().getAlternatives()); }
(rule__CheckStatusKind__Alternatives)
{ after(grammarAccess.getCheckStatusKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddSubtractOperator
ruleAddSubtractOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractOperatorAccess().getAlternatives()); }
(rule__AddSubtractOperator__Alternatives)
{ after(grammarAccess.getAddSubtractOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplyDivideOperator
ruleMultiplyDivideOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getAlternatives()); }
(rule__MultiplyDivideOperator__Alternatives)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PowerOperator
rulePowerOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOperatorAccess().getAlternatives()); }
(rule__PowerOperator__Alternatives)
{ after(grammarAccess.getPowerOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BooleanKind
ruleBooleanKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanKindAccess().getAlternatives()); }
(rule__BooleanKind__Alternatives)
{ after(grammarAccess.getBooleanKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PackageDefinitionElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionElementAccess().getPackageDefinitionParserRuleCall_0()); }
	rulePackageDefinition
{ after(grammarAccess.getPackageDefinitionElementAccess().getPackageDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPackageDefinitionElementAccess().getTypeDefinitionParserRuleCall_1()); }
	ruleTypeDefinition
{ after(grammarAccess.getPackageDefinitionElementAccess().getTypeDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPackageDefinitionElementAccess().getVariableDeclarationParserRuleCall_2()); }
	ruleVariableDeclaration
{ after(grammarAccess.getPackageDefinitionElementAccess().getVariableDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefinitionAccess().getDataTypeDefinitionParserRuleCall_0()); }
	ruleDataTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getDataTypeDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getSubroutineDefinitionParserRuleCall_1()); }
	ruleSubroutineDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getSubroutineDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeDefinitionAccess().getEnumerationDefinitionParserRuleCall_0()); }
	ruleEnumerationDefinition
{ after(grammarAccess.getDataTypeDefinitionAccess().getEnumerationDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDataTypeDefinitionAccess().getRecordDefinitionParserRuleCall_1()); }
	ruleRecordDefinition
{ after(grammarAccess.getDataTypeDefinitionAccess().getRecordDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDataTypeDefinitionAccess().getTypeAliasDefinitionParserRuleCall_2()); }
	ruleTypeAliasDefinition
{ after(grammarAccess.getDataTypeDefinitionAccess().getTypeAliasDefinitionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0_0()); }

	'var' 

{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getVariableDeclarationAccess().getConstantAssignment_0_1()); }
(rule__VariableDeclaration__ConstantAssignment_0_1)
{ after(grammarAccess.getVariableDeclarationAccess().getConstantAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubroutineDefinitionAccess().getFunctionDefinitionParserRuleCall_0()); }
	ruleFunctionDefinition
{ after(grammarAccess.getSubroutineDefinitionAccess().getFunctionDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSubroutineDefinitionAccess().getCheckDefinitionParserRuleCall_1()); }
	ruleCheckDefinition
{ after(grammarAccess.getSubroutineDefinitionAccess().getCheckDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_0()); }
	ruleBlockStatement
{ after(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1()); }
	ruleExpressionStatement
{ after(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_4()); }
	ruleDoWhileStatement
{ after(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getForeachStatementParserRuleCall_5()); }
	ruleForeachStatement
{ after(grammarAccess.getStatementAccess().getForeachStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getTypeDefinitionParserRuleCall_6()); }
	ruleTypeDefinition
{ after(grammarAccess.getStatementAccess().getTypeDefinitionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_7()); }
	ruleVariableDeclaration
{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_8()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCheckStatusStatementParserRuleCall_9()); }
	ruleCheckStatusStatement
{ after(grammarAccess.getStatementAccess().getCheckStatusStatementParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getDataTypeSpecifierParserRuleCall_0()); }
	ruleDataTypeSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getDataTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getUnitTypeSpecifierParserRuleCall_1()); }
	ruleUnitTypeSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getUnitTypeSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeSpecifierAccess().getPrimitiveTypeSpecifierParserRuleCall_0()); }
	rulePrimitiveTypeSpecifier
{ after(grammarAccess.getDataTypeSpecifierAccess().getPrimitiveTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDataTypeSpecifierAccess().getNamedTypeSpecifierParserRuleCall_1()); }
	ruleNamedTypeSpecifier
{ after(grammarAccess.getDataTypeSpecifierAccess().getNamedTypeSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeSpecifierAccess().getNumericalTypeSpecifierParserRuleCall_0()); }
	ruleNumericalTypeSpecifier
{ after(grammarAccess.getPrimitiveTypeSpecifierAccess().getNumericalTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeSpecifierAccess().getBooleanTypeSpecifierParserRuleCall_1()); }
	ruleBooleanTypeSpecifier
{ after(grammarAccess.getPrimitiveTypeSpecifierAccess().getBooleanTypeSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeSpecifierAccess().getStringTypeSpecifierParserRuleCall_2()); }
	ruleStringTypeSpecifier
{ after(grammarAccess.getPrimitiveTypeSpecifierAccess().getStringTypeSpecifierParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalTypeSpecifierAccess().getRealTypeSpecifierParserRuleCall_0()); }
	ruleRealTypeSpecifier
{ after(grammarAccess.getNumericalTypeSpecifierAccess().getRealTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalTypeSpecifierAccess().getIntegerTypeSpecifierParserRuleCall_1()); }
	ruleIntegerTypeSpecifier
{ after(grammarAccess.getNumericalTypeSpecifierAccess().getIntegerTypeSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumericalTypeSpecifierAccess().getComplexTypeSpecifierParserRuleCall_2()); }
	ruleComplexTypeSpecifier
{ after(grammarAccess.getNumericalTypeSpecifierAccess().getComplexTypeSpecifierParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNumericalTypeSpecifierAccess().getGaussianTypeSpecifierParserRuleCall_3()); }
	ruleGaussianTypeSpecifier
{ after(grammarAccess.getNumericalTypeSpecifierAccess().getGaussianTypeSpecifierParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getUnspecifiedAssignment_0()); }
(rule__ArrayDimensionSpecification__UnspecifiedAssignment_0)
{ after(grammarAccess.getArrayDimensionSpecificationAccess().getUnspecifiedAssignment_0()); }
)

    |(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getGroup_1()); }
(rule__ArrayDimensionSpecification__Group_1__0)
{ after(grammarAccess.getArrayDimensionSpecificationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
	ruleConditionalExpression
{ after(grammarAccess.getExpressionAccess().getConditionalExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getRangeExpressionParserRuleCall_1()); }
	ruleRangeExpression
{ after(grammarAccess.getExpressionAccess().getRangeExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_0()); }
(rule__RelationalExpression__Group_1_1_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1()); }
(rule__RelationalExpression__Group_1_1_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getFeatureCallParserRuleCall_0()); }
	ruleFeatureCall
{ after(grammarAccess.getUnaryExpressionAccess().getFeatureCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
(rule__UnaryExpression__Group_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureCallAccess().getGroup_1()); }
(rule__FeatureCall__Group_1__0)
{ after(grammarAccess.getFeatureCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallPart__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallPartAccess().getFeatureReferenceParserRuleCall_0()); }
	ruleFeatureReference
{ after(grammarAccess.getFeatureCallPartAccess().getFeatureReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureCallPartAccess().getArrayElementReferenceParserRuleCall_1()); }
	ruleArrayElementReference
{ after(grammarAccess.getFeatureCallPartAccess().getArrayElementReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFeatureCallPartAccess().getOperationCallParserRuleCall_2()); }
	ruleOperationCall
{ after(grammarAccess.getFeatureCallPartAccess().getOperationCallParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureReference__FeatureNameAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureReferenceAccess().getFeatureNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getFeatureReferenceAccess().getFeatureNameIDTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getFeatureReferenceAccess().getFeatureNameUnitKeyword_1_0_1()); }

	'unit' 

{ after(grammarAccess.getFeatureReferenceAccess().getFeatureNameUnitKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallablePrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallablePrimaryExpressionAccess().getMatrixConstructionOperatorParserRuleCall_0()); }
	ruleMatrixConstructionOperator
{ after(grammarAccess.getCallablePrimaryExpressionAccess().getMatrixConstructionOperatorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCallablePrimaryExpressionAccess().getSymbolReferenceParserRuleCall_1()); }
	ruleSymbolReference
{ after(grammarAccess.getCallablePrimaryExpressionAccess().getSymbolReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCallablePrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getCallablePrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnitConstructionOperatorParserRuleCall_1()); }
	ruleUnitConstructionOperator
{ after(grammarAccess.getPrimaryExpressionAccess().getUnitConstructionOperatorParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getBeginExpressionParserRuleCall_2()); }
	ruleBeginExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getBeginExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getEndExpressionParserRuleCall_3()); }
	ruleEndExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getEndExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumericalLiteralParserRuleCall_0()); }
	ruleNumericalLiteral
{ after(grammarAccess.getLiteralAccess().getNumericalLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalLiteralAccess().getRealLiteralParserRuleCall_0()); }
	ruleRealLiteral
{ after(grammarAccess.getNumericalLiteralAccess().getRealLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
	ruleIntegerLiteral
{ after(grammarAccess.getNumericalLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subscript__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubscriptAccess().getAllAssignment_0()); }
(rule__Subscript__AllAssignment_0)
{ after(grammarAccess.getSubscriptAccess().getAllAssignment_0()); }
)

    |(
{ before(grammarAccess.getSubscriptAccess().getExpressionAssignment_1()); }
(rule__Subscript__ExpressionAssignment_1)
{ after(grammarAccess.getSubscriptAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getUnspecifiedAssignment_0()); }
(rule__UnitExpression__UnspecifiedAssignment_0)
{ after(grammarAccess.getUnitExpressionAccess().getUnspecifiedAssignment_0()); }
)

    |(
{ before(grammarAccess.getUnitExpressionAccess().getGroup_1()); }
(rule__UnitExpression__Group_1__0)
{ after(grammarAccess.getUnitExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnitExpressionAccess().getGroup_2()); }
(rule__UnitExpression__Group_2__0)
{ after(grammarAccess.getUnitExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getOneAssignment_0()); }
(rule__UnitExpressionNumerator__OneAssignment_0)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getOneAssignment_0()); }
)

    |(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1()); }
(rule__UnitExpressionNumerator__Group_1__0)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_0()); }
(rule__UnitExpressionDenominator__FactorsAssignment_0)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_0()); }
)

    |(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1()); }
(rule__UnitExpressionDenominator__Group_1__0)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordID__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getKeywordIDAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getKeywordIDAccess().getJKeyword_1()); }

	'j' 

{ after(grammarAccess.getKeywordIDAccess().getJKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckStatusKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckStatusKindAccess().getInfoEnumLiteralDeclaration_0()); }
(	'info' 
)
{ after(grammarAccess.getCheckStatusKindAccess().getInfoEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCheckStatusKindAccess().getWarningEnumLiteralDeclaration_1()); }
(	'warning' 
)
{ after(grammarAccess.getCheckStatusKindAccess().getWarningEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCheckStatusKindAccess().getErrorEnumLiteralDeclaration_2()); }
(	'error' 
)
{ after(grammarAccess.getCheckStatusKindAccess().getErrorEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCheckStatusKindAccess().getFatalEnumLiteralDeclaration_3()); }
(	'fatal' 
)
{ after(grammarAccess.getCheckStatusKindAccess().getFatalEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractOperatorAccess().getAddEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAddSubtractOperatorAccess().getAddEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAddSubtractOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAddSubtractOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_2()); }
(	'.*' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_3()); }
(	'./' 
)
{ after(grammarAccess.getMultiplyDivideOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0()); }
(	'^' 
)
{ after(grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1()); }
(	'.^' 
)
{ after(grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getMinusEnumLiteralDeclaration_0()); }
(	'-' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getMinusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_1()); }
(	'!' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanKindAccess().getFalseEnumLiteralDeclaration_0()); }
(	'false' 
)
{ after(grammarAccess.getBooleanKindAccess().getFalseEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBooleanKindAccess().getTrueEnumLiteralDeclaration_1()); }
(	'true' 
)
{ after(grammarAccess.getBooleanKindAccess().getTrueEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PackageDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDefinition__Group__0__Impl
	rule__PackageDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDefinitionAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDefinition__Group__1__Impl
	rule__PackageDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionAccess().getNameAssignment_1()); }
(rule__PackageDefinition__NameAssignment_1)
{ after(grammarAccess.getPackageDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDefinition__Group__2__Impl
	rule__PackageDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getPackageDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDefinition__Group__3__Impl
	rule__PackageDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionAccess().getElementsAssignment_3()); }
(rule__PackageDefinition__ElementsAssignment_3)*
{ after(grammarAccess.getPackageDefinitionAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getPackageDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__0__Impl
	rule__EnumerationDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumerationDefinitionAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__1__Impl
	rule__EnumerationDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getNameAssignment_1()); }
(rule__EnumerationDefinition__NameAssignment_1)
{ after(grammarAccess.getEnumerationDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__2__Impl
	rule__EnumerationDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumerationDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__3__Impl
	rule__EnumerationDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getGroup_3()); }
(rule__EnumerationDefinition__Group_3__0)?
{ after(grammarAccess.getEnumerationDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumerationDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_3__0__Impl
	rule__EnumerationDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_0()); }
(rule__EnumerationDefinition__LiteralsAssignment_3_0)
{ after(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getGroup_3_1()); }
(rule__EnumerationDefinition__Group_3_1__0)*
{ after(grammarAccess.getEnumerationDefinitionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationDefinition__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_3_1__0__Impl
	rule__EnumerationDefinition__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getEnumerationDefinitionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_1_1()); }
(rule__EnumerationDefinition__LiteralsAssignment_3_1_1)
{ after(grammarAccess.getEnumerationDefinitionAccess().getLiteralsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeAliasDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAliasDefinition__Group__0__Impl
	rule__TypeAliasDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeAliasDefinitionAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAliasDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAliasDefinition__Group__1__Impl
	rule__TypeAliasDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getNameAssignment_1()); }
(rule__TypeAliasDefinition__NameAssignment_1)
{ after(grammarAccess.getTypeAliasDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAliasDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAliasDefinition__Group__2__Impl
	rule__TypeAliasDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getTypeAliasDefinitionAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAliasDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAliasDefinition__Group__3__Impl
	rule__TypeAliasDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getTypeAssignment_3()); }
(rule__TypeAliasDefinition__TypeAssignment_3)
{ after(grammarAccess.getTypeAliasDefinitionAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAliasDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAliasDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getTypeAliasDefinitionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getAlternatives_0()); }
(rule__VariableDeclaration__Alternatives_0)
{ after(grammarAccess.getVariableDeclarationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
(rule__VariableDeclaration__Group_2__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
(rule__VariableDeclaration__Group_3__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_2__0__Impl
	rule__VariableDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getVariableDeclarationAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_2_1()); }
(rule__VariableDeclaration__TypeAssignment_2_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_3_1()); }
(rule__VariableDeclaration__InitialValueAssignment_3_1)
{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordDefinition__Group__0__Impl
	rule__RecordDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordDefinitionAccess().getRecordKeyword_0()); }

	'record' 

{ after(grammarAccess.getRecordDefinitionAccess().getRecordKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordDefinition__Group__1__Impl
	rule__RecordDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordDefinitionAccess().getNameAssignment_1()); }
(rule__RecordDefinition__NameAssignment_1)
{ after(grammarAccess.getRecordDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordDefinition__Group__2__Impl
	rule__RecordDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordDefinitionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getRecordDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordDefinition__Group__3__Impl
	rule__RecordDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordDefinitionAccess().getFieldsAssignment_3()); }
(rule__RecordDefinition__FieldsAssignment_3)*
{ after(grammarAccess.getRecordDefinitionAccess().getFieldsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getRecordDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RecordFieldDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordFieldDeclaration__Group__0__Impl
	rule__RecordFieldDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordFieldDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordFieldDeclarationAccess().getNameAssignment_0()); }
(rule__RecordFieldDeclaration__NameAssignment_0)
{ after(grammarAccess.getRecordFieldDeclarationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordFieldDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordFieldDeclaration__Group__1__Impl
	rule__RecordFieldDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordFieldDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordFieldDeclarationAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getRecordFieldDeclarationAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordFieldDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordFieldDeclaration__Group__2__Impl
	rule__RecordFieldDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordFieldDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordFieldDeclarationAccess().getTypeAssignment_2()); }
(rule__RecordFieldDeclaration__TypeAssignment_2)
{ after(grammarAccess.getRecordFieldDeclarationAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordFieldDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordFieldDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordFieldDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordFieldDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getRecordFieldDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__0__Impl
	rule__FunctionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getFuncKeyword_0()); }

	'func' 

{ after(grammarAccess.getFunctionDefinitionAccess().getFuncKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__1__Impl
	rule__FunctionDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1()); }
(rule__FunctionDefinition__NameAssignment_1)
{ after(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__2__Impl
	rule__FunctionDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__3__Impl
	rule__FunctionDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_3()); }
(rule__FunctionDefinition__Group_3__0)?
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__4__Impl
	rule__FunctionDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__5__Impl
	rule__FunctionDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_5()); }
(rule__FunctionDefinition__Group_5__0)?
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_6()); }
(rule__FunctionDefinition__BodyAssignment_6)
{ after(grammarAccess.getFunctionDefinitionAccess().getBodyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__FunctionDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_3__0__Impl
	rule__FunctionDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_3_0()); }
(rule__FunctionDefinition__ParametersAssignment_3_0)
{ after(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_3_1()); }
(rule__FunctionDefinition__Group_3_1__0)*
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDefinition__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_3_1__0__Impl
	rule__FunctionDefinition__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_3_1_1()); }
(rule__FunctionDefinition__ParametersAssignment_3_1_1)
{ after(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDefinition__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_5__0__Impl
	rule__FunctionDefinition__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getPreKeyword_5_0()); }

	'pre' 

{ after(grammarAccess.getFunctionDefinitionAccess().getPreKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getPreconditionChainAssignment_5_1()); }
(rule__FunctionDefinition__PreconditionChainAssignment_5_1)
{ after(grammarAccess.getFunctionDefinitionAccess().getPreconditionChainAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CheckDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group__0__Impl
	rule__CheckDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getCheckKeyword_0()); }

	'check' 

{ after(grammarAccess.getCheckDefinitionAccess().getCheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group__1__Impl
	rule__CheckDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getNameAssignment_1()); }
(rule__CheckDefinition__NameAssignment_1)
{ after(grammarAccess.getCheckDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group__2__Impl
	rule__CheckDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getCheckDefinitionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group__3__Impl
	rule__CheckDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getGroup_3()); }
(rule__CheckDefinition__Group_3__0)?
{ after(grammarAccess.getCheckDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group__4__Impl
	rule__CheckDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCheckDefinitionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group__5__Impl
	rule__CheckDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getGroup_5()); }
(rule__CheckDefinition__Group_5__0)?
{ after(grammarAccess.getCheckDefinitionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getBodyAssignment_6()); }
(rule__CheckDefinition__BodyAssignment_6)
{ after(grammarAccess.getCheckDefinitionAccess().getBodyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__CheckDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group_3__0__Impl
	rule__CheckDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getParametersAssignment_3_0()); }
(rule__CheckDefinition__ParametersAssignment_3_0)
{ after(grammarAccess.getCheckDefinitionAccess().getParametersAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getGroup_3_1()); }
(rule__CheckDefinition__Group_3_1__0)*
{ after(grammarAccess.getCheckDefinitionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CheckDefinition__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group_3_1__0__Impl
	rule__CheckDefinition__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getCheckDefinitionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getParametersAssignment_3_1_1()); }
(rule__CheckDefinition__ParametersAssignment_3_1_1)
{ after(grammarAccess.getCheckDefinitionAccess().getParametersAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CheckDefinition__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group_5__0__Impl
	rule__CheckDefinition__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getPreKeyword_5_0()); }

	'pre' 

{ after(grammarAccess.getCheckDefinitionAccess().getPreKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckDefinition__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckDefinition__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getPreconditionChainAssignment_5_1()); }
(rule__CheckDefinition__PreconditionChainAssignment_5_1)
{ after(grammarAccess.getCheckDefinitionAccess().getPreconditionChainAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getReferenceAssignment_0()); }
(rule__ParameterDeclaration__ReferenceAssignment_0)?
{ after(grammarAccess.getParameterDeclarationAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameAssignment_1()); }
(rule__ParameterDeclaration__NameAssignment_1)
{ after(grammarAccess.getParameterDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__2__Impl
	rule__ParameterDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getParameterDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_3()); }
(rule__ParameterDeclaration__TypeAssignment_3)
{ after(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PreconditionChain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreconditionChain__Group__0__Impl
	rule__PreconditionChain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreconditionChain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionChainAccess().getPreconditionsAssignment_0()); }
(rule__PreconditionChain__PreconditionsAssignment_0)
{ after(grammarAccess.getPreconditionChainAccess().getPreconditionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreconditionChain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreconditionChain__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreconditionChain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionChainAccess().getGroup_1()); }
(rule__PreconditionChain__Group_1__0)*
{ after(grammarAccess.getPreconditionChainAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PreconditionChain__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreconditionChain__Group_1__0__Impl
	rule__PreconditionChain__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreconditionChain__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionChainAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getPreconditionChainAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreconditionChain__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreconditionChain__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreconditionChain__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionChainAccess().getPreconditionsAssignment_1_1()); }
(rule__PreconditionChain__PreconditionsAssignment_1_1)
{ after(grammarAccess.getPreconditionChainAccess().getPreconditionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__0__Impl
	rule__BlockStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getBlockStatementAction_0()); }
(

)
{ after(grammarAccess.getBlockStatementAccess().getBlockStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__1__Impl
	rule__BlockStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockStatementAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__2__Impl
	rule__BlockStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getStatementsAssignment_2()); }
(rule__BlockStatement__StatementsAssignment_2)*
{ after(grammarAccess.getBlockStatementAccess().getStatementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockStatementAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExpressionStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__0__Impl
	rule__ExpressionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); }
(rule__ExpressionStatement__ExpressionAssignment_0)
{ after(grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__1__Impl
	rule__ExpressionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
(rule__ExpressionStatement__Group_1__0)?
{ after(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__0__Impl
	rule__ExpressionStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getExpressionStatementAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getAssignedValueAssignment_1_1()); }
(rule__ExpressionStatement__AssignedValueAssignment_1_1)
{ after(grammarAccess.getExpressionStatementAccess().getAssignedValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getCasesAssignment_1()); }
(rule__IfStatement__CasesAssignment_1)
{ after(grammarAccess.getIfStatementAccess().getCasesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_2()); }
(rule__IfStatement__Group_2__0)*
{ after(grammarAccess.getIfStatementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_3()); }
(rule__IfStatement__Group_3__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_2__0__Impl
	rule__IfStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseifKeyword_2_0()); }

	'elseif' 

{ after(grammarAccess.getIfStatementAccess().getElseifKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getCasesAssignment_2_1()); }
(rule__IfStatement__CasesAssignment_2_1)
{ after(grammarAccess.getIfStatementAccess().getCasesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__0__Impl
	rule__IfStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBodyAssignment_3_1()); }
(rule__IfStatement__ElseBodyAssignment_3_1)
{ after(grammarAccess.getIfStatementAccess().getElseBodyAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCase__Group__0__Impl
	rule__IfCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCaseAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getIfCaseAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCase__Group__1__Impl
	rule__IfCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCaseAccess().getConditionAssignment_1()); }
(rule__IfCase__ConditionAssignment_1)
{ after(grammarAccess.getIfCaseAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCase__Group__2__Impl
	rule__IfCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCaseAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getIfCaseAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfCase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCaseAccess().getBodyAssignment_3()); }
(rule__IfCase__BodyAssignment_3)
{ after(grammarAccess.getIfCaseAccess().getBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getPredicateAssignment_2()); }
(rule__WhileStatement__PredicateAssignment_2)
{ after(grammarAccess.getWhileStatementAccess().getPredicateAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyAssignment_4()); }
(rule__WhileStatement__BodyAssignment_4)
{ after(grammarAccess.getWhileStatementAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DoWhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__0__Impl
	rule__DoWhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getDoKeyword_0()); }

	'do' 

{ after(grammarAccess.getDoWhileStatementAccess().getDoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__1__Impl
	rule__DoWhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getBodyAssignment_1()); }
(rule__DoWhileStatement__BodyAssignment_1)
{ after(grammarAccess.getDoWhileStatementAccess().getBodyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__2__Impl
	rule__DoWhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2()); }

	'while' 

{ after(grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__3__Impl
	rule__DoWhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getDoWhileStatementAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__4__Impl
	rule__DoWhileStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getPredicateAssignment_4()); }
(rule__DoWhileStatement__PredicateAssignment_4)
{ after(grammarAccess.getDoWhileStatementAccess().getPredicateAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__5__Impl
	rule__DoWhileStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getDoWhileStatementAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ForeachStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachStatement__Group__0__Impl
	rule__ForeachStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getForeachKeyword_0()); }

	'foreach' 

{ after(grammarAccess.getForeachStatementAccess().getForeachKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachStatement__Group__1__Impl
	rule__ForeachStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForeachStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachStatement__Group__2__Impl
	rule__ForeachStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getElementNameAssignment_2()); }
(rule__ForeachStatement__ElementNameAssignment_2)
{ after(grammarAccess.getForeachStatementAccess().getElementNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachStatement__Group__3__Impl
	rule__ForeachStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getForeachStatementAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachStatement__Group__4__Impl
	rule__ForeachStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getCollectionExpressionAssignment_4()); }
(rule__ForeachStatement__CollectionExpressionAssignment_4)
{ after(grammarAccess.getForeachStatementAccess().getCollectionExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachStatement__Group__5__Impl
	rule__ForeachStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getForeachStatementAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForeachStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForeachStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getBodyAssignment_6()); }
(rule__ForeachStatement__BodyAssignment_6)
{ after(grammarAccess.getForeachStatementAccess().getBodyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
(

)
{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
	rule__ReturnStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnValueAssignment_2()); }
(rule__ReturnStatement__ReturnValueAssignment_2)?
{ after(grammarAccess.getReturnStatementAccess().getReturnValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CheckStatusStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckStatusStatement__Group__0__Impl
	rule__CheckStatusStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckStatusStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckStatusStatementAccess().getKindAssignment_0()); }
(rule__CheckStatusStatement__KindAssignment_0)
{ after(grammarAccess.getCheckStatusStatementAccess().getKindAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckStatusStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckStatusStatement__Group__1__Impl
	rule__CheckStatusStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckStatusStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckStatusStatementAccess().getMessageAssignment_1()); }
(rule__CheckStatusStatement__MessageAssignment_1)
{ after(grammarAccess.getCheckStatusStatementAccess().getMessageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CheckStatusStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CheckStatusStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CheckStatusStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckStatusStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getCheckStatusStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RealTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group__0__Impl
	rule__RealTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getRealTypeSpecifierAction_0()); }
(

)
{ after(grammarAccess.getRealTypeSpecifierAccess().getRealTypeSpecifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group__1__Impl
	rule__RealTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getRealKeyword_1()); }

	'real' 

{ after(grammarAccess.getRealTypeSpecifierAccess().getRealKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group__2__Impl
	rule__RealTypeSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getGroup_2()); }
(rule__RealTypeSpecifier__Group_2__0)?
{ after(grammarAccess.getRealTypeSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getGroup_3()); }
(rule__RealTypeSpecifier__Group_3__0)?
{ after(grammarAccess.getRealTypeSpecifierAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RealTypeSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_2__0__Impl
	rule__RealTypeSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getRealTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_2__1__Impl
	rule__RealTypeSpecifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getUnitAssignment_2_1()); }
(rule__RealTypeSpecifier__UnitAssignment_2_1)
{ after(grammarAccess.getRealTypeSpecifierAccess().getUnitAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getRealTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RealTypeSpecifier__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_3__0__Impl
	rule__RealTypeSpecifier__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }

	'[' 

{ after(grammarAccess.getRealTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_3__1__Impl
	rule__RealTypeSpecifier__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
(rule__RealTypeSpecifier__DimensionsAssignment_3_1)
{ after(grammarAccess.getRealTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_3__2__Impl
	rule__RealTypeSpecifier__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getGroup_3_2()); }
(rule__RealTypeSpecifier__Group_3_2__0)*
{ after(grammarAccess.getRealTypeSpecifierAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }

	']' 

{ after(grammarAccess.getRealTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RealTypeSpecifier__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_3_2__0__Impl
	rule__RealTypeSpecifier__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getRealTypeSpecifierAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeSpecifier__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeSpecifier__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
(rule__RealTypeSpecifier__DimensionsAssignment_3_2_1)
{ after(grammarAccess.getRealTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group__0__Impl
	rule__IntegerTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getIntegerTypeSpecifierAction_0()); }
(

)
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getIntegerTypeSpecifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group__1__Impl
	rule__IntegerTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getIntegerTypeSpecifierAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group__2__Impl
	rule__IntegerTypeSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_2()); }
(rule__IntegerTypeSpecifier__Group_2__0)?
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_3()); }
(rule__IntegerTypeSpecifier__Group_3__0)?
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IntegerTypeSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_2__0__Impl
	rule__IntegerTypeSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getIntegerTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_2__1__Impl
	rule__IntegerTypeSpecifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getUnitAssignment_2_1()); }
(rule__IntegerTypeSpecifier__UnitAssignment_2_1)
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getUnitAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getIntegerTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntegerTypeSpecifier__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_3__0__Impl
	rule__IntegerTypeSpecifier__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }

	'[' 

{ after(grammarAccess.getIntegerTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_3__1__Impl
	rule__IntegerTypeSpecifier__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
(rule__IntegerTypeSpecifier__DimensionsAssignment_3_1)
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_3__2__Impl
	rule__IntegerTypeSpecifier__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_3_2()); }
(rule__IntegerTypeSpecifier__Group_3_2__0)*
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }

	']' 

{ after(grammarAccess.getIntegerTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IntegerTypeSpecifier__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_3_2__0__Impl
	rule__IntegerTypeSpecifier__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getIntegerTypeSpecifierAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeSpecifier__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeSpecifier__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
(rule__IntegerTypeSpecifier__DimensionsAssignment_3_2_1)
{ after(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComplexTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group__0__Impl
	rule__ComplexTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getComplexTypeSpecifierAction_0()); }
(

)
{ after(grammarAccess.getComplexTypeSpecifierAccess().getComplexTypeSpecifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group__1__Impl
	rule__ComplexTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getComplexKeyword_1()); }

	'complex' 

{ after(grammarAccess.getComplexTypeSpecifierAccess().getComplexKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group__2__Impl
	rule__ComplexTypeSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getGroup_2()); }
(rule__ComplexTypeSpecifier__Group_2__0)?
{ after(grammarAccess.getComplexTypeSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getGroup_3()); }
(rule__ComplexTypeSpecifier__Group_3__0)?
{ after(grammarAccess.getComplexTypeSpecifierAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ComplexTypeSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_2__0__Impl
	rule__ComplexTypeSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getComplexTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_2__1__Impl
	rule__ComplexTypeSpecifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getUnitAssignment_2_1()); }
(rule__ComplexTypeSpecifier__UnitAssignment_2_1)
{ after(grammarAccess.getComplexTypeSpecifierAccess().getUnitAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getComplexTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComplexTypeSpecifier__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_3__0__Impl
	rule__ComplexTypeSpecifier__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }

	'[' 

{ after(grammarAccess.getComplexTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_3__1__Impl
	rule__ComplexTypeSpecifier__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
(rule__ComplexTypeSpecifier__DimensionsAssignment_3_1)
{ after(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_3__2__Impl
	rule__ComplexTypeSpecifier__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getGroup_3_2()); }
(rule__ComplexTypeSpecifier__Group_3_2__0)*
{ after(grammarAccess.getComplexTypeSpecifierAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }

	']' 

{ after(grammarAccess.getComplexTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ComplexTypeSpecifier__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_3_2__0__Impl
	rule__ComplexTypeSpecifier__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getComplexTypeSpecifierAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexTypeSpecifier__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexTypeSpecifier__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
(rule__ComplexTypeSpecifier__DimensionsAssignment_3_2_1)
{ after(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GaussianTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group__0__Impl
	rule__GaussianTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getGaussianTypeSpecifierAction_0()); }
(

)
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getGaussianTypeSpecifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group__1__Impl
	rule__GaussianTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getGaussKeyword_1()); }

	'gauss' 

{ after(grammarAccess.getGaussianTypeSpecifierAccess().getGaussKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group__2__Impl
	rule__GaussianTypeSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_2()); }
(rule__GaussianTypeSpecifier__Group_2__0)?
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_3()); }
(rule__GaussianTypeSpecifier__Group_3__0)?
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__GaussianTypeSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_2__0__Impl
	rule__GaussianTypeSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getGaussianTypeSpecifierAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_2__1__Impl
	rule__GaussianTypeSpecifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getUnitAssignment_2_1()); }
(rule__GaussianTypeSpecifier__UnitAssignment_2_1)
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getUnitAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getGaussianTypeSpecifierAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GaussianTypeSpecifier__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_3__0__Impl
	rule__GaussianTypeSpecifier__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }

	'[' 

{ after(grammarAccess.getGaussianTypeSpecifierAccess().getLeftSquareBracketKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_3__1__Impl
	rule__GaussianTypeSpecifier__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
(rule__GaussianTypeSpecifier__DimensionsAssignment_3_1)
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_3__2__Impl
	rule__GaussianTypeSpecifier__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_3_2()); }
(rule__GaussianTypeSpecifier__Group_3_2__0)*
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }

	']' 

{ after(grammarAccess.getGaussianTypeSpecifierAccess().getRightSquareBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__GaussianTypeSpecifier__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_3_2__0__Impl
	rule__GaussianTypeSpecifier__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getGaussianTypeSpecifierAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianTypeSpecifier__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianTypeSpecifier__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
(rule__GaussianTypeSpecifier__DimensionsAssignment_3_2_1)
{ after(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group__0__Impl
	rule__BooleanTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getBooleanTypeSpecifierAction_0()); }
(

)
{ after(grammarAccess.getBooleanTypeSpecifierAccess().getBooleanTypeSpecifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group__1__Impl
	rule__BooleanTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getBoolKeyword_1()); }

	'bool' 

{ after(grammarAccess.getBooleanTypeSpecifierAccess().getBoolKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getGroup_2()); }
(rule__BooleanTypeSpecifier__Group_2__0)?
{ after(grammarAccess.getBooleanTypeSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BooleanTypeSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group_2__0__Impl
	rule__BooleanTypeSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getBooleanTypeSpecifierAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group_2__1__Impl
	rule__BooleanTypeSpecifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsAssignment_2_1()); }
(rule__BooleanTypeSpecifier__DimensionsAssignment_2_1)
{ after(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeSpecifier__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group_2__2__Impl
	rule__BooleanTypeSpecifier__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getGroup_2_2()); }
(rule__BooleanTypeSpecifier__Group_2_2__0)*
{ after(grammarAccess.getBooleanTypeSpecifierAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeSpecifier__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getRightSquareBracketKeyword_2_3()); }

	']' 

{ after(grammarAccess.getBooleanTypeSpecifierAccess().getRightSquareBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BooleanTypeSpecifier__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group_2_2__0__Impl
	rule__BooleanTypeSpecifier__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getBooleanTypeSpecifierAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeSpecifier__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeSpecifier__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsAssignment_2_2_1()); }
(rule__BooleanTypeSpecifier__DimensionsAssignment_2_2_1)
{ after(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group__0__Impl
	rule__StringTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getStringTypeSpecifierAction_0()); }
(

)
{ after(grammarAccess.getStringTypeSpecifierAccess().getStringTypeSpecifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group__1__Impl
	rule__StringTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getStringKeyword_1()); }

	'string' 

{ after(grammarAccess.getStringTypeSpecifierAccess().getStringKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getGroup_2()); }
(rule__StringTypeSpecifier__Group_2__0)?
{ after(grammarAccess.getStringTypeSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringTypeSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group_2__0__Impl
	rule__StringTypeSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getStringTypeSpecifierAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringTypeSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group_2__1__Impl
	rule__StringTypeSpecifier__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getDimensionsAssignment_2_1()); }
(rule__StringTypeSpecifier__DimensionsAssignment_2_1)
{ after(grammarAccess.getStringTypeSpecifierAccess().getDimensionsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringTypeSpecifier__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group_2__2__Impl
	rule__StringTypeSpecifier__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getGroup_2_2()); }
(rule__StringTypeSpecifier__Group_2_2__0)*
{ after(grammarAccess.getStringTypeSpecifierAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringTypeSpecifier__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getRightSquareBracketKeyword_2_3()); }

	']' 

{ after(grammarAccess.getStringTypeSpecifierAccess().getRightSquareBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringTypeSpecifier__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group_2_2__0__Impl
	rule__StringTypeSpecifier__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getStringTypeSpecifierAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringTypeSpecifier__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringTypeSpecifier__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getDimensionsAssignment_2_2_1()); }
(rule__StringTypeSpecifier__DimensionsAssignment_2_2_1)
{ after(grammarAccess.getStringTypeSpecifierAccess().getDimensionsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group__0__Impl
	rule__NamedTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getTypeReferenceAssignment_0()); }
(rule__NamedTypeSpecifier__TypeReferenceAssignment_0)
{ after(grammarAccess.getNamedTypeSpecifierAccess().getTypeReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getGroup_1()); }
(rule__NamedTypeSpecifier__Group_1__0)?
{ after(grammarAccess.getNamedTypeSpecifierAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedTypeSpecifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group_1__0__Impl
	rule__NamedTypeSpecifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getNamedTypeSpecifierAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedTypeSpecifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group_1__1__Impl
	rule__NamedTypeSpecifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsAssignment_1_1()); }
(rule__NamedTypeSpecifier__DimensionsAssignment_1_1)
{ after(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedTypeSpecifier__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group_1__2__Impl
	rule__NamedTypeSpecifier__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getGroup_1_2()); }
(rule__NamedTypeSpecifier__Group_1_2__0)*
{ after(grammarAccess.getNamedTypeSpecifierAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedTypeSpecifier__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getRightSquareBracketKeyword_1_3()); }

	']' 

{ after(grammarAccess.getNamedTypeSpecifierAccess().getRightSquareBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NamedTypeSpecifier__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group_1_2__0__Impl
	rule__NamedTypeSpecifier__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getNamedTypeSpecifierAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedTypeSpecifier__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedTypeSpecifier__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsAssignment_1_2_1()); }
(rule__NamedTypeSpecifier__DimensionsAssignment_1_2_1)
{ after(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayDimensionSpecification__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDimensionSpecification__Group_1__0__Impl
	rule__ArrayDimensionSpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getSizeAssignment_1_0()); }
(rule__ArrayDimensionSpecification__SizeAssignment_1_0)
{ after(grammarAccess.getArrayDimensionSpecificationAccess().getSizeAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDimensionSpecification__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDimensionSpecification__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getGroup_1_1()); }
(rule__ArrayDimensionSpecification__Group_1_1__0)?
{ after(grammarAccess.getArrayDimensionSpecificationAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayDimensionSpecification__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDimensionSpecification__Group_1_1__0__Impl
	rule__ArrayDimensionSpecification__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getArrayDimensionSpecificationBeginIndexAction_1_1_0()); }
(

)
{ after(grammarAccess.getArrayDimensionSpecificationAccess().getArrayDimensionSpecificationBeginIndexAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDimensionSpecification__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDimensionSpecification__Group_1_1__1__Impl
	rule__ArrayDimensionSpecification__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getFullStopFullStopKeyword_1_1_1()); }

	'..' 

{ after(grammarAccess.getArrayDimensionSpecificationAccess().getFullStopFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDimensionSpecification__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDimensionSpecification__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getEndIndexAssignment_1_1_2()); }
(rule__ArrayDimensionSpecification__EndIndexAssignment_1_1_2)
{ after(grammarAccess.getArrayDimensionSpecificationAccess().getEndIndexAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnitTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitTypeSpecifier__Group__0__Impl
	rule__UnitTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitTypeSpecifierAccess().getUnitTypeSpecifierAction_0()); }
(

)
{ after(grammarAccess.getUnitTypeSpecifierAccess().getUnitTypeSpecifierAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitTypeSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitTypeSpecifierAccess().getUnitKeyword_1()); }

	'unit' 

{ after(grammarAccess.getUnitTypeSpecifierAccess().getUnitKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getConditionalExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
	rule__ConditionalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_1()); }
(rule__ConditionalExpression__CasesAssignment_1)
{ after(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__2__Impl
	rule__ConditionalExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
(rule__ConditionalExpression__Group_2__0)*
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__3__Impl
	rule__ConditionalExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseKeyword_3()); }

	'else' 

{ after(grammarAccess.getConditionalExpressionAccess().getElseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseExpressionAssignment_4()); }
(rule__ConditionalExpression__ElseExpressionAssignment_4)
{ after(grammarAccess.getConditionalExpressionAccess().getElseExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConditionalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__0__Impl
	rule__ConditionalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseifKeyword_2_0()); }

	'elseif' 

{ after(grammarAccess.getConditionalExpressionAccess().getElseifKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_2_1()); }
(rule__ConditionalExpression__CasesAssignment_2_1)
{ after(grammarAccess.getConditionalExpressionAccess().getCasesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpressionCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpressionCase__Group__0__Impl
	rule__ConditionalExpressionCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionAssignment_0()); }
(rule__ConditionalExpressionCase__ConditionExpressionAssignment_0)
{ after(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpressionCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpressionCase__Group__1__Impl
	rule__ConditionalExpressionCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getThenKeyword_1()); }

	'then' 

{ after(grammarAccess.getConditionalExpressionCaseAccess().getThenKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpressionCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpressionCase__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionAssignment_2()); }
(rule__ConditionalExpressionCase__ThenExpressionAssignment_2)
{ after(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RangeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__0__Impl
	rule__RangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getRangeExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
(rule__RangeExpression__Group_1__0)?
{ after(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__0__Impl
	rule__RangeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getRangeExpressionBeginAction_1_0()); }
(

)
{ after(grammarAccess.getRangeExpressionAccess().getRangeExpressionBeginAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__1__Impl
	rule__RangeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__2__Impl
	rule__RangeExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getEndAssignment_1_2()); }
(rule__RangeExpression__EndAssignment_1_2)
{ after(grammarAccess.getRangeExpressionAccess().getEndAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup_1_3()); }
(rule__RangeExpression__Group_1_3__0)?
{ after(grammarAccess.getRangeExpressionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RangeExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1_3__0__Impl
	rule__RangeExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getRangeExpressionIncrementAction_1_3_0()); }
(

)
{ after(grammarAccess.getRangeExpressionAccess().getRangeExpressionIncrementAction_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1_3__1__Impl
	rule__RangeExpression__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_3_1()); }

	':' 

{ after(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getEndAssignment_1_3_2()); }
(rule__RangeExpression__EndAssignment_1_3_2)
{ after(grammarAccess.getRangeExpressionAccess().getEndAssignment_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)?
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
(rule__LogicalOrExpression__Group_1_1__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
(rule__LogicalOrExpression__Group_1_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_1__0__Impl
	rule__LogicalOrExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1_0()); }

	'||' 

{ after(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__LogicalOrExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)?
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
(rule__LogicalAndExpression__Group_1_1__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
(rule__LogicalAndExpression__Group_1_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_1__0__Impl
	rule__LogicalAndExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1_0()); }

	'&&' 

{ after(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__LogicalAndExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAddSubtractExpressionParserRuleCall_0()); }
	ruleAddSubtractExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAddSubtractExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)?
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_1()); }
(rule__RelationalExpression__Alternatives_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_1_0__0__Impl
	rule__RelationalExpression__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeTestAssignment_1_1_0_0()); }
(rule__RelationalExpression__TypeTestAssignment_1_1_0_0)
{ after(grammarAccess.getRelationalExpressionAccess().getTypeTestAssignment_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeAssignment_1_1_0_1()); }
(rule__RelationalExpression__TypeAssignment_1_1_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getTypeAssignment_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_1_1__0__Impl
	rule__RelationalExpression__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1_1_0()); }
(rule__RelationalExpression__OperatorAssignment_1_1_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_1_1_1()); }
(rule__RelationalExpression__RightOperandAssignment_1_1_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddSubtractExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group__0__Impl
	rule__AddSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getMultiplyDivideExpressionParserRuleCall_0()); }
	ruleMultiplyDivideExpression
{ after(grammarAccess.getAddSubtractExpressionAccess().getMultiplyDivideExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddSubtractExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getGroup_1()); }
(rule__AddSubtractExpression__Group_1__0)?
{ after(grammarAccess.getAddSubtractExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddSubtractExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group_1__0__Impl
	rule__AddSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getAddSubtractExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getAddSubtractExpressionAccess().getAddSubtractExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddSubtractExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getRightPartsAssignment_1_1()); }
(rule__AddSubtractExpression__RightPartsAssignment_1_1)
{ after(grammarAccess.getAddSubtractExpressionAccess().getRightPartsAssignment_1_1()); }
)
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getRightPartsAssignment_1_1()); }
(rule__AddSubtractExpression__RightPartsAssignment_1_1)*
{ after(grammarAccess.getAddSubtractExpressionAccess().getRightPartsAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddSubtractExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpressionPart__Group__0__Impl
	rule__AddSubtractExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionPartAccess().getOperatorAssignment_0()); }
(rule__AddSubtractExpressionPart__OperatorAssignment_0)
{ after(grammarAccess.getAddSubtractExpressionPartAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddSubtractExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddSubtractExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionPartAccess().getOperandAssignment_1()); }
(rule__AddSubtractExpressionPart__OperandAssignment_1)
{ after(grammarAccess.getAddSubtractExpressionPartAccess().getOperandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyDivideExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group__0__Impl
	rule__MultiplyDivideExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getPowerExpressionParserRuleCall_0()); }
	rulePowerExpression
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getPowerExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1()); }
(rule__MultiplyDivideExpression__Group_1__0)?
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyDivideExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group_1__0__Impl
	rule__MultiplyDivideExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getMultiplyDivideExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getMultiplyDivideExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getRightPartsAssignment_1_1()); }
(rule__MultiplyDivideExpression__RightPartsAssignment_1_1)
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getRightPartsAssignment_1_1()); }
)
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getRightPartsAssignment_1_1()); }
(rule__MultiplyDivideExpression__RightPartsAssignment_1_1)*
{ after(grammarAccess.getMultiplyDivideExpressionAccess().getRightPartsAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyDivideExpressionPart__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpressionPart__Group__0__Impl
	rule__MultiplyDivideExpressionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpressionPart__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperatorAssignment_0()); }
(rule__MultiplyDivideExpressionPart__OperatorAssignment_0)
{ after(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivideExpressionPart__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplyDivideExpressionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpressionPart__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperandAssignment_1()); }
(rule__MultiplyDivideExpressionPart__OperandAssignment_1)
{ after(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowerExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group__0__Impl
	rule__PowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
(rule__PowerExpression__Group_1__0)?
{ after(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowerExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__0__Impl
	rule__PowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getPowerExpressionOperandAction_1_0()); }
(

)
{ after(grammarAccess.getPowerExpressionAccess().getPowerExpressionOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__1__Impl
	rule__PowerExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1()); }
(rule__PowerExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getExponentAssignment_1_2()); }
(rule__PowerExpression__ExponentAssignment_1_2)
{ after(grammarAccess.getPowerExpressionAccess().getExponentAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__0__Impl
	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__1__Impl
	rule__UnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_1_1()); }
(rule__UnaryExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2()); }
(rule__UnaryExpression__OperandAssignment_1_2)
{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FeatureCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_1__0__Impl
	rule__FeatureCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getCallablePrimaryExpressionParserRuleCall_1_0()); }
	ruleCallablePrimaryExpression
{ after(grammarAccess.getFeatureCallAccess().getCallablePrimaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getGroup_1_1()); }
(rule__FeatureCall__Group_1_1__0)?
{ after(grammarAccess.getFeatureCallAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FeatureCall__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_1_1__0__Impl
	rule__FeatureCall__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getFeatureCallTargetAction_1_1_0()); }
(

)
{ after(grammarAccess.getFeatureCallAccess().getFeatureCallTargetAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureCall__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFeatureCallAccess().getPartsAssignment_1_1_1()); }
(rule__FeatureCall__PartsAssignment_1_1_1)
{ after(grammarAccess.getFeatureCallAccess().getPartsAssignment_1_1_1()); }
)
(
{ before(grammarAccess.getFeatureCallAccess().getPartsAssignment_1_1_1()); }
(rule__FeatureCall__PartsAssignment_1_1_1)*
{ after(grammarAccess.getFeatureCallAccess().getPartsAssignment_1_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FeatureReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureReference__Group__0__Impl
	rule__FeatureReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureReferenceAccess().getFullStopKeyword_0()); }

	'.' 

{ after(grammarAccess.getFeatureReferenceAccess().getFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FeatureReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureReferenceAccess().getFeatureNameAssignment_1()); }
(rule__FeatureReference__FeatureNameAssignment_1)
{ after(grammarAccess.getFeatureReferenceAccess().getFeatureNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayElementReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayElementReference__Group__0__Impl
	rule__ArrayElementReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getArrayElementReferenceAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayElementReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayElementReference__Group__1__Impl
	rule__ArrayElementReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getSubscriptsAssignment_1()); }
(rule__ArrayElementReference__SubscriptsAssignment_1)
{ after(grammarAccess.getArrayElementReferenceAccess().getSubscriptsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayElementReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayElementReference__Group__2__Impl
	rule__ArrayElementReference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getGroup_2()); }
(rule__ArrayElementReference__Group_2__0)*
{ after(grammarAccess.getArrayElementReferenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayElementReference__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayElementReference__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayElementReferenceAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayElementReference__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayElementReference__Group_2__0__Impl
	rule__ArrayElementReference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getArrayElementReferenceAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayElementReference__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayElementReference__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getSubscriptsAssignment_2_1()); }
(rule__ArrayElementReference__SubscriptsAssignment_2_1)
{ after(grammarAccess.getArrayElementReferenceAccess().getSubscriptsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__0__Impl
	rule__OperationCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getOperationCallAction_0()); }
(

)
{ after(grammarAccess.getOperationCallAccess().getOperationCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__1__Impl
	rule__OperationCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__2__Impl
	rule__OperationCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_2()); }
(rule__OperationCall__Group_2__0)?
{ after(grammarAccess.getOperationCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OperationCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2__0__Impl
	rule__OperationCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgumentsAssignment_2_0()); }
(rule__OperationCall__ArgumentsAssignment_2_0)
{ after(grammarAccess.getOperationCallAccess().getArgumentsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_2_1()); }
(rule__OperationCall__Group_2_1__0)*
{ after(grammarAccess.getOperationCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2_1__0__Impl
	rule__OperationCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgumentsAssignment_2_1_1()); }
(rule__OperationCall__ArgumentsAssignment_2_1_1)
{ after(grammarAccess.getOperationCallAccess().getArgumentsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__0__Impl
	rule__RealLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getValueAssignment_0()); }
(rule__RealLiteral__ValueAssignment_0)
{ after(grammarAccess.getRealLiteralAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__1__Impl
	rule__RealLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getImaginaryAssignment_1()); }
(rule__RealLiteral__ImaginaryAssignment_1)?
{ after(grammarAccess.getRealLiteralAccess().getImaginaryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getGroup_2()); }
(rule__RealLiteral__Group_2__0)?
{ after(grammarAccess.getRealLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RealLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group_2__0__Impl
	rule__RealLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getRealLiteralAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group_2__1__Impl
	rule__RealLiteral__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getUnitAssignment_2_1()); }
(rule__RealLiteral__UnitAssignment_2_1)
{ after(grammarAccess.getRealLiteralAccess().getUnitAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getRealLiteralAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntegerLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group__0__Impl
	rule__IntegerLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment_0()); }
(rule__IntegerLiteral__ValueAssignment_0)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group__1__Impl
	rule__IntegerLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getImaginaryAssignment_1()); }
(rule__IntegerLiteral__ImaginaryAssignment_1)?
{ after(grammarAccess.getIntegerLiteralAccess().getImaginaryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getGroup_2()); }
(rule__IntegerLiteral__Group_2__0)?
{ after(grammarAccess.getIntegerLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntegerLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group_2__0__Impl
	rule__IntegerLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getIntegerLiteralAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group_2__1__Impl
	rule__IntegerLiteral__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_2_1()); }
(rule__IntegerLiteral__UnitAssignment_2_1)
{ after(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getIntegerLiteralAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifiersAssignment_0()); }
(rule__QualifiedName__IdentifiersAssignment_0)
{ after(grammarAccess.getQualifiedNameAccess().getIdentifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0()); }

	'::' 

{ after(grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifiersAssignment_1_1()); }
(rule__QualifiedName__IdentifiersAssignment_1_1)
{ after(grammarAccess.getQualifiedNameAccess().getIdentifiersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SymbolReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymbolReference__Group__0__Impl
	rule__SymbolReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolReferenceAccess().getGlobalAssignment_0()); }
(rule__SymbolReference__GlobalAssignment_0)?
{ after(grammarAccess.getSymbolReferenceAccess().getGlobalAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymbolReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolReferenceAccess().getNameAssignment_1()); }
(rule__SymbolReference__NameAssignment_1)
{ after(grammarAccess.getSymbolReferenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MatrixConstructionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatrixConstructionOperator__Group__0__Impl
	rule__MatrixConstructionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getMatrixConstructionOperatorAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixConstructionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatrixConstructionOperator__Group__1__Impl
	rule__MatrixConstructionOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsAssignment_1()); }
(rule__MatrixConstructionOperator__ExpressionListsAssignment_1)
{ after(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixConstructionOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatrixConstructionOperator__Group__2__Impl
	rule__MatrixConstructionOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getGroup_2()); }
(rule__MatrixConstructionOperator__Group_2__0)*
{ after(grammarAccess.getMatrixConstructionOperatorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixConstructionOperator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatrixConstructionOperator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getMatrixConstructionOperatorAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MatrixConstructionOperator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatrixConstructionOperator__Group_2__0__Impl
	rule__MatrixConstructionOperator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getSemicolonKeyword_2_0()); }

	';' 

{ after(grammarAccess.getMatrixConstructionOperatorAccess().getSemicolonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatrixConstructionOperator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatrixConstructionOperator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsAssignment_2_1()); }
(rule__MatrixConstructionOperator__ExpressionListsAssignment_2_1)
{ after(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
(rule__ExpressionList__ExpressionsAssignment_0)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
(rule__ExpressionList__ExpressionsAssignment_1_1)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitConstructionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitConstructionOperator__Group__0__Impl
	rule__UnitConstructionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getUnitKeyword_0()); }

	'unit' 

{ after(grammarAccess.getUnitConstructionOperatorAccess().getUnitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitConstructionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitConstructionOperator__Group__1__Impl
	rule__UnitConstructionOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getUnitConstructionOperatorAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitConstructionOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitConstructionOperator__Group__2__Impl
	rule__UnitConstructionOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getUnitExpressionAssignment_2()); }
(rule__UnitConstructionOperator__UnitExpressionAssignment_2)
{ after(grammarAccess.getUnitConstructionOperatorAccess().getUnitExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitConstructionOperator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitConstructionOperator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getUnitConstructionOperatorAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); }
(rule__ParenthesizedExpression__ExpressionAssignment_1)
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BeginExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeginExpression__Group__0__Impl
	rule__BeginExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BeginExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeginExpressionAccess().getBeginExpressionAction_0()); }
(

)
{ after(grammarAccess.getBeginExpressionAccess().getBeginExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BeginExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeginExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BeginExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeginExpressionAccess().getBeginKeyword_1()); }

	'begin' 

{ after(grammarAccess.getBeginExpressionAccess().getBeginKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndExpression__Group__0__Impl
	rule__EndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndExpressionAccess().getEndExpressionAction_0()); }
(

)
{ after(grammarAccess.getEndExpressionAccess().getEndExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndExpressionAccess().getEndKeyword_1()); }

	'end' 

{ after(grammarAccess.getEndExpressionAccess().getEndKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_1__0__Impl
	rule__UnitExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getEvalKeyword_1_0()); }

	'eval' 

{ after(grammarAccess.getUnitExpressionAccess().getEvalKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getExpressionAssignment_1_1()); }
(rule__UnitExpression__ExpressionAssignment_1_1)
{ after(grammarAccess.getUnitExpressionAccess().getExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_2__0__Impl
	rule__UnitExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getNumeratorAssignment_2_0()); }
(rule__UnitExpression__NumeratorAssignment_2_0)
{ after(grammarAccess.getUnitExpressionAccess().getNumeratorAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getGroup_2_1()); }
(rule__UnitExpression__Group_2_1__0)?
{ after(grammarAccess.getUnitExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_2_1__0__Impl
	rule__UnitExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getSolidusKeyword_2_1_0()); }

	'/' 

{ after(grammarAccess.getUnitExpressionAccess().getSolidusKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getDenominatorAssignment_2_1_1()); }
(rule__UnitExpression__DenominatorAssignment_2_1_1)
{ after(grammarAccess.getUnitExpressionAccess().getDenominatorAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionNumerator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1__0__Impl
	rule__UnitExpressionNumerator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_0()); }
(rule__UnitExpressionNumerator__FactorsAssignment_1_0)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionNumerator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1_1()); }
(rule__UnitExpressionNumerator__Group_1_1__0)*
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionNumerator__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1_1__0__Impl
	rule__UnitExpressionNumerator__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getUnitExpressionNumeratorAccess().getAsteriskKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionNumerator__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionNumerator__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_1_1()); }
(rule__UnitExpressionNumerator__FactorsAssignment_1_1_1)
{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionDenominator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__0__Impl
	rule__UnitExpressionDenominator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getUnitExpressionDenominatorAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__1__Impl
	rule__UnitExpressionDenominator__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_1()); }
(rule__UnitExpressionDenominator__FactorsAssignment_1_1)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__2__Impl
	rule__UnitExpressionDenominator__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1_2()); }
(rule__UnitExpressionDenominator__Group_1_2__0)*
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getUnitExpressionDenominatorAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnitExpressionDenominator__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1_2__0__Impl
	rule__UnitExpressionDenominator__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getAsteriskKeyword_1_2_0()); }

	'*' 

{ after(grammarAccess.getUnitExpressionDenominatorAccess().getAsteriskKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionDenominator__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionDenominator__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_2_1()); }
(rule__UnitExpressionDenominator__FactorsAssignment_1_2_1)
{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionFactor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group__0__Impl
	rule__UnitExpressionFactor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getOperandAssignment_0()); }
(rule__UnitExpressionFactor__OperandAssignment_0)
{ after(grammarAccess.getUnitExpressionFactorAccess().getOperandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionFactor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getGroup_1()); }
(rule__UnitExpressionFactor__Group_1__0)?
{ after(grammarAccess.getUnitExpressionFactorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionFactor__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group_1__0__Impl
	rule__UnitExpressionFactor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getCircumflexAccentKeyword_1_0()); }

	'^' 

{ after(grammarAccess.getUnitExpressionFactorAccess().getCircumflexAccentKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionFactor__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionFactor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getExponentAssignment_1_1()); }
(rule__UnitExpressionFactor__ExponentAssignment_1_1)
{ after(grammarAccess.getUnitExpressionFactorAccess().getExponentAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExpressionExponent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionExponent__Group__0__Impl
	rule__UnitExpressionExponent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getNegativeAssignment_0()); }
(rule__UnitExpressionExponent__NegativeAssignment_0)?
{ after(grammarAccess.getUnitExpressionExponentAccess().getNegativeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExpressionExponent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExpressionExponent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getValueAssignment_1()); }
(rule__UnitExpressionExponent__ValueAssignment_1)
{ after(grammarAccess.getUnitExpressionExponentAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Mscript__PackagesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMscriptAccess().getPackagesPackageDefinitionParserRuleCall_0()); }
	rulePackageDefinition{ after(grammarAccess.getMscriptAccess().getPackagesPackageDefinitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageDefinitionAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDefinition__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDefinitionAccess().getElementsPackageDefinitionElementParserRuleCall_3_0()); }
	rulePackageDefinitionElement{ after(grammarAccess.getPackageDefinitionAccess().getElementsPackageDefinitionElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
	ruleKeywordID{ after(grammarAccess.getEnumerationDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__LiteralsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getLiteralsEnumerationLiteralDeclarationParserRuleCall_3_0_0()); }
	ruleEnumerationLiteralDeclaration{ after(grammarAccess.getEnumerationDefinitionAccess().getLiteralsEnumerationLiteralDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__LiteralsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getLiteralsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0()); }
	ruleEnumerationLiteralDeclaration{ after(grammarAccess.getEnumerationDefinitionAccess().getLiteralsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteralDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameKeywordIDParserRuleCall_0()); }
	ruleKeywordID{ after(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameKeywordIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
	ruleKeywordID{ after(grammarAccess.getTypeAliasDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasDefinition__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasDefinitionAccess().getTypePrimitiveTypeSpecifierParserRuleCall_3_0()); }
	rulePrimitiveTypeSpecifier{ after(grammarAccess.getTypeAliasDefinitionAccess().getTypePrimitiveTypeSpecifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ConstantAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstantConstKeyword_0_1_0()); }
(
{ before(grammarAccess.getVariableDeclarationAccess().getConstantConstKeyword_0_1_0()); }

	'const' 

{ after(grammarAccess.getVariableDeclarationAccess().getConstantConstKeyword_0_1_0()); }
)

{ after(grammarAccess.getVariableDeclarationAccess().getConstantConstKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameKeywordIDParserRuleCall_1_0()); }
	ruleKeywordID{ after(grammarAccess.getVariableDeclarationAccess().getNameKeywordIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeSpecifierParserRuleCall_2_1_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeSpecifierParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__InitialValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getInitialValueExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
	ruleKeywordID{ after(grammarAccess.getRecordDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordDefinition__FieldsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordDefinitionAccess().getFieldsRecordFieldDeclarationParserRuleCall_3_0()); }
	ruleRecordFieldDeclaration{ after(grammarAccess.getRecordDefinitionAccess().getFieldsRecordFieldDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordFieldDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordFieldDeclarationAccess().getNameKeywordIDParserRuleCall_0_0()); }
	ruleKeywordID{ after(grammarAccess.getRecordFieldDeclarationAccess().getNameKeywordIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordFieldDeclaration__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordFieldDeclarationAccess().getTypeDataTypeSpecifierParserRuleCall_2_0()); }
	ruleDataTypeSpecifier{ after(grammarAccess.getRecordFieldDeclarationAccess().getTypeDataTypeSpecifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
	ruleKeywordID{ after(grammarAccess.getFunctionDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParametersAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParametersAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__PreconditionChainAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getPreconditionChainPreconditionChainParserRuleCall_5_1_0()); }
	rulePreconditionChain{ after(grammarAccess.getFunctionDefinitionAccess().getPreconditionChainPreconditionChainParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__BodyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getBodyBlockStatementParserRuleCall_6_0()); }
	ruleBlockStatement{ after(grammarAccess.getFunctionDefinitionAccess().getBodyBlockStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
	ruleKeywordID{ after(grammarAccess.getCheckDefinitionAccess().getNameKeywordIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__ParametersAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getCheckDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__ParametersAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getCheckDefinitionAccess().getParametersParameterDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__PreconditionChainAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getPreconditionChainPreconditionChainParserRuleCall_5_1_0()); }
	rulePreconditionChain{ after(grammarAccess.getCheckDefinitionAccess().getPreconditionChainPreconditionChainParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckDefinition__BodyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckDefinitionAccess().getBodyBlockStatementParserRuleCall_6_0()); }
	ruleBlockStatement{ after(grammarAccess.getCheckDefinitionAccess().getBodyBlockStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getReferenceRefKeyword_0_0()); }
(
{ before(grammarAccess.getParameterDeclarationAccess().getReferenceRefKeyword_0_0()); }

	'ref' 

{ after(grammarAccess.getParameterDeclarationAccess().getReferenceRefKeyword_0_0()); }
)

{ after(grammarAccess.getParameterDeclarationAccess().getReferenceRefKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameKeywordIDParserRuleCall_1_0()); }
	ruleKeywordID{ after(grammarAccess.getParameterDeclarationAccess().getNameKeywordIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeTypeSpecifierParserRuleCall_3_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getParameterDeclarationAccess().getTypeTypeSpecifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreconditionChain__PreconditionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionChainAccess().getPreconditionsFeatureCallParserRuleCall_0_0()); }
	ruleFeatureCall{ after(grammarAccess.getPreconditionChainAccess().getPreconditionsFeatureCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreconditionChain__PreconditionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreconditionChainAccess().getPreconditionsFeatureCallParserRuleCall_1_1_0()); }
	ruleFeatureCall{ after(grammarAccess.getPreconditionChainAccess().getPreconditionsFeatureCallParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getBlockStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionFeatureCallParserRuleCall_0_0()); }
	ruleFeatureCall{ after(grammarAccess.getExpressionStatementAccess().getExpressionFeatureCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__AssignedValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getAssignedValueExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionStatementAccess().getAssignedValueExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__CasesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getCasesIfCaseParserRuleCall_1_0()); }
	ruleIfCase{ after(grammarAccess.getIfStatementAccess().getCasesIfCaseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__CasesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getCasesIfCaseParserRuleCall_2_1_0()); }
	ruleIfCase{ after(grammarAccess.getIfStatementAccess().getCasesIfCaseParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseBodyAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBodyBlockStatementParserRuleCall_3_1_0()); }
	ruleBlockStatement{ after(grammarAccess.getIfStatementAccess().getElseBodyBlockStatementParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfCase__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCaseAccess().getConditionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIfCaseAccess().getConditionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfCase__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfCaseAccess().getBodyBlockStatementParserRuleCall_3_0()); }
	ruleBlockStatement{ after(grammarAccess.getIfCaseAccess().getBodyBlockStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__PredicateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getPredicateExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileStatementAccess().getPredicateExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyBlockStatementParserRuleCall_4_0()); }
	ruleBlockStatement{ after(grammarAccess.getWhileStatementAccess().getBodyBlockStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getBodyBlockStatementParserRuleCall_1_0()); }
	ruleBlockStatement{ after(grammarAccess.getDoWhileStatementAccess().getBodyBlockStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__PredicateAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getPredicateExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getDoWhileStatementAccess().getPredicateExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__ElementNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getElementNameKeywordIDParserRuleCall_2_0()); }
	ruleKeywordID{ after(grammarAccess.getForeachStatementAccess().getElementNameKeywordIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__CollectionExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getCollectionExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getForeachStatementAccess().getCollectionExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForeachStatement__BodyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachStatementAccess().getBodyBlockStatementParserRuleCall_6_0()); }
	ruleBlockStatement{ after(grammarAccess.getForeachStatementAccess().getBodyBlockStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ReturnValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getReturnValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckStatusStatement__KindAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckStatusStatementAccess().getKindCheckStatusKindEnumRuleCall_0_0()); }
	ruleCheckStatusKind{ after(grammarAccess.getCheckStatusStatementAccess().getKindCheckStatusKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CheckStatusStatement__MessageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckStatusStatementAccess().getMessageExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getCheckStatusStatementAccess().getMessageExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__UnitAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getRealTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__DimensionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getRealTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeSpecifier__DimensionsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getRealTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__UnitAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getIntegerTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__DimensionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeSpecifier__DimensionsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getIntegerTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__UnitAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getComplexTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__DimensionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexTypeSpecifier__DimensionsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getComplexTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__UnitAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getGaussianTypeSpecifierAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__DimensionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianTypeSpecifier__DimensionsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getGaussianTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__DimensionsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeSpecifier__DimensionsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getBooleanTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__DimensionsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getStringTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringTypeSpecifier__DimensionsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getStringTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__TypeReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getTypeReferenceSymbolReferenceParserRuleCall_0_0()); }
	ruleSymbolReference{ after(grammarAccess.getNamedTypeSpecifierAccess().getTypeReferenceSymbolReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__DimensionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypeSpecifier__DimensionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0()); }
	ruleArrayDimensionSpecification{ after(grammarAccess.getNamedTypeSpecifierAccess().getDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__UnspecifiedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }

	'?' 

{ after(grammarAccess.getArrayDimensionSpecificationAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }
)

{ after(grammarAccess.getArrayDimensionSpecificationAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__SizeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getSizeExpressionParserRuleCall_1_0_0()); }
	ruleExpression{ after(grammarAccess.getArrayDimensionSpecificationAccess().getSizeExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimensionSpecification__EndIndexAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionSpecificationAccess().getEndIndexExpressionParserRuleCall_1_1_2_0()); }
	ruleExpression{ after(grammarAccess.getArrayDimensionSpecificationAccess().getEndIndexExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__CasesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_1_0()); }
	ruleConditionalExpressionCase{ after(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__CasesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_2_1_0()); }
	ruleConditionalExpressionCase{ after(grammarAccess.getConditionalExpressionAccess().getCasesConditionalExpressionCaseParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__ElseExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getElseExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionAccess().getElseExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__ConditionExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionCaseAccess().getConditionExpressionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpressionCase__ThenExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getConditionalExpressionCaseAccess().getThenExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__EndAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getEndLogicalOrExpressionParserRuleCall_1_2_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getRangeExpressionAccess().getEndLogicalOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__EndAssignment_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getEndLogicalOrExpressionParserRuleCall_1_3_2_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getRangeExpressionAccess().getEndLogicalOrExpressionParserRuleCall_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperandsLogicalAndExpressionParserRuleCall_1_1_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getOperandsLogicalAndExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperandsRelationalExpressionParserRuleCall_1_1_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getOperandsRelationalExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__TypeTestAssignment_1_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeTestIsKeyword_1_1_0_0_0()); }
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeTestIsKeyword_1_1_0_0_0()); }

	'is' 

{ after(grammarAccess.getRelationalExpressionAccess().getTypeTestIsKeyword_1_1_0_0_0()); }
)

{ after(grammarAccess.getRelationalExpressionAccess().getTypeTestIsKeyword_1_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__TypeAssignment_1_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeDataTypeSpecifierParserRuleCall_1_1_0_1_0()); }
	ruleDataTypeSpecifier{ after(grammarAccess.getRelationalExpressionAccess().getTypeDataTypeSpecifierParserRuleCall_1_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_1_0_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightOperandAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightOperandAddSubtractExpressionParserRuleCall_1_1_1_1_0()); }
	ruleAddSubtractExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightOperandAddSubtractExpressionParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpression__RightPartsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionAccess().getRightPartsAddSubtractExpressionPartParserRuleCall_1_1_0()); }
	ruleAddSubtractExpressionPart{ after(grammarAccess.getAddSubtractExpressionAccess().getRightPartsAddSubtractExpressionPartParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpressionPart__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionPartAccess().getOperatorAddSubtractOperatorEnumRuleCall_0_0()); }
	ruleAddSubtractOperator{ after(grammarAccess.getAddSubtractExpressionPartAccess().getOperatorAddSubtractOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubtractExpressionPart__OperandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddSubtractExpressionPartAccess().getOperandMultiplyDivideExpressionParserRuleCall_1_0()); }
	ruleMultiplyDivideExpression{ after(grammarAccess.getAddSubtractExpressionPartAccess().getOperandMultiplyDivideExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpression__RightPartsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionAccess().getRightPartsMultiplyDivideExpressionPartParserRuleCall_1_1_0()); }
	ruleMultiplyDivideExpressionPart{ after(grammarAccess.getMultiplyDivideExpressionAccess().getRightPartsMultiplyDivideExpressionPartParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpressionPart__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperatorMultiplyDivideOperatorEnumRuleCall_0_0()); }
	ruleMultiplyDivideOperator{ after(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperatorMultiplyDivideOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivideExpressionPart__OperandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperandPowerExpressionParserRuleCall_1_0()); }
	rulePowerExpression{ after(grammarAccess.getMultiplyDivideExpressionPartAccess().getOperandPowerExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getOperatorPowerOperatorEnumRuleCall_1_1_0()); }
	rulePowerOperator{ after(grammarAccess.getPowerExpressionAccess().getOperatorPowerOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__ExponentAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getExponentUnaryExpressionParserRuleCall_1_2_0()); }
	ruleUnaryExpression{ after(grammarAccess.getPowerExpressionAccess().getExponentUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandFeatureCallParserRuleCall_1_2_0()); }
	ruleFeatureCall{ after(grammarAccess.getUnaryExpressionAccess().getOperandFeatureCallParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__PartsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getPartsFeatureCallPartParserRuleCall_1_1_1_0()); }
	ruleFeatureCallPart{ after(grammarAccess.getFeatureCallAccess().getPartsFeatureCallPartParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureReference__FeatureNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureReferenceAccess().getFeatureNameAlternatives_1_0()); }
(rule__FeatureReference__FeatureNameAlternatives_1_0)
{ after(grammarAccess.getFeatureReferenceAccess().getFeatureNameAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__SubscriptsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getSubscriptsSubscriptParserRuleCall_1_0()); }
	ruleSubscript{ after(grammarAccess.getArrayElementReferenceAccess().getSubscriptsSubscriptParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayElementReference__SubscriptsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayElementReferenceAccess().getSubscriptsSubscriptParserRuleCall_2_1_0()); }
	ruleSubscript{ after(grammarAccess.getArrayElementReferenceAccess().getSubscriptsSubscriptParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ArgumentsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getOperationCallAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ArgumentsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getOperationCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_0_0()); }
	RULE_REAL{ after(grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ImaginaryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getImaginaryJKeyword_1_0()); }
(
{ before(grammarAccess.getRealLiteralAccess().getImaginaryJKeyword_1_0()); }

	'j' 

{ after(grammarAccess.getRealLiteralAccess().getImaginaryJKeyword_1_0()); }
)

{ after(grammarAccess.getRealLiteralAccess().getImaginaryJKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__UnitAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getRealLiteralAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTEGERTerminalRuleCall_0_0()); }
	RULE_INTEGER{ after(grammarAccess.getIntegerLiteralAccess().getValueINTEGERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ImaginaryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getImaginaryJKeyword_1_0()); }
(
{ before(grammarAccess.getIntegerLiteralAccess().getImaginaryJKeyword_1_0()); }

	'j' 

{ after(grammarAccess.getIntegerLiteralAccess().getImaginaryJKeyword_1_0()); }
)

{ after(grammarAccess.getIntegerLiteralAccess().getImaginaryJKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__UnitAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
	ruleUnitExpression{ after(grammarAccess.getIntegerLiteralAccess().getUnitUnitExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueBooleanKindEnumRuleCall_0()); }
	ruleBooleanKind{ after(grammarAccess.getBooleanLiteralAccess().getValueBooleanKindEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__IdentifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifiersKeywordIDParserRuleCall_0_0()); }
	ruleKeywordID{ after(grammarAccess.getQualifiedNameAccess().getIdentifiersKeywordIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__IdentifiersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIdentifiersKeywordIDParserRuleCall_1_1_0()); }
	ruleKeywordID{ after(grammarAccess.getQualifiedNameAccess().getIdentifiersKeywordIDParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__GlobalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolReferenceAccess().getGlobalColonColonKeyword_0_0()); }
(
{ before(grammarAccess.getSymbolReferenceAccess().getGlobalColonColonKeyword_0_0()); }

	'::' 

{ after(grammarAccess.getSymbolReferenceAccess().getGlobalColonColonKeyword_0_0()); }
)

{ after(grammarAccess.getSymbolReferenceAccess().getGlobalColonColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolReference__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolReferenceAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getSymbolReferenceAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subscript__AllAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubscriptAccess().getAllColonKeyword_0_0()); }
(
{ before(grammarAccess.getSubscriptAccess().getAllColonKeyword_0_0()); }

	':' 

{ after(grammarAccess.getSubscriptAccess().getAllColonKeyword_0_0()); }
)

{ after(grammarAccess.getSubscriptAccess().getAllColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subscript__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubscriptAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getSubscriptAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__ExpressionListsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsExpressionListParserRuleCall_1_0()); }
	ruleExpressionList{ after(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsExpressionListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MatrixConstructionOperator__ExpressionListsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsExpressionListParserRuleCall_2_1_0()); }
	ruleExpressionList{ after(grammarAccess.getMatrixConstructionOperatorAccess().getExpressionListsExpressionListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__UnitExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getUnitExpressionUnitExpressionParserRuleCall_2_0()); }
	ruleUnitExpression{ after(grammarAccess.getUnitConstructionOperatorAccess().getUnitExpressionUnitExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__UnspecifiedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }
(
{ before(grammarAccess.getUnitExpressionAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }

	'?' 

{ after(grammarAccess.getUnitExpressionAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }
)

{ after(grammarAccess.getUnitExpressionAccess().getUnspecifiedQuestionMarkKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__ExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getUnitExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__NumeratorAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getNumeratorUnitExpressionNumeratorParserRuleCall_2_0_0()); }
	ruleUnitExpressionNumerator{ after(grammarAccess.getUnitExpressionAccess().getNumeratorUnitExpressionNumeratorParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpression__DenominatorAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionAccess().getDenominatorUnitExpressionDenominatorParserRuleCall_2_1_1_0()); }
	ruleUnitExpressionDenominator{ after(grammarAccess.getUnitExpressionAccess().getDenominatorUnitExpressionDenominatorParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__OneAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getOneINTEGERTerminalRuleCall_0_0()); }
	RULE_INTEGER{ after(grammarAccess.getUnitExpressionNumeratorAccess().getOneINTEGERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__FactorsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_0_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionNumerator__FactorsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_1_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionNumeratorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__FactorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_0_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__FactorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionDenominator__FactorsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_2_1_0()); }
	ruleUnitExpressionFactor{ after(grammarAccess.getUnitExpressionDenominatorAccess().getFactorsUnitExpressionFactorParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__OperandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getOperandKeywordIDParserRuleCall_0_0()); }
	ruleKeywordID{ after(grammarAccess.getUnitExpressionFactorAccess().getOperandKeywordIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionFactor__ExponentAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionFactorAccess().getExponentUnitExpressionExponentParserRuleCall_1_1_0()); }
	ruleUnitExpressionExponent{ after(grammarAccess.getUnitExpressionFactorAccess().getExponentUnitExpressionExponentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__NegativeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }
)

{ after(grammarAccess.getUnitExpressionExponentAccess().getNegativeHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExpressionExponent__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExpressionExponentAccess().getValueINTEGERTerminalRuleCall_1_0()); }
	RULE_INTEGER{ after(grammarAccess.getUnitExpressionExponentAccess().getValueINTEGERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('_'|'a'..'z'|'A'..'Z') ('0'..'9'|'_'|'a'..'z'|'A'..'Z')*;

RULE_STRING : '"' (~(('\\'|'"'))|'\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v'))* '"';

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?;

RULE_INTEGER : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


