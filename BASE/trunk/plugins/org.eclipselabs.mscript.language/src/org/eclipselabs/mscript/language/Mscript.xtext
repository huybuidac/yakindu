/****************************************************************************
 * Copyright (c) 2010 Andreas Unger and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Andreas Unger - initial API and implementation 
 ****************************************************************************/

grammar org.eclipselabs.mscript.language.Mscript
hidden(WS, ML_COMMENT, SL_COMMENT)

generate ast "http://www.eclipselabs.org/mscript/AST/1.0.0"

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Mscript :
	(packages+=PackageDefinition)*;
	
PackageDefinition :
	'package' name=QualifiedName '{'
		(elements+=PackageDefinitionElement)*
	'}';

PackageDefinitionElement :
	PackageDefinition | EnumerationDefinition | RecordDefinition | FunctionDefinition | VariableDeclaration;

/*
 * Enumeration
 */
 	
EnumerationDefinition :
	'enum' name=KeywordID '{'
		(literals+=EnumerationLiteralDeclaration (',' literals+=EnumerationLiteralDeclaration)*)?
	'}';
	
EnumerationLiteralDeclaration :
	name=KeywordID;

/*
 * Record
 */

RecordDefinition :
	'record' name=KeywordID '{'
		(fields+=RecordFieldDeclaration)*
	'}'; 

RecordFieldDeclaration :
	type=DataTypeSpecifier items+=RecordFieldDeclarationItem (',' items+=RecordFieldDeclarationItem)* ';';
	
RecordFieldDeclarationItem :
	name=KeywordID;

/*
 * Function
 */
 
FunctionDefinition :
	(static?='static')? name=KeywordID '(' (parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)? ')' body=Block;

ParameterDeclaration :
	(modifier=VariableModifier)? (reference?='ref')? type=TypeSpecifier name=KeywordID;

/*
 * Statement
 */

Statement :
	Block |
	FeatureCallStatement |
	IfStatement |
	WhileStatement |
	DoWhileStatement |
	ForeachStatement |
	VariableDeclaration |
	ReturnStatement;
	
Block :
	{Block} '{' (statements+=Statement)* '}';

FeatureCallStatement :
	featureCall=FeatureCall (assignment?='=' expression=Expression)? ';';

IfStatement :
	'if' cases+=IfCase ('elseif' cases+=IfCase)* ('else' elseBody=Block)?;

IfCase :
	condition=Expression body=Block;
	
WhileStatement :
	'while' predicate=Expression body=Block;
	
DoWhileStatement :
	'do' body=Block 'while' predicate=Expression ';';

ForeachStatement :
	'foreach' elementName=KeywordID 'in' collectionExpression=Expression body=Block;

VariableDeclaration :
	(modifier=VariableModifier)? type=TypeSpecifier items+=VariableDeclarationItem (',' items+=VariableDeclarationItem)* ';';

VariableModifier :
	Auto='auto' | Constant='const' | Static='static';
			
VariableDeclarationItem :
	name=KeywordID ('=' initialValue=Expression)?;
	
ReturnStatement :
	'return' value=Expression ';';

/*
 * Data type specifier
 */

TypeSpecifier :
	DataTypeSpecifier | UnitTypeSpecifier;
	
DataTypeSpecifier :
	PrimitiveTypeSpecifier | NamedTypeSpecifier;
	
PrimitiveTypeSpecifier :
	NumericalTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
	
NumericalTypeSpecifier :
	RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier;
	
RealTypeSpecifier :
	{RealTypeSpecifier} 'real' ('(' unit=UnitExpression ')')? /* ('[' dimensions ']')? */;
	
IntegerTypeSpecifier :
	{IntegerTypeSpecifier} 'int' ('(' unit=UnitExpression ')')? /* ('[' dimensions ']')? */;
	
ComplexTypeSpecifier :
	{ComplexTypeSpecifier} 'complex' ('(' unit=UnitExpression ')')? /* ('[' dimensions ']')? */;

GaussianTypeSpecifier :
	{GaussianTypeSpecifier} 'gauss' ('(' unit=UnitExpression ')')? /* ('[' dimensions ']')? */;

BooleanTypeSpecifier :
	{BooleanTypeSpecifier} 'bool' /* ('[' dimensions ']')? */;
	
StringTypeSpecifier :
	{StringTypeSpecifier} 'string' /* ('[' dimensions ']')? */;
	
UnitTypeSpecifier :
	{UnitTypeSpecifier} 'unit';

NamedTypeSpecifier :
	typeReference=SymbolReference /* ('[' dimensions ']')? */;
	
/*
 * Expressions
 */
	
Expression :
	ConditionalExpression | RangeExpression;

ConditionalExpression :
	'if' cases+=ConditionalExpressionCase ('elseif' cases+=ConditionalExpressionCase)* 'else' elseExpression=Expression;
	
ConditionalExpressionCase:
	conditionExpression=Expression 'then' thenExpression=Expression;

RangeExpression returns Expression :
	LogicalOrExpression ({RangeExpression.expressions+=current} ':' expressions+=LogicalOrExpression (':' expressions+=LogicalOrExpression)?)?;

LogicalOrExpression returns Expression :
	LogicalAndExpression ({LogicalOrExpression.operands+=current} ('or' operands+=LogicalAndExpression)+)?;
	
LogicalAndExpression returns Expression :
	LogicalNotExpression ({LogicalAndExpression.operands+=current} ('and' operands+=LogicalNotExpression)+)?;

LogicalNotExpression returns Expression :
	RelationalExpression | {LogicalNotExpression} 'not' operand=RelationalExpression;

RelationalExpression returns Expression :
	AddSubtractExpression ({RelationalExpression.leftOperand=current} (typeTest?='is' type=DataTypeSpecifier | operator=RelationalOperator rightOperand=AddSubtractExpression))?;

enum RelationalOperator :
	LessThan='<' |
	LessThanOrEqualTo='<=' |
	GreaterThan='>' |
	GreaterThanOrEqualTo='>=' |
	EqualTo='==' |
	NotEqualTo='<>';

AddSubtractExpression returns Expression :
	MultiplyDivideExpression ({AddSubtractExpression.operands+=current} (operators+=AddSubtractOperator operands+=MultiplyDivideExpression)+)?;

enum AddSubtractOperator :
	Add='+' |
	Subtract='-';

MultiplyDivideExpression returns Expression :
	PowerExpression ({MultiplyDivideExpression.operands+=current} (operators+=MultiplyDivideOperator operands+=PowerExpression)+)?;

enum MultiplyDivideOperator :
	Multiply='*' |
	Divide='/' |
	ElementWiseMultiply='.*' |
	ElementWiseDivide='./';
	
PowerExpression returns Expression :
	UnaryMinusExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryMinusExpression)?;

enum PowerOperator :
	Power='^' |
	ElementWisePower='.^';
	
UnaryMinusExpression returns Expression :
	FeatureCall | {UnaryMinusExpression} '-' operand=FeatureCall;

FeatureCall returns Expression :
	PrimaryExpression | CallablePrimaryExpression ({FeatureCall.target=current} (parts+=FeatureCallPart)+)?;

FeatureCallPart :
	FeatureReference | ArrayElementReference | OperationCall;
	
FeatureReference :
	'.' featureName=(ID | 'unit');
	
ArrayElementReference :
	'[' subscripts+=Subscript (',' subscripts+=Subscript)* ']';

OperationCall :
	{OperationCall} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')';

CallablePrimaryExpression returns Expression :
	MatrixConstructionOperator |
	SymbolReference |
	ParenthesizedExpression;

PrimaryExpression returns Expression :
	Literal |
	UnitConstructionOperator |
	BeginExpression |
	EndExpression;

Literal :
	NumericalLiteral | BooleanLiteral | StringLiteral;
	
NumericalLiteral :
	RealLiteral | IntegerLiteral;
	
RealLiteral :
	value=REAL (imaginary?='j')? ('(' unit=UnitExpression ')')?;
	
IntegerLiteral :
	value=INTEGER (imaginary?='j')? ('(' unit=UnitExpression ')')?;

BooleanLiteral :
	value=BooleanKind;

enum BooleanKind :
	False='false' | True='true';
	
StringLiteral :
	value=STRING;
	
QualifiedName :
	identifiers+=KeywordID ('::' identifiers+=KeywordID)*;

//	arguments+=Expression ((',' arguments+=Expression)* (',' namedArguments+=NamedArgument)* | 'for' forIndexList=ForIndexList) |
//	namedArguments+=NamedArgument (',' namedArguments+=NamedArgument)*;

//NamedArgument :
//	identifier=ID '=' expression=Expression;

SymbolReference :
	(global?='::')? name=QualifiedName;
	
Subscript :
	ColonSubscript | ExpressionSubscript;

ColonSubscript :
	{ColonSubscript} ':';

ExpressionSubscript :
	expression=Expression;
	
MatrixConstructionOperator :
	'[' expressionLists+=ExpressionList (';' expressionLists+=ExpressionList)* ']';
	
ExpressionList :
	expressions+=Expression (',' expressions+=Expression)*;
	
UnitConstructionOperator :
	'unit' '(' unitExpression=UnitExpression ')';

ParenthesizedExpression :
//	'(' expressionList=OutputExpressionList ')';
	'(' expression=Expression ')';

//OutputExpressionList :
//	expressions+=FirstOutputExpression (expressions+=RightOutputExpression)*;
//
//FirstOutputExpression returns Expression :
//	{EmptyExpression} | Expression;
//
//RightOutputExpression returns Expression :
//	',' {EmptyExpression} | ',' Expression;

BeginExpression :
	{BeginExpression} 'begin';

EndExpression :
	{EndExpression} 'end';
	
//ForIndexList :
//	indices+=ForIndex (',' indices+=ForIndex)*;
//	
//ForIndex :
//	identifier=ID ('in' inExpression=Expression)?;

/*
 * Unit expressions
 */
	
UnitExpression :
	unspecified?='?' | 'eval' expression=Expression  | numerator=UnitExpressionNumerator ('/' denominator=UnitExpressionDenominator)?;

UnitExpressionNumerator :
	one=INTEGER /* must be '1' */ | factors+=UnitExpressionFactor ('*' factors+=UnitExpressionFactor)*;

UnitExpressionDenominator :
	factors+=UnitExpressionFactor | '(' factors+=UnitExpressionFactor ('*' factors+=UnitExpressionFactor)* ')';

UnitExpressionFactor :
	operand=KeywordID ('^' exponent=UnitExpressionExponent)?;

UnitExpressionExponent :
	(negative?='-')? value=INTEGER;

/*
 * Keyword ID
 */
	
KeywordID :
	ID | 'j';

/*
 * Terminals
 */
 
terminal ID :
	('_' | 'a'..'z' | 'A'..'Z') ('0'..'9' | '_' | 'a'..'z' | 'A'..'Z')*;

terminal STRING : 
	'"' (!('\\' | '"') | '\\' ("'" | '"' | '?' | '\\' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v'))* '"';

terminal REAL returns ecore::EDouble :
	('0'..'9')+ '.' ('0'..'9')* (('e' | 'E') ('+'|'-')? ('0'..'9')+)?;

terminal INTEGER returns ecore::ELong :
	('0'..'9')+;

terminal ML_COMMENT :
	'/*' -> '*/';

terminal SL_COMMENT :
	'//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS :
	(' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER :
	.;
