/****************************************************************************
 * Copyright (c) 2010 Andreas Unger and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Andreas Unger - initial API and implementation 
 ****************************************************************************/

grammar org.eclipselabs.mscript.language.Mscript
hidden(WS, ML_COMMENT, SL_COMMENT)

generate ast "http://www.eclipselabs.org/mscript/AST/1.0.0"

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Mscript :
	(packages+=PackageDefinition)*;
	
PackageDefinition :
	'package' name=QualifiedName '{'
		(elements+=PackageDefinitionElement)*
	'}';

PackageDefinitionElement :
	PackageDefinition |
	TypeDefinition |
	VariableDeclaration;
	
TypeDefinition :
	DataTypeDefinition |
	SubroutineDefinition;

/*
 * DataTypeDefinition
 */
 
DataTypeDefinition :
	EnumerationDefinition |
	RecordDefinition |
	TypeAliasDefinition;

/*
 * Enumeration
 */
 	
EnumerationDefinition :
	'enum' name=KeywordID '{'
		(literals+=EnumerationLiteralDeclaration (',' literals+=EnumerationLiteralDeclaration)*)?
	'}';
	
EnumerationLiteralDeclaration :
	name=KeywordID;
	
/*
 * TypeDefinition
 */
 
TypeAliasDefinition :
	'type' name=KeywordID '=' type=PrimitiveTypeSpecifier ';';

/*
 * VariableDeclaration
 */

VariableDeclaration :
	('var'|constant?='const') name=KeywordID (':' type=TypeSpecifier)? ('=' initialValue=Expression)? ';';

/*
 * Record
 */

RecordDefinition :
	'record' name=KeywordID '{'
		(fields+=RecordFieldDeclaration)*
	'}'; 

RecordFieldDeclaration :
	name=KeywordID ':' type=DataTypeSpecifier ';';

/*
 * Subroutines
 */
 
SubroutineDefinition :
	FunctionDefinition | CheckDefinition;
 
FunctionDefinition :
	'func' name=KeywordID '(' (parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)? ')' ('pre' preconditionChain=PreconditionChain)? body=BlockStatement;

CheckDefinition :
	'check' name=KeywordID '(' (parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)? ')' ('pre' preconditionChain=PreconditionChain)? body=BlockStatement;

ParameterDeclaration :
	(reference?='ref')? name=KeywordID ':' type=TypeSpecifier;

PreconditionChain :
	preconditions+=FeatureCall (',' preconditions+=FeatureCall)*;
	
/*
 * Statement
 */

Statement :
	BlockStatement |
	ExpressionStatement |
	IfStatement |
	WhileStatement |
	DoWhileStatement |
	ForStatement |
	ForeachStatement |
	TypeDefinition |
	VariableDeclaration |
	ReturnStatement |
	CheckStatusStatement;
		
BlockStatement :
	{BlockStatement} '{' (statements+=Statement)* '}';

ExpressionStatement :
	expression=Expression ';';

IfStatement :
	'if' cases+=IfCase ('elseif' cases+=IfCase)* ('else' elseBody=BlockStatement)?;

IfCase :
	'(' condition=Expression ')' body=BlockStatement;
	
WhileStatement :
	'while' '(' predicate=Expression ')' body=BlockStatement;
	
DoWhileStatement :
	'do' body=BlockStatement 'while' '(' predicate=Expression ')' ';';

ForStatement :
	'for' '(' (initializers+=ForStatementInitializer (',' initializers+=ForStatementInitializer)*)? ';' (testExpression=Expression)? ';' (countExpressions+=Expression (',' countExpressions+=Expression)*)? ')' body=BlockStatement;
	
ForStatementInitializer :
	('var' variableName=KeywordID '=')? expression=Expression;
	
ForeachStatement :
	'foreach' '(' elementName=KeywordID 'in' collectionExpression=Expression ')' body=BlockStatement;
	
ReturnStatement :
	{ReturnStatement} 'return' (returnValue=Expression)? ';';
	
CheckStatusStatement :
	kind=CheckStatusKind message=Expression ';';
	
enum CheckStatusKind :
	Info='info' |
	Warning='warning' |
	Error='error' |
	Fatal='fatal';

/*
 * Data type specifier
 */

TypeSpecifier :
	DataTypeSpecifier | UnitTypeSpecifier;
	
DataTypeSpecifier :
	PrimitiveTypeSpecifier | NamedTypeSpecifier;
	
PrimitiveTypeSpecifier :
	NumericTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
	
NumericTypeSpecifier :
	RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier;
	
RealTypeSpecifier :
	{RealTypeSpecifier} 'real' ('(' unit=UnitExpression ')')? ('[' dimensions+=ArrayDimensionSpecification (',' dimensions+=ArrayDimensionSpecification)* ']')?;
	
IntegerTypeSpecifier :
	{IntegerTypeSpecifier} 'int' ('(' unit=UnitExpression ')')? ('[' dimensions+=ArrayDimensionSpecification (',' dimensions+=ArrayDimensionSpecification)* ']')?;
	
ComplexTypeSpecifier :
	{ComplexTypeSpecifier} 'complex' ('(' unit=UnitExpression ')')? ('[' dimensions+=ArrayDimensionSpecification (',' dimensions+=ArrayDimensionSpecification)* ']')?;

GaussianTypeSpecifier :
	{GaussianTypeSpecifier} 'gauss' ('(' unit=UnitExpression ')')? ('[' dimensions+=ArrayDimensionSpecification (',' dimensions+=ArrayDimensionSpecification)* ']')?;

BooleanTypeSpecifier :
	{BooleanTypeSpecifier} 'bool' ('[' dimensions+=ArrayDimensionSpecification (',' dimensions+=ArrayDimensionSpecification)* ']')?;
	
StringTypeSpecifier :
	{StringTypeSpecifier} 'string' ('[' dimensions+=ArrayDimensionSpecification (',' dimensions+=ArrayDimensionSpecification)* ']')?;
	
NamedTypeSpecifier :
	typeReference=SymbolReference ('[' dimensions+=ArrayDimensionSpecification (',' dimensions+=ArrayDimensionSpecification)* ']')?;
	
ArrayDimensionSpecification :
	unspecified?='?' | size=Expression;
	
UnitTypeSpecifier :
	{UnitTypeSpecifier} 'unit';

/*
 * Expressions
 */

Expression :
	AssignmentExpression;
	
AssignmentExpression returns Expression :
	RangeExpression ({AssignmentExpression.leftHandSide=current} operator=AssignmentOperator rightHandSide=Expression)?;
	
enum AssignmentOperator :
	Assignment='=' |
	AdditionAssignment='+=' |
	SubtractionAssignment='-=' |
	MultiplicationAssignment='*=' |
	DivisionAssignment='/=';
	
RangeExpression returns Expression :
	ConditionalExpression ({RangeExpression.begin=current} ':' end=ConditionalExpression ({RangeExpression.increment=current} ':' end=ConditionalExpression)?)?;

ConditionalExpression returns Expression :
	LogicalOrExpression ({ConditionalExpression.condition=current} '?' thenExpression=LogicalOrExpression ':' elseExpression=LogicalOrExpression)?;

LogicalOrExpression returns Expression :
	LogicalAndExpression ({LogicalOrExpression.operands+=current} ('||' operands+=LogicalAndExpression)+)?;
	
LogicalAndExpression returns Expression :
	EqualityExpression ({LogicalAndExpression.operands+=current} ('&&' operands+=EqualityExpression)+)?;

EqualityExpression returns Expression :
	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator rightOperand=RelationalExpression)?;

enum EqualityOperator :
	EqualTo='==' |
	NotEqualTo='!=';
	
RelationalExpression returns Expression :
	AdditiveExpression ({RelationalExpression.leftOperand=current} (typeTest?='is' type=DataTypeSpecifier | operator=RelationalOperator rightOperand=AdditiveExpression))?;

enum RelationalOperator :
	LessThan='<' |
	LessThanOrEqualTo='<=' |
	GreaterThan='>' |
	GreaterThanOrEqualTo='>=';

AdditiveExpression returns Expression :
	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} (rightParts+=AdditiveExpressionPart)+)?;

AdditiveExpressionPart :
	operator=AdditiveOperator operand=MultiplicativeExpression;

enum AdditiveOperator :
	Addition='+' |
	Subtraction='-';

MultiplicativeExpression returns Expression :
	PowerExpression ({MultiplicativeExpression.leftOperand=current} (rightParts+=MultiplicativeExpressionPart)+)?;

MultiplicativeExpressionPart :
	operator=MultiplicativeOperator operand=PowerExpression;
	
enum MultiplicativeOperator :
	Multiplication='*' |
	Division='/' |
	ElementWiseMultiplication='.*' |
	ElementWiseDivision='./';
	
PowerExpression returns Expression :
	UnaryExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?;

enum PowerOperator :
	Power='^' |
	ElementWisePower='.^';
	
UnaryExpression returns Expression :
	PostfixExpression | {UnaryExpression} operator=UnaryOperator operand=FeatureCall;
	
enum UnaryOperator :
	Minus='-' |
	LogicalNot='!' |
	Increment='++' |
	Decrement='--';
	
PostfixExpression returns Expression :
	FeatureCall ({PostfixExpression.operand=current} operator=PostfixOperator)?;

enum PostfixOperator :
	Increment='++' |
	Decrement='--';

FeatureCall returns Expression :
	PrimaryExpression | CallablePrimaryExpression ({FeatureCall.target=current} (parts+=FeatureCallPart)+)?;

FeatureCallPart :
	FeatureReference | ArrayElementReference | OperationCall;
	
FeatureReference :
	'.' featureName=(ID | 'unit');
	
ArrayElementReference :
	'[' subscripts+=Subscript (',' subscripts+=Subscript)* ']';

OperationCall :
	{OperationCall} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')';

CallablePrimaryExpression returns Expression :
	MatrixConstructionOperator |
	SymbolReference |
	ParenthesizedExpression;

PrimaryExpression returns Expression :
	Literal |
	UnitConstructionOperator |
	BeginExpression |
	EndExpression;

Literal :
	NumericLiteral | BooleanLiteral | StringLiteral;
	
NumericLiteral :
	RealLiteral | IntegerLiteral;
	
RealLiteral :
	value=REAL (imaginary?='j')? ('(' unit=UnitExpression ')')?;
	
IntegerLiteral :
	value=INTEGER (imaginary?='j')? ('(' unit=UnitExpression ')')?;

BooleanLiteral :
	value=BooleanKind;

enum BooleanKind :
	False='false' | True='true';
	
StringLiteral :
	value=STRING;
	
QualifiedName :
	identifiers+=KeywordID ('::' identifiers+=KeywordID)*;

SymbolReference :
	(global?='::')? name=QualifiedName;
	
Subscript :
	all?=':' | expression=Expression;

MatrixConstructionOperator :
	'[' expressionLists+=ExpressionList (';' expressionLists+=ExpressionList)* ']';
	
ExpressionList :
	expressions+=Expression (',' expressions+=Expression)*;
	
UnitConstructionOperator :
	'unit' '(' unitExpression=UnitExpression ')';

ParenthesizedExpression :
	'(' expression=Expression ')';

BeginExpression :
	{BeginExpression} 'begin';

EndExpression :
	{EndExpression} 'end';
	
/*
 * Unit expressions
 */
	
UnitExpression :
	unspecified?='?' | 'eval' expression=Expression  | numerator=UnitExpressionNumerator ('/' denominator=UnitExpressionDenominator)?;

UnitExpressionNumerator :
	one=INTEGER /* must be '1' */ | factors+=UnitExpressionFactor ('*' factors+=UnitExpressionFactor)*;

UnitExpressionDenominator :
	factors+=UnitExpressionFactor | '(' factors+=UnitExpressionFactor ('*' factors+=UnitExpressionFactor)* ')';

UnitExpressionFactor :
	operand=KeywordID ('^' exponent=UnitExpressionExponent)?;

UnitExpressionExponent :
	(negative?='-')? value=INTEGER;

/*
 * Keyword ID
 */
	
KeywordID :
	ID | 'j';

/*
 * Terminals
 */
 
terminal ID :
	('_' | 'a'..'z' | 'A'..'Z') ('0'..'9' | '_' | 'a'..'z' | 'A'..'Z')*;

terminal STRING : 
	'"' (!('\\' | '"') | '\\' ("'" | '"' | '?' | '\\' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v'))* '"';

terminal REAL returns ecore::EDouble :
	('0'..'9')+ '.' ('0'..'9')* (('e' | 'E') ('+'|'-')? ('0'..'9')+)?;

terminal INTEGER returns ecore::ELong :
	('0'..'9')+;

terminal ML_COMMENT :
	'/*' -> '*/';

terminal SL_COMMENT :
	'//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS :
	(' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER :
	.;
