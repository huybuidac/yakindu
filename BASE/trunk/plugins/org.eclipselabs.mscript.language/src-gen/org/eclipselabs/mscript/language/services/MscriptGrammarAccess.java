/*
* generated by Xtext
*/

package org.eclipselabs.mscript.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MscriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mscript");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesPackageDefinitionParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//Mscript:
		//	packages+=PackageDefinition*;
		public ParserRule getRule() { return rule; }

		//packages+=PackageDefinition*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//PackageDefinition
		public RuleCall getPackagesPackageDefinitionParserRuleCall_0() { return cPackagesPackageDefinitionParserRuleCall_0; }
	}

	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPackageDefinitionElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDefinition:
		//	"package" name=QualifiedName "{" elements+=PackageDefinitionElement* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" elements+=PackageDefinitionElement* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=PackageDefinitionElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//PackageDefinitionElement
		public RuleCall getElementsPackageDefinitionElementParserRuleCall_3_0() { return cElementsPackageDefinitionElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PackageDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDefinitionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PackageDefinitionElement:
		//	PackageDefinition | TypeDefinition | VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//PackageDefinition | TypeDefinition | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_0() { return cPackageDefinitionParserRuleCall_0; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_1() { return cTypeDefinitionParserRuleCall_1; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_2() { return cVariableDeclarationParserRuleCall_2; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubroutineDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDefinition:
		//	DataTypeDefinition | SubroutineDefinition;
		public ParserRule getRule() { return rule; }

		//DataTypeDefinition | SubroutineDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataTypeDefinition
		public RuleCall getDataTypeDefinitionParserRuleCall_0() { return cDataTypeDefinitionParserRuleCall_0; }

		//SubroutineDefinition
		public RuleCall getSubroutineDefinitionParserRuleCall_1() { return cSubroutineDefinitionParserRuleCall_1; }
	}

	public class DataTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeAliasDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		// * DataTypeDefinition
		// * /DataTypeDefinition:
		//	EnumerationDefinition | RecordDefinition | TypeAliasDefinition;
		public ParserRule getRule() { return rule; }

		//EnumerationDefinition | RecordDefinition | TypeAliasDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumerationDefinition
		public RuleCall getEnumerationDefinitionParserRuleCall_0() { return cEnumerationDefinitionParserRuleCall_0; }

		//RecordDefinition
		public RuleCall getRecordDefinitionParserRuleCall_1() { return cRecordDefinitionParserRuleCall_1; }

		//TypeAliasDefinition
		public RuleCall getTypeAliasDefinitionParserRuleCall_2() { return cTypeAliasDefinitionParserRuleCall_2; }
	}

	public class EnumerationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsEnumerationLiteralDeclarationParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLiteralsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cLiteralsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Enumeration
		// * /EnumerationDefinition:
		//	"enum" name=KeywordID "{" (literals+=EnumerationLiteralDeclaration ("," literals+=EnumerationLiteralDeclaration)*)?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"enum" name=KeywordID "{" (literals+=EnumerationLiteralDeclaration ("," literals+=EnumerationLiteralDeclaration)*)? "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=KeywordID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_1_0() { return cNameKeywordIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(literals+=EnumerationLiteralDeclaration ("," literals+=EnumerationLiteralDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//literals+=EnumerationLiteralDeclaration
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }

		//EnumerationLiteralDeclaration
		public RuleCall getLiteralsEnumerationLiteralDeclarationParserRuleCall_3_0_0() { return cLiteralsEnumerationLiteralDeclarationParserRuleCall_3_0_0; }

		//("," literals+=EnumerationLiteralDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//literals+=EnumerationLiteralDeclaration
		public Assignment getLiteralsAssignment_3_1_1() { return cLiteralsAssignment_3_1_1; }

		//EnumerationLiteralDeclaration
		public RuleCall getLiteralsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0() { return cLiteralsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumerationLiteralDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteralDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteralDeclaration:
		//	name=KeywordID;
		public ParserRule getRule() { return rule; }

		//name=KeywordID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_0() { return cNameKeywordIDParserRuleCall_0; }
	}

	public class TypeAliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeAliasDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypePrimitiveTypeSpecifierParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * TypeDefinition
		// * /TypeAliasDefinition:
		//	"type" name=KeywordID "=" type=PrimitiveTypeSpecifier ";";
		public ParserRule getRule() { return rule; }

		//"type" name=KeywordID "=" type=PrimitiveTypeSpecifier ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=KeywordID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_1_0() { return cNameKeywordIDParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//type=PrimitiveTypeSpecifier
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//PrimitiveTypeSpecifier
		public RuleCall getTypePrimitiveTypeSpecifierParserRuleCall_3_0() { return cTypePrimitiveTypeSpecifierParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cConstantAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cConstantConstKeyword_0_1_0 = (Keyword)cConstantAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * VariableDeclaration
		// * /VariableDeclaration:
		//	("var" | constant?="const") name=KeywordID (":" type=TypeSpecifier)? ("=" initialValue=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//("var" | constant?="const") name=KeywordID (":" type=TypeSpecifier)? ("=" initialValue=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//"var" | constant?="const"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"var"
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }

		//constant?="const"
		public Assignment getConstantAssignment_0_1() { return cConstantAssignment_0_1; }

		//"const"
		public Keyword getConstantConstKeyword_0_1_0() { return cConstantConstKeyword_0_1_0; }

		//name=KeywordID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_1_0() { return cNameKeywordIDParserRuleCall_1_0; }

		//(":" type=TypeSpecifier)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=TypeSpecifier
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_2_1_0() { return cTypeTypeSpecifierParserRuleCall_2_1_0; }

		//("=" initialValue=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_3_1_0() { return cInitialValueExpressionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RecordDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsRecordFieldDeclarationParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Record
		// * /RecordDefinition:
		//	"record" name=KeywordID "{" fields+=RecordFieldDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"record" name=KeywordID "{" fields+=RecordFieldDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"record"
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//name=KeywordID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_1_0() { return cNameKeywordIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=RecordFieldDeclaration*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//RecordFieldDeclaration
		public RuleCall getFieldsRecordFieldDeclarationParserRuleCall_3_0() { return cFieldsRecordFieldDeclarationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RecordFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameKeywordIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeSpecifierParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RecordFieldDeclaration:
		//	name=KeywordID ":" type=DataTypeSpecifier ";";
		public ParserRule getRule() { return rule; }

		//name=KeywordID ":" type=DataTypeSpecifier ";"
		public Group getGroup() { return cGroup; }

		//name=KeywordID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_0_0() { return cNameKeywordIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DataTypeSpecifier
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DataTypeSpecifier
		public RuleCall getTypeDataTypeSpecifierParserRuleCall_2_0() { return cTypeDataTypeSpecifierParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SubroutineDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubroutineDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Subroutines
		// * /SubroutineDefinition:
		//	FunctionDefinition | CheckDefinition;
		public ParserRule getRule() { return rule; }

		//FunctionDefinition | CheckDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_0() { return cFunctionDefinitionParserRuleCall_0; }

		//CheckDefinition
		public RuleCall getCheckDefinitionParserRuleCall_1() { return cCheckDefinitionParserRuleCall_1; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPreKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPreconditionChainAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPreconditionChainPreconditionChainParserRuleCall_5_1_0 = (RuleCall)cPreconditionChainAssignment_5_1.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//FunctionDefinition:
		//	"func" name=KeywordID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")" ("pre"
		//	preconditionChain=PreconditionChain)? body=Block;
		public ParserRule getRule() { return rule; }

		//"func" name=KeywordID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")" ("pre"
		//preconditionChain=PreconditionChain)? body=Block
		public Group getGroup() { return cGroup; }

		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }

		//name=KeywordID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_1_0() { return cNameKeywordIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_3_0_0() { return cParametersParameterDeclarationParserRuleCall_3_0_0; }

		//("," parameters+=ParameterDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_3_1_1_0() { return cParametersParameterDeclarationParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("pre" preconditionChain=PreconditionChain)?
		public Group getGroup_5() { return cGroup_5; }

		//"pre"
		public Keyword getPreKeyword_5_0() { return cPreKeyword_5_0; }

		//preconditionChain=PreconditionChain
		public Assignment getPreconditionChainAssignment_5_1() { return cPreconditionChainAssignment_5_1; }

		//PreconditionChain
		public RuleCall getPreconditionChainPreconditionChainParserRuleCall_5_1_0() { return cPreconditionChainPreconditionChainParserRuleCall_5_1_0; }

		//body=Block
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_6_0() { return cBodyBlockParserRuleCall_6_0; }
	}

	public class CheckDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPreKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPreconditionChainAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPreconditionChainPreconditionChainParserRuleCall_5_1_0 = (RuleCall)cPreconditionChainAssignment_5_1.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBlockParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//CheckDefinition:
		//	"check" name=KeywordID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")" ("pre"
		//	preconditionChain=PreconditionChain)? body=Block;
		public ParserRule getRule() { return rule; }

		//"check" name=KeywordID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")" ("pre"
		//preconditionChain=PreconditionChain)? body=Block
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//name=KeywordID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_1_0() { return cNameKeywordIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_3_0_0() { return cParametersParameterDeclarationParserRuleCall_3_0_0; }

		//("," parameters+=ParameterDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_3_1_1_0() { return cParametersParameterDeclarationParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("pre" preconditionChain=PreconditionChain)?
		public Group getGroup_5() { return cGroup_5; }

		//"pre"
		public Keyword getPreKeyword_5_0() { return cPreKeyword_5_0; }

		//preconditionChain=PreconditionChain
		public Assignment getPreconditionChainAssignment_5_1() { return cPreconditionChainAssignment_5_1; }

		//PreconditionChain
		public RuleCall getPreconditionChainPreconditionChainParserRuleCall_5_1_0() { return cPreconditionChainPreconditionChainParserRuleCall_5_1_0; }

		//body=Block
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_6_0() { return cBodyBlockParserRuleCall_6_0; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReferenceRefKeyword_0_0 = (Keyword)cReferenceAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeywordIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ParameterDeclaration:
		//	reference?="ref"? name=KeywordID ":" type=TypeSpecifier;
		public ParserRule getRule() { return rule; }

		//reference?="ref"? name=KeywordID ":" type=TypeSpecifier
		public Group getGroup() { return cGroup; }

		//reference?="ref"?
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//"ref"
		public Keyword getReferenceRefKeyword_0_0() { return cReferenceRefKeyword_0_0; }

		//name=KeywordID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//KeywordID
		public RuleCall getNameKeywordIDParserRuleCall_1_0() { return cNameKeywordIDParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeSpecifier
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_3_0() { return cTypeTypeSpecifierParserRuleCall_3_0; }
	}

	public class PreconditionChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreconditionChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPreconditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPreconditionsFeatureCallParserRuleCall_0_0 = (RuleCall)cPreconditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPreconditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPreconditionsFeatureCallParserRuleCall_1_1_0 = (RuleCall)cPreconditionsAssignment_1_1.eContents().get(0);
		
		//PreconditionChain:
		//	preconditions+=FeatureCall ("," preconditions+=FeatureCall)*;
		public ParserRule getRule() { return rule; }

		//preconditions+=FeatureCall ("," preconditions+=FeatureCall)*
		public Group getGroup() { return cGroup; }

		//preconditions+=FeatureCall
		public Assignment getPreconditionsAssignment_0() { return cPreconditionsAssignment_0; }

		//FeatureCall
		public RuleCall getPreconditionsFeatureCallParserRuleCall_0_0() { return cPreconditionsFeatureCallParserRuleCall_0_0; }

		//("," preconditions+=FeatureCall)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//preconditions+=FeatureCall
		public Assignment getPreconditionsAssignment_1_1() { return cPreconditionsAssignment_1_1; }

		//FeatureCall
		public RuleCall getPreconditionsFeatureCallParserRuleCall_1_1_0() { return cPreconditionsFeatureCallParserRuleCall_1_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoWhileStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForeachStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTypeDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVariableDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReturnStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCheckStatusStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		/// *
		// * Statement
		// * /Statement:
		//	Block | ExpressionStatement | IfStatement | WhileStatement | DoWhileStatement | ForeachStatement | TypeDefinition |
		//	VariableDeclaration | ReturnStatement | CheckStatusStatement;
		public ParserRule getRule() { return rule; }

		//Block | ExpressionStatement | IfStatement | WhileStatement | DoWhileStatement | ForeachStatement | TypeDefinition |
		//VariableDeclaration | ReturnStatement | CheckStatusStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_1() { return cExpressionStatementParserRuleCall_1; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }

		//DoWhileStatement
		public RuleCall getDoWhileStatementParserRuleCall_4() { return cDoWhileStatementParserRuleCall_4; }

		//ForeachStatement
		public RuleCall getForeachStatementParserRuleCall_5() { return cForeachStatementParserRuleCall_5; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_6() { return cTypeDefinitionParserRuleCall_6; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_7() { return cVariableDeclarationParserRuleCall_7; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_8() { return cReturnStatementParserRuleCall_8; }

		//CheckStatusStatement
		public RuleCall getCheckStatusStatementParserRuleCall_9() { return cCheckStatusStatementParserRuleCall_9; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//{Block} "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionFeatureCallParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignedValueExpressionParserRuleCall_1_1_0 = (RuleCall)cAssignedValueAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionStatement:
		//	expression=FeatureCall ("=" assignedValue=Expression)? ";";
		public ParserRule getRule() { return rule; }

		//expression=FeatureCall ("=" assignedValue=Expression)? ";"
		public Group getGroup() { return cGroup; }

		//expression=FeatureCall
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//FeatureCall
		public RuleCall getExpressionFeatureCallParserRuleCall_0_0() { return cExpressionFeatureCallParserRuleCall_0_0; }

		//("=" assignedValue=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//assignedValue=Expression
		public Assignment getAssignedValueAssignment_1_1() { return cAssignedValueAssignment_1_1; }

		//Expression
		public RuleCall getAssignedValueExpressionParserRuleCall_1_1_0() { return cAssignedValueExpressionParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesIfCaseParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseifKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCasesIfCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseBodyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseBodyBlockParserRuleCall_3_1_0 = (RuleCall)cElseBodyAssignment_3_1.eContents().get(0);
		
		//IfStatement:
		//	"if" cases+=IfCase ("elseif" cases+=IfCase)* ("else" elseBody=Block)?;
		public ParserRule getRule() { return rule; }

		//"if" cases+=IfCase ("elseif" cases+=IfCase)* ("else" elseBody=Block)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cases+=IfCase
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//IfCase
		public RuleCall getCasesIfCaseParserRuleCall_1_0() { return cCasesIfCaseParserRuleCall_1_0; }

		//("elseif" cases+=IfCase)*
		public Group getGroup_2() { return cGroup_2; }

		//"elseif"
		public Keyword getElseifKeyword_2_0() { return cElseifKeyword_2_0; }

		//cases+=IfCase
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//IfCase
		public RuleCall getCasesIfCaseParserRuleCall_2_1_0() { return cCasesIfCaseParserRuleCall_2_1_0; }

		//("else" elseBody=Block)?
		public Group getGroup_3() { return cGroup_3; }

		//"else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }

		//elseBody=Block
		public Assignment getElseBodyAssignment_3_1() { return cElseBodyAssignment_3_1; }

		//Block
		public RuleCall getElseBodyBlockParserRuleCall_3_1_0() { return cElseBodyBlockParserRuleCall_3_1_0; }
	}

	public class IfCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionExpressionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//IfCase:
		//	condition=Expression body=Block;
		public ParserRule getRule() { return rule; }

		//condition=Expression body=Block
		public Group getGroup() { return cGroup; }

		//condition=Expression
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_0_0() { return cConditionExpressionParserRuleCall_0_0; }

		//body=Block
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0() { return cBodyBlockParserRuleCall_1_0; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateExpressionParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//WhileStatement:
		//	"while" predicate=Expression body=Block;
		public ParserRule getRule() { return rule; }

		//"while" predicate=Expression body=Block
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//predicate=Expression
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_1_0() { return cPredicateExpressionParserRuleCall_1_0; }

		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
	}

	public class DoWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DoWhileStatement:
		//	"do" body=Block "while" predicate=Expression ";";
		public ParserRule getRule() { return rule; }

		//"do" body=Block "while" predicate=Expression ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//body=Block
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0() { return cBodyBlockParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//predicate=Expression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_3_0() { return cPredicateExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ForeachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementNameKeywordIDParserRuleCall_1_0 = (RuleCall)cElementNameAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollectionExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCollectionExpressionExpressionParserRuleCall_3_0 = (RuleCall)cCollectionExpressionAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//ForeachStatement:
		//	"foreach" elementName=KeywordID "in" collectionExpression=Expression body=Block;
		public ParserRule getRule() { return rule; }

		//"foreach" elementName=KeywordID "in" collectionExpression=Expression body=Block
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//elementName=KeywordID
		public Assignment getElementNameAssignment_1() { return cElementNameAssignment_1; }

		//KeywordID
		public RuleCall getElementNameKeywordIDParserRuleCall_1_0() { return cElementNameKeywordIDParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//collectionExpression=Expression
		public Assignment getCollectionExpressionAssignment_3() { return cCollectionExpressionAssignment_3; }

		//Expression
		public RuleCall getCollectionExpressionExpressionParserRuleCall_3_0() { return cCollectionExpressionExpressionParserRuleCall_3_0; }

		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnValueExpressionParserRuleCall_2_0 = (RuleCall)cReturnValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//	{ReturnStatement} "return" returnValue=Expression? ";";
		public ParserRule getRule() { return rule; }

		//{ReturnStatement} "return" returnValue=Expression? ";"
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//returnValue=Expression?
		public Assignment getReturnValueAssignment_2() { return cReturnValueAssignment_2; }

		//Expression
		public RuleCall getReturnValueExpressionParserRuleCall_2_0() { return cReturnValueExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class CheckStatusStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckStatusStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindCheckStatusKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageExpressionParserRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CheckStatusStatement:
		//	kind=CheckStatusKind message=Expression ";";
		public ParserRule getRule() { return rule; }

		//kind=CheckStatusKind message=Expression ";"
		public Group getGroup() { return cGroup; }

		//kind=CheckStatusKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//CheckStatusKind
		public RuleCall getKindCheckStatusKindEnumRuleCall_0_0() { return cKindCheckStatusKindEnumRuleCall_0_0; }

		//message=Expression
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//Expression
		public RuleCall getMessageExpressionParserRuleCall_1_0() { return cMessageExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Data type specifier
		// * /TypeSpecifier:
		//	DataTypeSpecifier | UnitTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//DataTypeSpecifier | UnitTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataTypeSpecifier
		public RuleCall getDataTypeSpecifierParserRuleCall_0() { return cDataTypeSpecifierParserRuleCall_0; }

		//UnitTypeSpecifier
		public RuleCall getUnitTypeSpecifierParserRuleCall_1() { return cUnitTypeSpecifierParserRuleCall_1; }
	}

	public class DataTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataTypeSpecifier:
		//	PrimitiveTypeSpecifier | NamedTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//PrimitiveTypeSpecifier | NamedTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveTypeSpecifier
		public RuleCall getPrimitiveTypeSpecifierParserRuleCall_0() { return cPrimitiveTypeSpecifierParserRuleCall_0; }

		//NamedTypeSpecifier
		public RuleCall getNamedTypeSpecifierParserRuleCall_1() { return cNamedTypeSpecifierParserRuleCall_1; }
	}

	public class PrimitiveTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericalTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimitiveTypeSpecifier:
		//	NumericalTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//NumericalTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericalTypeSpecifier
		public RuleCall getNumericalTypeSpecifierParserRuleCall_0() { return cNumericalTypeSpecifierParserRuleCall_0; }

		//BooleanTypeSpecifier
		public RuleCall getBooleanTypeSpecifierParserRuleCall_1() { return cBooleanTypeSpecifierParserRuleCall_1; }

		//StringTypeSpecifier
		public RuleCall getStringTypeSpecifierParserRuleCall_2() { return cStringTypeSpecifierParserRuleCall_2; }
	}

	public class NumericalTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComplexTypeSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGaussianTypeSpecifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumericalTypeSpecifier:
		//	RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealTypeSpecifier
		public RuleCall getRealTypeSpecifierParserRuleCall_0() { return cRealTypeSpecifierParserRuleCall_0; }

		//IntegerTypeSpecifier
		public RuleCall getIntegerTypeSpecifierParserRuleCall_1() { return cIntegerTypeSpecifierParserRuleCall_1; }

		//ComplexTypeSpecifier
		public RuleCall getComplexTypeSpecifierParserRuleCall_2() { return cComplexTypeSpecifierParserRuleCall_2; }

		//GaussianTypeSpecifier
		public RuleCall getGaussianTypeSpecifierParserRuleCall_3() { return cGaussianTypeSpecifierParserRuleCall_3; }
	}

	public class RealTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//RealTypeSpecifier:
		//	{RealTypeSpecifier} "real" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{RealTypeSpecifier} "real" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{RealTypeSpecifier}
		public Action getRealTypeSpecifierAction_0() { return cRealTypeSpecifierAction_0; }

		//"real"
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class IntegerTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//IntegerTypeSpecifier:
		//	{IntegerTypeSpecifier} "int" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{IntegerTypeSpecifier} "int" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{IntegerTypeSpecifier}
		public Action getIntegerTypeSpecifierAction_0() { return cIntegerTypeSpecifierAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class ComplexTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComplexTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComplexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ComplexTypeSpecifier:
		//	{ComplexTypeSpecifier} "complex" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{ComplexTypeSpecifier} "complex" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{ComplexTypeSpecifier}
		public Action getComplexTypeSpecifierAction_0() { return cComplexTypeSpecifierAction_0; }

		//"complex"
		public Keyword getComplexKeyword_1() { return cComplexKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class GaussianTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GaussianTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGaussianTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGaussKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//GaussianTypeSpecifier:
		//	{GaussianTypeSpecifier} "gauss" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{GaussianTypeSpecifier} "gauss" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{GaussianTypeSpecifier}
		public Action getGaussianTypeSpecifierAction_0() { return cGaussianTypeSpecifierAction_0; }

		//"gauss"
		public Keyword getGaussKeyword_1() { return cGaussKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class BooleanTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0 = (RuleCall)cDimensionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0 = (RuleCall)cDimensionsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//BooleanTypeSpecifier:
		//	{BooleanTypeSpecifier} "bool" ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{BooleanTypeSpecifier} "bool" ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{BooleanTypeSpecifier}
		public Action getBooleanTypeSpecifierAction_0() { return cBooleanTypeSpecifierAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_1() { return cDimensionsAssignment_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_2_1() { return cDimensionsAssignment_2_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}

	public class StringTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0 = (RuleCall)cDimensionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0 = (RuleCall)cDimensionsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//StringTypeSpecifier:
		//	{StringTypeSpecifier} "string" ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{StringTypeSpecifier} "string" ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{StringTypeSpecifier}
		public Action getStringTypeSpecifierAction_0() { return cStringTypeSpecifierAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_1() { return cDimensionsAssignment_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_2_1() { return cDimensionsAssignment_2_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}

	public class NamedTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeReferenceSymbolReferenceParserRuleCall_0_0 = (RuleCall)cTypeReferenceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0 = (RuleCall)cDimensionsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NamedTypeSpecifier:
		//	typeReference=SymbolReference ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//typeReference=SymbolReference ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//typeReference=SymbolReference
		public Assignment getTypeReferenceAssignment_0() { return cTypeReferenceAssignment_0; }

		//SymbolReference
		public RuleCall getTypeReferenceSymbolReferenceParserRuleCall_0_0() { return cTypeReferenceSymbolReferenceParserRuleCall_0_0; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_1_2_1() { return cDimensionsAssignment_1_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class ArrayDimensionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayDimensionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnspecifiedAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedQuestionMarkKeyword_0_0 = (Keyword)cUnspecifiedAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSizeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSizeExpressionParserRuleCall_1_0_0 = (RuleCall)cSizeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cArrayDimensionSpecificationBeginIndexAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cEndIndexAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cEndIndexExpressionParserRuleCall_1_1_2_0 = (RuleCall)cEndIndexAssignment_1_1_2.eContents().get(0);
		
		//ArrayDimensionSpecification:
		//	unspecified?="?" | size=Expression ({ArrayDimensionSpecification.beginIndex=current} ".." endIndex=Expression)?;
		public ParserRule getRule() { return rule; }

		//unspecified?="?" | size=Expression ({ArrayDimensionSpecification.beginIndex=current} ".." endIndex=Expression)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//unspecified?="?"
		public Assignment getUnspecifiedAssignment_0() { return cUnspecifiedAssignment_0; }

		//"?"
		public Keyword getUnspecifiedQuestionMarkKeyword_0_0() { return cUnspecifiedQuestionMarkKeyword_0_0; }

		//size=Expression ({ArrayDimensionSpecification.beginIndex=current} ".." endIndex=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//size=Expression
		public Assignment getSizeAssignment_1_0() { return cSizeAssignment_1_0; }

		//Expression
		public RuleCall getSizeExpressionParserRuleCall_1_0_0() { return cSizeExpressionParserRuleCall_1_0_0; }

		//({ArrayDimensionSpecification.beginIndex=current} ".." endIndex=Expression)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ArrayDimensionSpecification.beginIndex=current}
		public Action getArrayDimensionSpecificationBeginIndexAction_1_1_0() { return cArrayDimensionSpecificationBeginIndexAction_1_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1_1() { return cFullStopFullStopKeyword_1_1_1; }

		//endIndex=Expression
		public Assignment getEndIndexAssignment_1_1_2() { return cEndIndexAssignment_1_1_2; }

		//Expression
		public RuleCall getEndIndexExpressionParserRuleCall_1_1_2_0() { return cEndIndexExpressionParserRuleCall_1_1_2_0; }
	}

	public class UnitTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnitTypeSpecifier:
		//	{UnitTypeSpecifier} "unit";
		public ParserRule getRule() { return rule; }

		//{UnitTypeSpecifier} "unit"
		public Group getGroup() { return cGroup; }

		//{UnitTypeSpecifier}
		public Action getUnitTypeSpecifierAction_0() { return cUnitTypeSpecifierAction_0; }

		//"unit"
		public Keyword getUnitKeyword_1() { return cUnitKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Expressions
		// * /Expression:
		//	ConditionalExpression | RangeExpression;
		public ParserRule getRule() { return rule; }

		//ConditionalExpression | RangeExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }

		//RangeExpression
		public RuleCall getRangeExpressionParserRuleCall_1() { return cRangeExpressionParserRuleCall_1; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesConditionalExpressionCaseParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseifKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCasesConditionalExpressionCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Keyword cElseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElseExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseExpressionExpressionParserRuleCall_4_0 = (RuleCall)cElseExpressionAssignment_4.eContents().get(0);
		
		//ConditionalExpression:
		//	"if" cases+=ConditionalExpressionCase ("elseif" cases+=ConditionalExpressionCase)* "else" elseExpression=Expression;
		public ParserRule getRule() { return rule; }

		//"if" cases+=ConditionalExpressionCase ("elseif" cases+=ConditionalExpressionCase)* "else" elseExpression=Expression
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cases+=ConditionalExpressionCase
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//ConditionalExpressionCase
		public RuleCall getCasesConditionalExpressionCaseParserRuleCall_1_0() { return cCasesConditionalExpressionCaseParserRuleCall_1_0; }

		//("elseif" cases+=ConditionalExpressionCase)*
		public Group getGroup_2() { return cGroup_2; }

		//"elseif"
		public Keyword getElseifKeyword_2_0() { return cElseifKeyword_2_0; }

		//cases+=ConditionalExpressionCase
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//ConditionalExpressionCase
		public RuleCall getCasesConditionalExpressionCaseParserRuleCall_2_1_0() { return cCasesConditionalExpressionCaseParserRuleCall_2_1_0; }

		//"else"
		public Keyword getElseKeyword_3() { return cElseKeyword_3; }

		//elseExpression=Expression
		public Assignment getElseExpressionAssignment_4() { return cElseExpressionAssignment_4; }

		//Expression
		public RuleCall getElseExpressionExpressionParserRuleCall_4_0() { return cElseExpressionExpressionParserRuleCall_4_0; }
	}

	public class ConditionalExpressionCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpressionCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionExpressionExpressionParserRuleCall_0_0 = (RuleCall)cConditionExpressionAssignment_0.eContents().get(0);
		private final Keyword cThenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cThenExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenExpressionExpressionParserRuleCall_2_0 = (RuleCall)cThenExpressionAssignment_2.eContents().get(0);
		
		//ConditionalExpressionCase:
		//	conditionExpression=Expression "then" thenExpression=Expression;
		public ParserRule getRule() { return rule; }

		//conditionExpression=Expression "then" thenExpression=Expression
		public Group getGroup() { return cGroup; }

		//conditionExpression=Expression
		public Assignment getConditionExpressionAssignment_0() { return cConditionExpressionAssignment_0; }

		//Expression
		public RuleCall getConditionExpressionExpressionParserRuleCall_0_0() { return cConditionExpressionExpressionParserRuleCall_0_0; }

		//"then"
		public Keyword getThenKeyword_1() { return cThenKeyword_1; }

		//thenExpression=Expression
		public Assignment getThenExpressionAssignment_2() { return cThenExpressionAssignment_2; }

		//Expression
		public RuleCall getThenExpressionExpressionParserRuleCall_2_0() { return cThenExpressionExpressionParserRuleCall_2_0; }
	}

	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRangeExpressionBeginAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Action cRangeExpressionIncrementAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cEndAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cEndLogicalOrExpressionParserRuleCall_1_3_2_0 = (RuleCall)cEndAssignment_1_3_2.eContents().get(0);
		
		//RangeExpression returns Expression:
		//	LogicalOrExpression ({RangeExpression.begin=current} ":" end=LogicalOrExpression ({RangeExpression.increment=current}
		//	":" end=LogicalOrExpression)?)?;
		public ParserRule getRule() { return rule; }

		//LogicalOrExpression ({RangeExpression.begin=current} ":" end=LogicalOrExpression ({RangeExpression.increment=current}
		//":" end=LogicalOrExpression)?)?
		public Group getGroup() { return cGroup; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }

		//({RangeExpression.begin=current} ":" end=LogicalOrExpression ({RangeExpression.increment=current} ":"
		//end=LogicalOrExpression)?)?
		public Group getGroup_1() { return cGroup_1; }

		//{RangeExpression.begin=current}
		public Action getRangeExpressionBeginAction_1_0() { return cRangeExpressionBeginAction_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//end=LogicalOrExpression
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//LogicalOrExpression
		public RuleCall getEndLogicalOrExpressionParserRuleCall_1_2_0() { return cEndLogicalOrExpressionParserRuleCall_1_2_0; }

		//({RangeExpression.increment=current} ":" end=LogicalOrExpression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{RangeExpression.increment=current}
		public Action getRangeExpressionIncrementAction_1_3_0() { return cRangeExpressionIncrementAction_1_3_0; }

		//":"
		public Keyword getColonKeyword_1_3_1() { return cColonKeyword_1_3_1; }

		//end=LogicalOrExpression
		public Assignment getEndAssignment_1_3_2() { return cEndAssignment_1_3_2; }

		//LogicalOrExpression
		public RuleCall getEndLogicalOrExpressionParserRuleCall_1_3_2_0() { return cEndLogicalOrExpressionParserRuleCall_1_3_2_0; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsLogicalAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//LogicalOrExpression returns Expression:
		//	LogicalAndExpression ({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?;
		public ParserRule getRule() { return rule; }

		//LogicalAndExpression ({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?
		public Group getGroup() { return cGroup; }

		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }

		//({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalOrExpression.operands+=current}
		public Action getLogicalOrExpressionOperandsAction_1_0() { return cLogicalOrExpressionOperandsAction_1_0; }

		//("or" operands+=LogicalAndExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"or"
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }

		//operands+=LogicalAndExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//LogicalAndExpression
		public RuleCall getOperandsLogicalAndExpressionParserRuleCall_1_1_1_0() { return cOperandsLogicalAndExpressionParserRuleCall_1_1_1_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsLogicalNotExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//LogicalAndExpression returns Expression:
		//	LogicalNotExpression ({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?;
		public ParserRule getRule() { return rule; }

		//LogicalNotExpression ({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?
		public Group getGroup() { return cGroup; }

		//LogicalNotExpression
		public RuleCall getLogicalNotExpressionParserRuleCall_0() { return cLogicalNotExpressionParserRuleCall_0; }

		//({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalAndExpression.operands+=current}
		public Action getLogicalAndExpressionOperandsAction_1_0() { return cLogicalAndExpressionOperandsAction_1_0; }

		//("and" operands+=LogicalNotExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"and"
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//operands+=LogicalNotExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//LogicalNotExpression
		public RuleCall getOperandsLogicalNotExpressionParserRuleCall_1_1_1_0() { return cOperandsLogicalNotExpressionParserRuleCall_1_1_1_0; }
	}

	public class LogicalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//LogicalNotExpression returns Expression:
		//	RelationalExpression | {LogicalNotExpression} "not" operand=RelationalExpression;
		public ParserRule getRule() { return rule; }

		//RelationalExpression | {LogicalNotExpression} "not" operand=RelationalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//{LogicalNotExpression} "not" operand=RelationalExpression
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalNotExpression}
		public Action getLogicalNotExpressionAction_1_0() { return cLogicalNotExpressionAction_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//operand=RelationalExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//RelationalExpression
		public RuleCall getOperandRelationalExpressionParserRuleCall_1_2_0() { return cOperandRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cTypeTestAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Keyword cTypeTestIsKeyword_1_1_0_0_0 = (Keyword)cTypeTestAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cTypeDataTypeSpecifierParserRuleCall_1_1_0_1_0 = (RuleCall)cTypeAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cRightOperandAddSubtractExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1_1.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//	AddSubtractExpression ({RelationalExpression.leftOperand=current} (typeTest?="is" type=DataTypeSpecifier |
		//	operator=RelationalOperator rightOperand=AddSubtractExpression))?;
		public ParserRule getRule() { return rule; }

		//AddSubtractExpression ({RelationalExpression.leftOperand=current} (typeTest?="is" type=DataTypeSpecifier |
		//operator=RelationalOperator rightOperand=AddSubtractExpression))?
		public Group getGroup() { return cGroup; }

		//AddSubtractExpression
		public RuleCall getAddSubtractExpressionParserRuleCall_0() { return cAddSubtractExpressionParserRuleCall_0; }

		//({RelationalExpression.leftOperand=current} (typeTest?="is" type=DataTypeSpecifier | operator=RelationalOperator
		//rightOperand=AddSubtractExpression))?
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalExpression.leftOperand=current}
		public Action getRelationalExpressionLeftOperandAction_1_0() { return cRelationalExpressionLeftOperandAction_1_0; }

		//typeTest?="is" type=DataTypeSpecifier | operator=RelationalOperator rightOperand=AddSubtractExpression
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//typeTest?="is" type=DataTypeSpecifier
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//typeTest?="is"
		public Assignment getTypeTestAssignment_1_1_0_0() { return cTypeTestAssignment_1_1_0_0; }

		//"is"
		public Keyword getTypeTestIsKeyword_1_1_0_0_0() { return cTypeTestIsKeyword_1_1_0_0_0; }

		//type=DataTypeSpecifier
		public Assignment getTypeAssignment_1_1_0_1() { return cTypeAssignment_1_1_0_1; }

		//DataTypeSpecifier
		public RuleCall getTypeDataTypeSpecifierParserRuleCall_1_1_0_1_0() { return cTypeDataTypeSpecifierParserRuleCall_1_1_0_1_0; }

		//operator=RelationalOperator rightOperand=AddSubtractExpression
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1_1_0() { return cOperatorAssignment_1_1_1_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_1_0_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_1_0_0; }

		//rightOperand=AddSubtractExpression
		public Assignment getRightOperandAssignment_1_1_1_1() { return cRightOperandAssignment_1_1_1_1; }

		//AddSubtractExpression
		public RuleCall getRightOperandAddSubtractExpressionParserRuleCall_1_1_1_1_0() { return cRightOperandAddSubtractExpressionParserRuleCall_1_1_1_1_0; }
	}

	public class AddSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddSubtractExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPartsAddSubtractExpressionPartParserRuleCall_1_1_0 = (RuleCall)cRightPartsAssignment_1_1.eContents().get(0);
		
		//AddSubtractExpression returns Expression:
		//	MultiplyDivideExpression ({AddSubtractExpression.leftOperand=current} rightParts+=AddSubtractExpressionPart+)?;
		public ParserRule getRule() { return rule; }

		//MultiplyDivideExpression ({AddSubtractExpression.leftOperand=current} rightParts+=AddSubtractExpressionPart+)?
		public Group getGroup() { return cGroup; }

		//MultiplyDivideExpression
		public RuleCall getMultiplyDivideExpressionParserRuleCall_0() { return cMultiplyDivideExpressionParserRuleCall_0; }

		//({AddSubtractExpression.leftOperand=current} rightParts+=AddSubtractExpressionPart+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AddSubtractExpression.leftOperand=current}
		public Action getAddSubtractExpressionLeftOperandAction_1_0() { return cAddSubtractExpressionLeftOperandAction_1_0; }

		//rightParts+=AddSubtractExpressionPart+
		public Assignment getRightPartsAssignment_1_1() { return cRightPartsAssignment_1_1; }

		//AddSubtractExpressionPart
		public RuleCall getRightPartsAddSubtractExpressionPartParserRuleCall_1_1_0() { return cRightPartsAddSubtractExpressionPartParserRuleCall_1_1_0; }
	}

	public class AddSubtractExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddSubtractExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAddSubtractOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandMultiplyDivideExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//AddSubtractExpressionPart:
		//	operator=AddSubtractOperator operand=MultiplyDivideExpression;
		public ParserRule getRule() { return rule; }

		//operator=AddSubtractOperator operand=MultiplyDivideExpression
		public Group getGroup() { return cGroup; }

		//operator=AddSubtractOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//AddSubtractOperator
		public RuleCall getOperatorAddSubtractOperatorEnumRuleCall_0_0() { return cOperatorAddSubtractOperatorEnumRuleCall_0_0; }

		//operand=MultiplyDivideExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//MultiplyDivideExpression
		public RuleCall getOperandMultiplyDivideExpressionParserRuleCall_1_0() { return cOperandMultiplyDivideExpressionParserRuleCall_1_0; }
	}

	public class MultiplyDivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyDivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplyDivideExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPartsMultiplyDivideExpressionPartParserRuleCall_1_1_0 = (RuleCall)cRightPartsAssignment_1_1.eContents().get(0);
		
		//MultiplyDivideExpression returns Expression:
		//	PowerExpression ({MultiplyDivideExpression.leftOperand=current} rightParts+=MultiplyDivideExpressionPart+)?;
		public ParserRule getRule() { return rule; }

		//PowerExpression ({MultiplyDivideExpression.leftOperand=current} rightParts+=MultiplyDivideExpressionPart+)?
		public Group getGroup() { return cGroup; }

		//PowerExpression
		public RuleCall getPowerExpressionParserRuleCall_0() { return cPowerExpressionParserRuleCall_0; }

		//({MultiplyDivideExpression.leftOperand=current} rightParts+=MultiplyDivideExpressionPart+)?
		public Group getGroup_1() { return cGroup_1; }

		//{MultiplyDivideExpression.leftOperand=current}
		public Action getMultiplyDivideExpressionLeftOperandAction_1_0() { return cMultiplyDivideExpressionLeftOperandAction_1_0; }

		//rightParts+=MultiplyDivideExpressionPart+
		public Assignment getRightPartsAssignment_1_1() { return cRightPartsAssignment_1_1; }

		//MultiplyDivideExpressionPart
		public RuleCall getRightPartsMultiplyDivideExpressionPartParserRuleCall_1_1_0() { return cRightPartsMultiplyDivideExpressionPartParserRuleCall_1_1_0; }
	}

	public class MultiplyDivideExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyDivideExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorMultiplyDivideOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandPowerExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//MultiplyDivideExpressionPart:
		//	operator=MultiplyDivideOperator operand=PowerExpression;
		public ParserRule getRule() { return rule; }

		//operator=MultiplyDivideOperator operand=PowerExpression
		public Group getGroup() { return cGroup; }

		//operator=MultiplyDivideOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//MultiplyDivideOperator
		public RuleCall getOperatorMultiplyDivideOperatorEnumRuleCall_0_0() { return cOperatorMultiplyDivideOperatorEnumRuleCall_0_0; }

		//operand=PowerExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//PowerExpression
		public RuleCall getOperandPowerExpressionParserRuleCall_1_0() { return cOperandPowerExpressionParserRuleCall_1_0; }
	}

	public class PowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryMinusExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorPowerOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExponentUnaryMinusExpressionParserRuleCall_1_2_0 = (RuleCall)cExponentAssignment_1_2.eContents().get(0);
		
		//PowerExpression returns Expression:
		//	UnaryMinusExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryMinusExpression)?;
		public ParserRule getRule() { return rule; }

		//UnaryMinusExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryMinusExpression)?
		public Group getGroup() { return cGroup; }

		//UnaryMinusExpression
		public RuleCall getUnaryMinusExpressionParserRuleCall_0() { return cUnaryMinusExpressionParserRuleCall_0; }

		//({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryMinusExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{PowerExpression.operand=current}
		public Action getPowerExpressionOperandAction_1_0() { return cPowerExpressionOperandAction_1_0; }

		//operator=PowerOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//PowerOperator
		public RuleCall getOperatorPowerOperatorEnumRuleCall_1_1_0() { return cOperatorPowerOperatorEnumRuleCall_1_1_0; }

		//exponent=UnaryMinusExpression
		public Assignment getExponentAssignment_1_2() { return cExponentAssignment_1_2; }

		//UnaryMinusExpression
		public RuleCall getExponentUnaryMinusExpressionParserRuleCall_1_2_0() { return cExponentUnaryMinusExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryMinusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryMinusExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryMinusExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandFeatureCallParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//UnaryMinusExpression returns Expression:
		//	FeatureCall | {UnaryMinusExpression} "-" operand=FeatureCall;
		public ParserRule getRule() { return rule; }

		//FeatureCall | {UnaryMinusExpression} "-" operand=FeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_0() { return cFeatureCallParserRuleCall_0; }

		//{UnaryMinusExpression} "-" operand=FeatureCall
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryMinusExpression}
		public Action getUnaryMinusExpressionAction_1_0() { return cUnaryMinusExpressionAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//operand=FeatureCall
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//FeatureCall
		public RuleCall getOperandFeatureCallParserRuleCall_1_2_0() { return cOperandFeatureCallParserRuleCall_1_2_0; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCallablePrimaryExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cFeatureCallTargetAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cPartsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPartsFeatureCallPartParserRuleCall_1_1_1_0 = (RuleCall)cPartsAssignment_1_1_1.eContents().get(0);
		
		//FeatureCall returns Expression:
		//	PrimaryExpression | CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)?;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression | CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)?
		public Group getGroup_1() { return cGroup_1; }

		//CallablePrimaryExpression
		public RuleCall getCallablePrimaryExpressionParserRuleCall_1_0() { return cCallablePrimaryExpressionParserRuleCall_1_0; }

		//({FeatureCall.target=current} parts+=FeatureCallPart+)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{FeatureCall.target=current}
		public Action getFeatureCallTargetAction_1_1_0() { return cFeatureCallTargetAction_1_1_0; }

		//parts+=FeatureCallPart+
		public Assignment getPartsAssignment_1_1_1() { return cPartsAssignment_1_1_1; }

		//FeatureCallPart
		public RuleCall getPartsFeatureCallPartParserRuleCall_1_1_1_0() { return cPartsFeatureCallPartParserRuleCall_1_1_1_0; }
	}

	public class FeatureCallPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayElementReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FeatureCallPart:
		//	FeatureReference | ArrayElementReference | OperationCall;
		public ParserRule getRule() { return rule; }

		//FeatureReference | ArrayElementReference | OperationCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureReference
		public RuleCall getFeatureReferenceParserRuleCall_0() { return cFeatureReferenceParserRuleCall_0; }

		//ArrayElementReference
		public RuleCall getArrayElementReferenceParserRuleCall_1() { return cArrayElementReferenceParserRuleCall_1; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_2() { return cOperationCallParserRuleCall_2; }
	}

	public class FeatureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFeatureNameAlternatives_1_0 = (Alternatives)cFeatureNameAssignment_1.eContents().get(0);
		private final RuleCall cFeatureNameIDTerminalRuleCall_1_0_0 = (RuleCall)cFeatureNameAlternatives_1_0.eContents().get(0);
		private final Keyword cFeatureNameUnitKeyword_1_0_1 = (Keyword)cFeatureNameAlternatives_1_0.eContents().get(1);
		
		//FeatureReference:
		//	"." featureName=(ID | "unit");
		public ParserRule getRule() { return rule; }

		//"." featureName=(ID | "unit")
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//featureName=(ID | "unit")
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//ID | "unit"
		public Alternatives getFeatureNameAlternatives_1_0() { return cFeatureNameAlternatives_1_0; }

		//ID
		public RuleCall getFeatureNameIDTerminalRuleCall_1_0_0() { return cFeatureNameIDTerminalRuleCall_1_0_0; }

		//"unit"
		public Keyword getFeatureNameUnitKeyword_1_0_1() { return cFeatureNameUnitKeyword_1_0_1; }
	}

	public class ArrayElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubscriptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubscriptsSubscriptParserRuleCall_1_0 = (RuleCall)cSubscriptsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubscriptsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubscriptsSubscriptParserRuleCall_2_1_0 = (RuleCall)cSubscriptsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayElementReference:
		//	"[" subscripts+=Subscript ("," subscripts+=Subscript)* "]";
		public ParserRule getRule() { return rule; }

		//"[" subscripts+=Subscript ("," subscripts+=Subscript)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//subscripts+=Subscript
		public Assignment getSubscriptsAssignment_1() { return cSubscriptsAssignment_1; }

		//Subscript
		public RuleCall getSubscriptsSubscriptParserRuleCall_1_0() { return cSubscriptsSubscriptParserRuleCall_1_0; }

		//("," subscripts+=Subscript)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//subscripts+=Subscript
		public Assignment getSubscriptsAssignment_2_1() { return cSubscriptsAssignment_2_1; }

		//Subscript
		public RuleCall getSubscriptsSubscriptParserRuleCall_2_1_0() { return cSubscriptsSubscriptParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationCall:
		//	{OperationCall} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{OperationCall} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{OperationCall}
		public Action getOperationCallAction_0() { return cOperationCallAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CallablePrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallablePrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMatrixConstructionOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSymbolReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CallablePrimaryExpression returns Expression:
		//	MatrixConstructionOperator | SymbolReference | ParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//MatrixConstructionOperator | SymbolReference | ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//MatrixConstructionOperator
		public RuleCall getMatrixConstructionOperatorParserRuleCall_0() { return cMatrixConstructionOperatorParserRuleCall_0; }

		//SymbolReference
		public RuleCall getSymbolReferenceParserRuleCall_1() { return cSymbolReferenceParserRuleCall_1; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_2() { return cParenthesizedExpressionParserRuleCall_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitConstructionOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBeginExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEndExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryExpression returns Expression:
		//	Literal | UnitConstructionOperator | BeginExpression | EndExpression;
		public ParserRule getRule() { return rule; }

		//Literal | UnitConstructionOperator | BeginExpression | EndExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//UnitConstructionOperator
		public RuleCall getUnitConstructionOperatorParserRuleCall_1() { return cUnitConstructionOperatorParserRuleCall_1; }

		//BeginExpression
		public RuleCall getBeginExpressionParserRuleCall_2() { return cBeginExpressionParserRuleCall_2; }

		//EndExpression
		public RuleCall getEndExpressionParserRuleCall_3() { return cEndExpressionParserRuleCall_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericalLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	NumericalLiteral | BooleanLiteral | StringLiteral;
		public ParserRule getRule() { return rule; }

		//NumericalLiteral | BooleanLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericalLiteral
		public RuleCall getNumericalLiteralParserRuleCall_0() { return cNumericalLiteralParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
	}

	public class NumericalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericalLiteral:
		//	RealLiteral | IntegerLiteral;
		public ParserRule getRule() { return rule; }

		//RealLiteral | IntegerLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_0() { return cRealLiteralParserRuleCall_0; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueREALTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cImaginaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImaginaryJKeyword_1_0 = (Keyword)cImaginaryAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//RealLiteral:
		//	value=REAL imaginary?="j"? ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//value=REAL imaginary?="j"? ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//value=REAL
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0_0() { return cValueREALTerminalRuleCall_0_0; }

		//imaginary?="j"?
		public Assignment getImaginaryAssignment_1() { return cImaginaryAssignment_1; }

		//"j"
		public Keyword getImaginaryJKeyword_1_0() { return cImaginaryJKeyword_1_0; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTEGERTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cImaginaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImaginaryJKeyword_1_0 = (Keyword)cImaginaryAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//IntegerLiteral:
		//	value=INTEGER imaginary?="j"? ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//value=INTEGER imaginary?="j"? ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//value=INTEGER
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_0_0() { return cValueINTEGERTerminalRuleCall_0_0; }

		//imaginary?="j"?
		public Assignment getImaginaryAssignment_1() { return cImaginaryAssignment_1; }

		//"j"
		public Keyword getImaginaryJKeyword_1_0() { return cImaginaryJKeyword_1_0; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanKindEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BooleanKind;
		public ParserRule getRule() { return rule; }

		//value=BooleanKind
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BooleanKind
		public RuleCall getValueBooleanKindEnumRuleCall_0() { return cValueBooleanKindEnumRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersKeywordIDParserRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersKeywordIDParserRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//QualifiedName:
		//	identifiers+=KeywordID ("::" identifiers+=KeywordID)*;
		public ParserRule getRule() { return rule; }

		//identifiers+=KeywordID ("::" identifiers+=KeywordID)*
		public Group getGroup() { return cGroup; }

		//identifiers+=KeywordID
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//KeywordID
		public RuleCall getIdentifiersKeywordIDParserRuleCall_0_0() { return cIdentifiersKeywordIDParserRuleCall_0_0; }

		//("::" identifiers+=KeywordID)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//identifiers+=KeywordID
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//KeywordID
		public RuleCall getIdentifiersKeywordIDParserRuleCall_1_1_0() { return cIdentifiersKeywordIDParserRuleCall_1_1_0; }
	}

	public class SymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGlobalColonColonKeyword_0_0 = (Keyword)cGlobalAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SymbolReference:
		//	global?="::"? name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//global?="::"? name=QualifiedName
		public Group getGroup() { return cGroup; }

		//global?="::"?
		public Assignment getGlobalAssignment_0() { return cGlobalAssignment_0; }

		//"::"
		public Keyword getGlobalColonColonKeyword_0_0() { return cGlobalColonColonKeyword_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class SubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subscript");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAllAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cAllColonKeyword_0_0 = (Keyword)cAllAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Subscript:
		//	all?=":" | expression=Expression;
		public ParserRule getRule() { return rule; }

		//all?=":" | expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//all?=":"
		public Assignment getAllAssignment_0() { return cAllAssignment_0; }

		//":"
		public Keyword getAllColonKeyword_0_0() { return cAllColonKeyword_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class MatrixConstructionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixConstructionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionListsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionListsExpressionListParserRuleCall_1_0 = (RuleCall)cExpressionListsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionListsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionListsExpressionListParserRuleCall_2_1_0 = (RuleCall)cExpressionListsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MatrixConstructionOperator:
		//	"[" expressionLists+=ExpressionList (";" expressionLists+=ExpressionList)* "]";
		public ParserRule getRule() { return rule; }

		//"[" expressionLists+=ExpressionList (";" expressionLists+=ExpressionList)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expressionLists+=ExpressionList
		public Assignment getExpressionListsAssignment_1() { return cExpressionListsAssignment_1; }

		//ExpressionList
		public RuleCall getExpressionListsExpressionListParserRuleCall_1_0() { return cExpressionListsExpressionListParserRuleCall_1_0; }

		//(";" expressionLists+=ExpressionList)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//expressionLists+=ExpressionList
		public Assignment getExpressionListsAssignment_2_1() { return cExpressionListsAssignment_2_1; }

		//ExpressionList
		public RuleCall getExpressionListsExpressionListParserRuleCall_2_1_0() { return cExpressionListsExpressionListParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	expressions+=Expression ("," expressions+=Expression)*;
		public ParserRule getRule() { return rule; }

		//expressions+=Expression ("," expressions+=Expression)*
		public Group getGroup() { return cGroup; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//("," expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class UnitConstructionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitConstructionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnitExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitExpressionUnitExpressionParserRuleCall_2_0 = (RuleCall)cUnitExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnitConstructionOperator:
		//	"unit" "(" unitExpression=UnitExpression ")";
		public ParserRule getRule() { return rule; }

		//"unit" "(" unitExpression=UnitExpression ")"
		public Group getGroup() { return cGroup; }

		//"unit"
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//unitExpression=UnitExpression
		public Assignment getUnitExpressionAssignment_2() { return cUnitExpressionAssignment_2; }

		//UnitExpression
		public RuleCall getUnitExpressionUnitExpressionParserRuleCall_2_0() { return cUnitExpressionUnitExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression:
		//	"(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class BeginExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeginExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBeginExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BeginExpression:
		//	{BeginExpression} "begin";
		public ParserRule getRule() { return rule; }

		//{BeginExpression} "begin"
		public Group getGroup() { return cGroup; }

		//{BeginExpression}
		public Action getBeginExpressionAction_0() { return cBeginExpressionAction_0; }

		//"begin"
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }
	}

	public class EndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EndExpression:
		//	{EndExpression} "end";
		public ParserRule getRule() { return rule; }

		//{EndExpression} "end"
		public Group getGroup() { return cGroup; }

		//{EndExpression}
		public Action getEndExpressionAction_0() { return cEndExpressionAction_0; }

		//"end"
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
	}

	public class UnitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnspecifiedAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedQuestionMarkKeyword_0_0 = (Keyword)cUnspecifiedAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEvalKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNumeratorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNumeratorUnitExpressionNumeratorParserRuleCall_2_0_0 = (RuleCall)cNumeratorAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSolidusKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDenominatorAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDenominatorUnitExpressionDenominatorParserRuleCall_2_1_1_0 = (RuleCall)cDenominatorAssignment_2_1_1.eContents().get(0);
		
		/// *
		// * Unit expressions
		// * /UnitExpression:
		//	unspecified?="?" | "eval" expression=Expression | numerator=UnitExpressionNumerator ("/"
		//	denominator=UnitExpressionDenominator)?;
		public ParserRule getRule() { return rule; }

		//unspecified?="?" | "eval" expression=Expression | numerator=UnitExpressionNumerator ("/"
		//denominator=UnitExpressionDenominator)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//unspecified?="?"
		public Assignment getUnspecifiedAssignment_0() { return cUnspecifiedAssignment_0; }

		//"?"
		public Keyword getUnspecifiedQuestionMarkKeyword_0_0() { return cUnspecifiedQuestionMarkKeyword_0_0; }

		//"eval" expression=Expression
		public Group getGroup_1() { return cGroup_1; }

		//"eval"
		public Keyword getEvalKeyword_1_0() { return cEvalKeyword_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }

		//numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?
		public Group getGroup_2() { return cGroup_2; }

		//numerator=UnitExpressionNumerator
		public Assignment getNumeratorAssignment_2_0() { return cNumeratorAssignment_2_0; }

		//UnitExpressionNumerator
		public RuleCall getNumeratorUnitExpressionNumeratorParserRuleCall_2_0_0() { return cNumeratorUnitExpressionNumeratorParserRuleCall_2_0_0; }

		//("/" denominator=UnitExpressionDenominator)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"/"
		public Keyword getSolidusKeyword_2_1_0() { return cSolidusKeyword_2_1_0; }

		//denominator=UnitExpressionDenominator
		public Assignment getDenominatorAssignment_2_1_1() { return cDenominatorAssignment_2_1_1; }

		//UnitExpressionDenominator
		public RuleCall getDenominatorUnitExpressionDenominatorParserRuleCall_2_1_1_0() { return cDenominatorUnitExpressionDenominatorParserRuleCall_2_1_1_0; }
	}

	public class UnitExpressionNumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionNumerator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOneAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOneINTEGERTerminalRuleCall_0_0 = (RuleCall)cOneAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFactorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_0_0 = (RuleCall)cFactorsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_1_1_0 = (RuleCall)cFactorsAssignment_1_1_1.eContents().get(0);
		
		//UnitExpressionNumerator:
		//	one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*;
		public ParserRule getRule() { return rule; }

		//one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//one=INTEGER
		public Assignment getOneAssignment_0() { return cOneAssignment_0; }

		//INTEGER
		public RuleCall getOneINTEGERTerminalRuleCall_0_0() { return cOneINTEGERTerminalRuleCall_0_0; }

		//factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1() { return cGroup_1; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_0() { return cFactorsAssignment_1_0; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_0_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_0_0; }

		//("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_1_1() { return cFactorsAssignment_1_1_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_1_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_1_1_0; }
	}

	public class UnitExpressionDenominatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionDenominator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_1_0 = (RuleCall)cFactorsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFactorsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_2_1_0 = (RuleCall)cFactorsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//UnitExpressionDenominator:
		//	factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")";
		public ParserRule getRule() { return rule; }

		//factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_0_0() { return cFactorsUnitExpressionFactorParserRuleCall_0_0; }

		//"(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_1() { return cFactorsAssignment_1_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_1_0; }

		//("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"*"
		public Keyword getAsteriskKeyword_1_2_0() { return cAsteriskKeyword_1_2_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_2_1() { return cFactorsAssignment_1_2_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_2_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class UnitExpressionFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandKeywordIDParserRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExponentUnitExpressionExponentParserRuleCall_1_1_0 = (RuleCall)cExponentAssignment_1_1.eContents().get(0);
		
		//UnitExpressionFactor:
		//	operand=KeywordID ("^" exponent=UnitExpressionExponent)?;
		public ParserRule getRule() { return rule; }

		//operand=KeywordID ("^" exponent=UnitExpressionExponent)?
		public Group getGroup() { return cGroup; }

		//operand=KeywordID
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }

		//KeywordID
		public RuleCall getOperandKeywordIDParserRuleCall_0_0() { return cOperandKeywordIDParserRuleCall_0_0; }

		//("^" exponent=UnitExpressionExponent)?
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//exponent=UnitExpressionExponent
		public Assignment getExponentAssignment_1_1() { return cExponentAssignment_1_1; }

		//UnitExpressionExponent
		public RuleCall getExponentUnitExpressionExponentParserRuleCall_1_1_0() { return cExponentUnitExpressionExponentParserRuleCall_1_1_0; }
	}

	public class UnitExpressionExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionExponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegativeHyphenMinusKeyword_0_0 = (Keyword)cNegativeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UnitExpressionExponent:
		//	negative?="-"? value=INTEGER;
		public ParserRule getRule() { return rule; }

		//negative?="-"? value=INTEGER
		public Group getGroup() { return cGroup; }

		//negative?="-"?
		public Assignment getNegativeAssignment_0() { return cNegativeAssignment_0; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_0_0() { return cNegativeHyphenMinusKeyword_0_0; }

		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
	}

	public class KeywordIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cJKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/// *
		// * Keyword ID
		// * /KeywordID returns ecore::EString:
		//	ID | "j";
		public ParserRule getRule() { return rule; }

		//ID | "j"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"j"
		public Keyword getJKeyword_1() { return cJKeyword_1; }
	}
	
	
	public class CheckStatusKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CheckStatusKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInfoInfoKeyword_0_0 = (Keyword)cInfoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWarningWarningKeyword_1_0 = (Keyword)cWarningEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cErrorErrorKeyword_2_0 = (Keyword)cErrorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFatalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFatalFatalKeyword_3_0 = (Keyword)cFatalEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CheckStatusKind:
		//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
		public EnumRule getRule() { return rule; }

		//Info="info" | Warning="warning" | Error="error" | Fatal="fatal"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Info="info"
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_0() { return cInfoEnumLiteralDeclaration_0; }

		//"info"
		public Keyword getInfoInfoKeyword_0_0() { return cInfoInfoKeyword_0_0; }

		//Warning="warning"
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_1() { return cWarningEnumLiteralDeclaration_1; }

		//"warning"
		public Keyword getWarningWarningKeyword_1_0() { return cWarningWarningKeyword_1_0; }

		//Error="error"
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_2() { return cErrorEnumLiteralDeclaration_2; }

		//"error"
		public Keyword getErrorErrorKeyword_2_0() { return cErrorErrorKeyword_2_0; }

		//Fatal="fatal"
		public EnumLiteralDeclaration getFatalEnumLiteralDeclaration_3() { return cFatalEnumLiteralDeclaration_3; }

		//"fatal"
		public Keyword getFatalFatalKeyword_3_0() { return cFatalFatalKeyword_3_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThanLessThanSignKeyword_0_0 = (Keyword)cLessThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanOrEqualToEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLessThanOrEqualToEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanGreaterThanSignKeyword_2_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanOrEqualToEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterThanOrEqualToEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualToEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualToEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualToEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualToEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualToExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualToEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationalOperator:
		//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=" | EqualTo="==" | NotEqualTo="!=";
		public EnumRule getRule() { return rule; }

		//LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=" | EqualTo="==" | NotEqualTo="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//LessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_0() { return cLessThanEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThanLessThanSignKeyword_0_0() { return cLessThanLessThanSignKeyword_0_0; }

		//LessThanOrEqualTo="<="
		public EnumLiteralDeclaration getLessThanOrEqualToEnumLiteralDeclaration_1() { return cLessThanOrEqualToEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0() { return cLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0; }

		//GreaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_2() { return cGreaterThanEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_2_0() { return cGreaterThanGreaterThanSignKeyword_2_0; }

		//GreaterThanOrEqualTo=">="
		public EnumLiteralDeclaration getGreaterThanOrEqualToEnumLiteralDeclaration_3() { return cGreaterThanOrEqualToEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0; }

		//EqualTo="=="
		public EnumLiteralDeclaration getEqualToEnumLiteralDeclaration_4() { return cEqualToEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEqualToEqualsSignEqualsSignKeyword_4_0() { return cEqualToEqualsSignEqualsSignKeyword_4_0; }

		//NotEqualTo="!="
		public EnumLiteralDeclaration getNotEqualToEnumLiteralDeclaration_5() { return cNotEqualToEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualToExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualToExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class AddSubtractOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AddSubtractOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractHyphenMinusKeyword_1_0 = (Keyword)cSubtractEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AddSubtractOperator:
		//	Add="+" | Subtract="-";
		public EnumRule getRule() { return rule; }

		//Add="+" | Subtract="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }

		//Subtract="-"
		public EnumLiteralDeclaration getSubtractEnumLiteralDeclaration_1() { return cSubtractEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubtractHyphenMinusKeyword_1_0() { return cSubtractHyphenMinusKeyword_1_0; }
	}

	public class MultiplyDivideOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyDivideOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiplyAsteriskKeyword_0_0 = (Keyword)cMultiplyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivideSolidusKeyword_1_0 = (Keyword)cDivideEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cElementWiseMultiplyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cElementWiseMultiplyFullStopAsteriskKeyword_2_0 = (Keyword)cElementWiseMultiplyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cElementWiseDivideEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cElementWiseDivideFullStopSolidusKeyword_3_0 = (Keyword)cElementWiseDivideEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MultiplyDivideOperator:
		//	Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./";
		public EnumRule getRule() { return rule; }

		//Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Multiply="*"
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_0() { return cMultiplyEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_0_0() { return cMultiplyAsteriskKeyword_0_0; }

		//Divide="/"
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_1() { return cDivideEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivideSolidusKeyword_1_0() { return cDivideSolidusKeyword_1_0; }

		//ElementWiseMultiply=".*"
		public EnumLiteralDeclaration getElementWiseMultiplyEnumLiteralDeclaration_2() { return cElementWiseMultiplyEnumLiteralDeclaration_2; }

		//".*"
		public Keyword getElementWiseMultiplyFullStopAsteriskKeyword_2_0() { return cElementWiseMultiplyFullStopAsteriskKeyword_2_0; }

		//ElementWiseDivide="./"
		public EnumLiteralDeclaration getElementWiseDivideEnumLiteralDeclaration_3() { return cElementWiseDivideEnumLiteralDeclaration_3; }

		//"./"
		public Keyword getElementWiseDivideFullStopSolidusKeyword_3_0() { return cElementWiseDivideFullStopSolidusKeyword_3_0; }
	}

	public class PowerOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PowerOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPowerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPowerCircumflexAccentKeyword_0_0 = (Keyword)cPowerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cElementWisePowerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cElementWisePowerFullStopCircumflexAccentKeyword_1_0 = (Keyword)cElementWisePowerEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PowerOperator:
		//	Power="^" | ElementWisePower=".^";
		public EnumRule getRule() { return rule; }

		//Power="^" | ElementWisePower=".^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Power="^"
		public EnumLiteralDeclaration getPowerEnumLiteralDeclaration_0() { return cPowerEnumLiteralDeclaration_0; }

		//"^"
		public Keyword getPowerCircumflexAccentKeyword_0_0() { return cPowerCircumflexAccentKeyword_0_0; }

		//ElementWisePower=".^"
		public EnumLiteralDeclaration getElementWisePowerEnumLiteralDeclaration_1() { return cElementWisePowerEnumLiteralDeclaration_1; }

		//".^"
		public Keyword getElementWisePowerFullStopCircumflexAccentKeyword_1_0() { return cElementWisePowerFullStopCircumflexAccentKeyword_1_0; }
	}

	public class BooleanKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFalseFalseKeyword_0_0 = (Keyword)cFalseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTrueTrueKeyword_1_0 = (Keyword)cTrueEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanKind:
		//	False="false" | True="true";
		public EnumRule getRule() { return rule; }

		//False="false" | True="true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//False="false"
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_0() { return cFalseEnumLiteralDeclaration_0; }

		//"false"
		public Keyword getFalseFalseKeyword_0_0() { return cFalseFalseKeyword_0_0; }

		//True="true"
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_1() { return cTrueEnumLiteralDeclaration_1; }

		//"true"
		public Keyword getTrueTrueKeyword_1_0() { return cTrueTrueKeyword_1_0; }
	}
	
	private MscriptElements pMscript;
	private PackageDefinitionElements pPackageDefinition;
	private PackageDefinitionElementElements pPackageDefinitionElement;
	private TypeDefinitionElements pTypeDefinition;
	private DataTypeDefinitionElements pDataTypeDefinition;
	private EnumerationDefinitionElements pEnumerationDefinition;
	private EnumerationLiteralDeclarationElements pEnumerationLiteralDeclaration;
	private TypeAliasDefinitionElements pTypeAliasDefinition;
	private VariableDeclarationElements pVariableDeclaration;
	private RecordDefinitionElements pRecordDefinition;
	private RecordFieldDeclarationElements pRecordFieldDeclaration;
	private SubroutineDefinitionElements pSubroutineDefinition;
	private FunctionDefinitionElements pFunctionDefinition;
	private CheckDefinitionElements pCheckDefinition;
	private ParameterDeclarationElements pParameterDeclaration;
	private PreconditionChainElements pPreconditionChain;
	private StatementElements pStatement;
	private BlockElements pBlock;
	private ExpressionStatementElements pExpressionStatement;
	private IfStatementElements pIfStatement;
	private IfCaseElements pIfCase;
	private WhileStatementElements pWhileStatement;
	private DoWhileStatementElements pDoWhileStatement;
	private ForeachStatementElements pForeachStatement;
	private ReturnStatementElements pReturnStatement;
	private CheckStatusStatementElements pCheckStatusStatement;
	private CheckStatusKindElements unknownRuleCheckStatusKind;
	private TypeSpecifierElements pTypeSpecifier;
	private DataTypeSpecifierElements pDataTypeSpecifier;
	private PrimitiveTypeSpecifierElements pPrimitiveTypeSpecifier;
	private NumericalTypeSpecifierElements pNumericalTypeSpecifier;
	private RealTypeSpecifierElements pRealTypeSpecifier;
	private IntegerTypeSpecifierElements pIntegerTypeSpecifier;
	private ComplexTypeSpecifierElements pComplexTypeSpecifier;
	private GaussianTypeSpecifierElements pGaussianTypeSpecifier;
	private BooleanTypeSpecifierElements pBooleanTypeSpecifier;
	private StringTypeSpecifierElements pStringTypeSpecifier;
	private NamedTypeSpecifierElements pNamedTypeSpecifier;
	private ArrayDimensionSpecificationElements pArrayDimensionSpecification;
	private UnitTypeSpecifierElements pUnitTypeSpecifier;
	private ExpressionElements pExpression;
	private ConditionalExpressionElements pConditionalExpression;
	private ConditionalExpressionCaseElements pConditionalExpressionCase;
	private RangeExpressionElements pRangeExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private LogicalNotExpressionElements pLogicalNotExpression;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private AddSubtractExpressionElements pAddSubtractExpression;
	private AddSubtractExpressionPartElements pAddSubtractExpressionPart;
	private AddSubtractOperatorElements unknownRuleAddSubtractOperator;
	private MultiplyDivideExpressionElements pMultiplyDivideExpression;
	private MultiplyDivideExpressionPartElements pMultiplyDivideExpressionPart;
	private MultiplyDivideOperatorElements unknownRuleMultiplyDivideOperator;
	private PowerExpressionElements pPowerExpression;
	private PowerOperatorElements unknownRulePowerOperator;
	private UnaryMinusExpressionElements pUnaryMinusExpression;
	private FeatureCallElements pFeatureCall;
	private FeatureCallPartElements pFeatureCallPart;
	private FeatureReferenceElements pFeatureReference;
	private ArrayElementReferenceElements pArrayElementReference;
	private OperationCallElements pOperationCall;
	private CallablePrimaryExpressionElements pCallablePrimaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private LiteralElements pLiteral;
	private NumericalLiteralElements pNumericalLiteral;
	private RealLiteralElements pRealLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private BooleanKindElements unknownRuleBooleanKind;
	private StringLiteralElements pStringLiteral;
	private QualifiedNameElements pQualifiedName;
	private SymbolReferenceElements pSymbolReference;
	private SubscriptElements pSubscript;
	private MatrixConstructionOperatorElements pMatrixConstructionOperator;
	private ExpressionListElements pExpressionList;
	private UnitConstructionOperatorElements pUnitConstructionOperator;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private BeginExpressionElements pBeginExpression;
	private EndExpressionElements pEndExpression;
	private UnitExpressionElements pUnitExpression;
	private UnitExpressionNumeratorElements pUnitExpressionNumerator;
	private UnitExpressionDenominatorElements pUnitExpressionDenominator;
	private UnitExpressionFactorElements pUnitExpressionFactor;
	private UnitExpressionExponentElements pUnitExpressionExponent;
	private KeywordIDElements pKeywordID;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tREAL;
	private TerminalRule tINTEGER;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public MscriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Mscript:
	//	packages+=PackageDefinition*;
	public MscriptElements getMscriptAccess() {
		return (pMscript != null) ? pMscript : (pMscript = new MscriptElements());
	}
	
	public ParserRule getMscriptRule() {
		return getMscriptAccess().getRule();
	}

	//PackageDefinition:
	//	"package" name=QualifiedName "{" elements+=PackageDefinitionElement* "}";
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return (pPackageDefinition != null) ? pPackageDefinition : (pPackageDefinition = new PackageDefinitionElements());
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}

	//PackageDefinitionElement:
	//	PackageDefinition | TypeDefinition | VariableDeclaration;
	public PackageDefinitionElementElements getPackageDefinitionElementAccess() {
		return (pPackageDefinitionElement != null) ? pPackageDefinitionElement : (pPackageDefinitionElement = new PackageDefinitionElementElements());
	}
	
	public ParserRule getPackageDefinitionElementRule() {
		return getPackageDefinitionElementAccess().getRule();
	}

	//TypeDefinition:
	//	DataTypeDefinition | SubroutineDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	/// *
	// * DataTypeDefinition
	// * /DataTypeDefinition:
	//	EnumerationDefinition | RecordDefinition | TypeAliasDefinition;
	public DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return (pDataTypeDefinition != null) ? pDataTypeDefinition : (pDataTypeDefinition = new DataTypeDefinitionElements());
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}

	/// *
	// * Enumeration
	// * /EnumerationDefinition:
	//	"enum" name=KeywordID "{" (literals+=EnumerationLiteralDeclaration ("," literals+=EnumerationLiteralDeclaration)*)?
	//	"}";
	public EnumerationDefinitionElements getEnumerationDefinitionAccess() {
		return (pEnumerationDefinition != null) ? pEnumerationDefinition : (pEnumerationDefinition = new EnumerationDefinitionElements());
	}
	
	public ParserRule getEnumerationDefinitionRule() {
		return getEnumerationDefinitionAccess().getRule();
	}

	//EnumerationLiteralDeclaration:
	//	name=KeywordID;
	public EnumerationLiteralDeclarationElements getEnumerationLiteralDeclarationAccess() {
		return (pEnumerationLiteralDeclaration != null) ? pEnumerationLiteralDeclaration : (pEnumerationLiteralDeclaration = new EnumerationLiteralDeclarationElements());
	}
	
	public ParserRule getEnumerationLiteralDeclarationRule() {
		return getEnumerationLiteralDeclarationAccess().getRule();
	}

	/// *
	// * TypeDefinition
	// * /TypeAliasDefinition:
	//	"type" name=KeywordID "=" type=PrimitiveTypeSpecifier ";";
	public TypeAliasDefinitionElements getTypeAliasDefinitionAccess() {
		return (pTypeAliasDefinition != null) ? pTypeAliasDefinition : (pTypeAliasDefinition = new TypeAliasDefinitionElements());
	}
	
	public ParserRule getTypeAliasDefinitionRule() {
		return getTypeAliasDefinitionAccess().getRule();
	}

	/// *
	// * VariableDeclaration
	// * /VariableDeclaration:
	//	("var" | constant?="const") name=KeywordID (":" type=TypeSpecifier)? ("=" initialValue=Expression)? ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	/// *
	// * Record
	// * /RecordDefinition:
	//	"record" name=KeywordID "{" fields+=RecordFieldDeclaration* "}";
	public RecordDefinitionElements getRecordDefinitionAccess() {
		return (pRecordDefinition != null) ? pRecordDefinition : (pRecordDefinition = new RecordDefinitionElements());
	}
	
	public ParserRule getRecordDefinitionRule() {
		return getRecordDefinitionAccess().getRule();
	}

	//RecordFieldDeclaration:
	//	name=KeywordID ":" type=DataTypeSpecifier ";";
	public RecordFieldDeclarationElements getRecordFieldDeclarationAccess() {
		return (pRecordFieldDeclaration != null) ? pRecordFieldDeclaration : (pRecordFieldDeclaration = new RecordFieldDeclarationElements());
	}
	
	public ParserRule getRecordFieldDeclarationRule() {
		return getRecordFieldDeclarationAccess().getRule();
	}

	/// *
	// * Subroutines
	// * /SubroutineDefinition:
	//	FunctionDefinition | CheckDefinition;
	public SubroutineDefinitionElements getSubroutineDefinitionAccess() {
		return (pSubroutineDefinition != null) ? pSubroutineDefinition : (pSubroutineDefinition = new SubroutineDefinitionElements());
	}
	
	public ParserRule getSubroutineDefinitionRule() {
		return getSubroutineDefinitionAccess().getRule();
	}

	//FunctionDefinition:
	//	"func" name=KeywordID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")" ("pre"
	//	preconditionChain=PreconditionChain)? body=Block;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//CheckDefinition:
	//	"check" name=KeywordID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")" ("pre"
	//	preconditionChain=PreconditionChain)? body=Block;
	public CheckDefinitionElements getCheckDefinitionAccess() {
		return (pCheckDefinition != null) ? pCheckDefinition : (pCheckDefinition = new CheckDefinitionElements());
	}
	
	public ParserRule getCheckDefinitionRule() {
		return getCheckDefinitionAccess().getRule();
	}

	//ParameterDeclaration:
	//	reference?="ref"? name=KeywordID ":" type=TypeSpecifier;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return (pParameterDeclaration != null) ? pParameterDeclaration : (pParameterDeclaration = new ParameterDeclarationElements());
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//PreconditionChain:
	//	preconditions+=FeatureCall ("," preconditions+=FeatureCall)*;
	public PreconditionChainElements getPreconditionChainAccess() {
		return (pPreconditionChain != null) ? pPreconditionChain : (pPreconditionChain = new PreconditionChainElements());
	}
	
	public ParserRule getPreconditionChainRule() {
		return getPreconditionChainAccess().getRule();
	}

	/// *
	// * Statement
	// * /Statement:
	//	Block | ExpressionStatement | IfStatement | WhileStatement | DoWhileStatement | ForeachStatement | TypeDefinition |
	//	VariableDeclaration | ReturnStatement | CheckStatusStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Block:
	//	{Block} "{" statements+=Statement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//ExpressionStatement:
	//	expression=FeatureCall ("=" assignedValue=Expression)? ";";
	public ExpressionStatementElements getExpressionStatementAccess() {
		return (pExpressionStatement != null) ? pExpressionStatement : (pExpressionStatement = new ExpressionStatementElements());
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//IfStatement:
	//	"if" cases+=IfCase ("elseif" cases+=IfCase)* ("else" elseBody=Block)?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//IfCase:
	//	condition=Expression body=Block;
	public IfCaseElements getIfCaseAccess() {
		return (pIfCase != null) ? pIfCase : (pIfCase = new IfCaseElements());
	}
	
	public ParserRule getIfCaseRule() {
		return getIfCaseAccess().getRule();
	}

	//WhileStatement:
	//	"while" predicate=Expression body=Block;
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//DoWhileStatement:
	//	"do" body=Block "while" predicate=Expression ";";
	public DoWhileStatementElements getDoWhileStatementAccess() {
		return (pDoWhileStatement != null) ? pDoWhileStatement : (pDoWhileStatement = new DoWhileStatementElements());
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}

	//ForeachStatement:
	//	"foreach" elementName=KeywordID "in" collectionExpression=Expression body=Block;
	public ForeachStatementElements getForeachStatementAccess() {
		return (pForeachStatement != null) ? pForeachStatement : (pForeachStatement = new ForeachStatementElements());
	}
	
	public ParserRule getForeachStatementRule() {
		return getForeachStatementAccess().getRule();
	}

	//ReturnStatement:
	//	{ReturnStatement} "return" returnValue=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//CheckStatusStatement:
	//	kind=CheckStatusKind message=Expression ";";
	public CheckStatusStatementElements getCheckStatusStatementAccess() {
		return (pCheckStatusStatement != null) ? pCheckStatusStatement : (pCheckStatusStatement = new CheckStatusStatementElements());
	}
	
	public ParserRule getCheckStatusStatementRule() {
		return getCheckStatusStatementAccess().getRule();
	}

	//enum CheckStatusKind:
	//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
	public CheckStatusKindElements getCheckStatusKindAccess() {
		return (unknownRuleCheckStatusKind != null) ? unknownRuleCheckStatusKind : (unknownRuleCheckStatusKind = new CheckStatusKindElements());
	}
	
	public EnumRule getCheckStatusKindRule() {
		return getCheckStatusKindAccess().getRule();
	}

	/// *
	// * Data type specifier
	// * /TypeSpecifier:
	//	DataTypeSpecifier | UnitTypeSpecifier;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return (pTypeSpecifier != null) ? pTypeSpecifier : (pTypeSpecifier = new TypeSpecifierElements());
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//DataTypeSpecifier:
	//	PrimitiveTypeSpecifier | NamedTypeSpecifier;
	public DataTypeSpecifierElements getDataTypeSpecifierAccess() {
		return (pDataTypeSpecifier != null) ? pDataTypeSpecifier : (pDataTypeSpecifier = new DataTypeSpecifierElements());
	}
	
	public ParserRule getDataTypeSpecifierRule() {
		return getDataTypeSpecifierAccess().getRule();
	}

	//PrimitiveTypeSpecifier:
	//	NumericalTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
	public PrimitiveTypeSpecifierElements getPrimitiveTypeSpecifierAccess() {
		return (pPrimitiveTypeSpecifier != null) ? pPrimitiveTypeSpecifier : (pPrimitiveTypeSpecifier = new PrimitiveTypeSpecifierElements());
	}
	
	public ParserRule getPrimitiveTypeSpecifierRule() {
		return getPrimitiveTypeSpecifierAccess().getRule();
	}

	//NumericalTypeSpecifier:
	//	RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier;
	public NumericalTypeSpecifierElements getNumericalTypeSpecifierAccess() {
		return (pNumericalTypeSpecifier != null) ? pNumericalTypeSpecifier : (pNumericalTypeSpecifier = new NumericalTypeSpecifierElements());
	}
	
	public ParserRule getNumericalTypeSpecifierRule() {
		return getNumericalTypeSpecifierAccess().getRule();
	}

	//RealTypeSpecifier:
	//	{RealTypeSpecifier} "real" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public RealTypeSpecifierElements getRealTypeSpecifierAccess() {
		return (pRealTypeSpecifier != null) ? pRealTypeSpecifier : (pRealTypeSpecifier = new RealTypeSpecifierElements());
	}
	
	public ParserRule getRealTypeSpecifierRule() {
		return getRealTypeSpecifierAccess().getRule();
	}

	//IntegerTypeSpecifier:
	//	{IntegerTypeSpecifier} "int" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public IntegerTypeSpecifierElements getIntegerTypeSpecifierAccess() {
		return (pIntegerTypeSpecifier != null) ? pIntegerTypeSpecifier : (pIntegerTypeSpecifier = new IntegerTypeSpecifierElements());
	}
	
	public ParserRule getIntegerTypeSpecifierRule() {
		return getIntegerTypeSpecifierAccess().getRule();
	}

	//ComplexTypeSpecifier:
	//	{ComplexTypeSpecifier} "complex" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public ComplexTypeSpecifierElements getComplexTypeSpecifierAccess() {
		return (pComplexTypeSpecifier != null) ? pComplexTypeSpecifier : (pComplexTypeSpecifier = new ComplexTypeSpecifierElements());
	}
	
	public ParserRule getComplexTypeSpecifierRule() {
		return getComplexTypeSpecifierAccess().getRule();
	}

	//GaussianTypeSpecifier:
	//	{GaussianTypeSpecifier} "gauss" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public GaussianTypeSpecifierElements getGaussianTypeSpecifierAccess() {
		return (pGaussianTypeSpecifier != null) ? pGaussianTypeSpecifier : (pGaussianTypeSpecifier = new GaussianTypeSpecifierElements());
	}
	
	public ParserRule getGaussianTypeSpecifierRule() {
		return getGaussianTypeSpecifierAccess().getRule();
	}

	//BooleanTypeSpecifier:
	//	{BooleanTypeSpecifier} "bool" ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public BooleanTypeSpecifierElements getBooleanTypeSpecifierAccess() {
		return (pBooleanTypeSpecifier != null) ? pBooleanTypeSpecifier : (pBooleanTypeSpecifier = new BooleanTypeSpecifierElements());
	}
	
	public ParserRule getBooleanTypeSpecifierRule() {
		return getBooleanTypeSpecifierAccess().getRule();
	}

	//StringTypeSpecifier:
	//	{StringTypeSpecifier} "string" ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public StringTypeSpecifierElements getStringTypeSpecifierAccess() {
		return (pStringTypeSpecifier != null) ? pStringTypeSpecifier : (pStringTypeSpecifier = new StringTypeSpecifierElements());
	}
	
	public ParserRule getStringTypeSpecifierRule() {
		return getStringTypeSpecifierAccess().getRule();
	}

	//NamedTypeSpecifier:
	//	typeReference=SymbolReference ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public NamedTypeSpecifierElements getNamedTypeSpecifierAccess() {
		return (pNamedTypeSpecifier != null) ? pNamedTypeSpecifier : (pNamedTypeSpecifier = new NamedTypeSpecifierElements());
	}
	
	public ParserRule getNamedTypeSpecifierRule() {
		return getNamedTypeSpecifierAccess().getRule();
	}

	//ArrayDimensionSpecification:
	//	unspecified?="?" | size=Expression ({ArrayDimensionSpecification.beginIndex=current} ".." endIndex=Expression)?;
	public ArrayDimensionSpecificationElements getArrayDimensionSpecificationAccess() {
		return (pArrayDimensionSpecification != null) ? pArrayDimensionSpecification : (pArrayDimensionSpecification = new ArrayDimensionSpecificationElements());
	}
	
	public ParserRule getArrayDimensionSpecificationRule() {
		return getArrayDimensionSpecificationAccess().getRule();
	}

	//UnitTypeSpecifier:
	//	{UnitTypeSpecifier} "unit";
	public UnitTypeSpecifierElements getUnitTypeSpecifierAccess() {
		return (pUnitTypeSpecifier != null) ? pUnitTypeSpecifier : (pUnitTypeSpecifier = new UnitTypeSpecifierElements());
	}
	
	public ParserRule getUnitTypeSpecifierRule() {
		return getUnitTypeSpecifierAccess().getRule();
	}

	/// *
	// * Expressions
	// * /Expression:
	//	ConditionalExpression | RangeExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ConditionalExpression:
	//	"if" cases+=ConditionalExpressionCase ("elseif" cases+=ConditionalExpressionCase)* "else" elseExpression=Expression;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//ConditionalExpressionCase:
	//	conditionExpression=Expression "then" thenExpression=Expression;
	public ConditionalExpressionCaseElements getConditionalExpressionCaseAccess() {
		return (pConditionalExpressionCase != null) ? pConditionalExpressionCase : (pConditionalExpressionCase = new ConditionalExpressionCaseElements());
	}
	
	public ParserRule getConditionalExpressionCaseRule() {
		return getConditionalExpressionCaseAccess().getRule();
	}

	//RangeExpression returns Expression:
	//	LogicalOrExpression ({RangeExpression.begin=current} ":" end=LogicalOrExpression ({RangeExpression.increment=current}
	//	":" end=LogicalOrExpression)?)?;
	public RangeExpressionElements getRangeExpressionAccess() {
		return (pRangeExpression != null) ? pRangeExpression : (pRangeExpression = new RangeExpressionElements());
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	LogicalNotExpression ({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//	RelationalExpression | {LogicalNotExpression} "not" operand=RelationalExpression;
	public LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return (pLogicalNotExpression != null) ? pLogicalNotExpression : (pLogicalNotExpression = new LogicalNotExpressionElements());
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AddSubtractExpression ({RelationalExpression.leftOperand=current} (typeTest?="is" type=DataTypeSpecifier |
	//	operator=RelationalOperator rightOperand=AddSubtractExpression))?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator:
	//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=" | EqualTo="==" | NotEqualTo="!=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AddSubtractExpression returns Expression:
	//	MultiplyDivideExpression ({AddSubtractExpression.leftOperand=current} rightParts+=AddSubtractExpressionPart+)?;
	public AddSubtractExpressionElements getAddSubtractExpressionAccess() {
		return (pAddSubtractExpression != null) ? pAddSubtractExpression : (pAddSubtractExpression = new AddSubtractExpressionElements());
	}
	
	public ParserRule getAddSubtractExpressionRule() {
		return getAddSubtractExpressionAccess().getRule();
	}

	//AddSubtractExpressionPart:
	//	operator=AddSubtractOperator operand=MultiplyDivideExpression;
	public AddSubtractExpressionPartElements getAddSubtractExpressionPartAccess() {
		return (pAddSubtractExpressionPart != null) ? pAddSubtractExpressionPart : (pAddSubtractExpressionPart = new AddSubtractExpressionPartElements());
	}
	
	public ParserRule getAddSubtractExpressionPartRule() {
		return getAddSubtractExpressionPartAccess().getRule();
	}

	//enum AddSubtractOperator:
	//	Add="+" | Subtract="-";
	public AddSubtractOperatorElements getAddSubtractOperatorAccess() {
		return (unknownRuleAddSubtractOperator != null) ? unknownRuleAddSubtractOperator : (unknownRuleAddSubtractOperator = new AddSubtractOperatorElements());
	}
	
	public EnumRule getAddSubtractOperatorRule() {
		return getAddSubtractOperatorAccess().getRule();
	}

	//MultiplyDivideExpression returns Expression:
	//	PowerExpression ({MultiplyDivideExpression.leftOperand=current} rightParts+=MultiplyDivideExpressionPart+)?;
	public MultiplyDivideExpressionElements getMultiplyDivideExpressionAccess() {
		return (pMultiplyDivideExpression != null) ? pMultiplyDivideExpression : (pMultiplyDivideExpression = new MultiplyDivideExpressionElements());
	}
	
	public ParserRule getMultiplyDivideExpressionRule() {
		return getMultiplyDivideExpressionAccess().getRule();
	}

	//MultiplyDivideExpressionPart:
	//	operator=MultiplyDivideOperator operand=PowerExpression;
	public MultiplyDivideExpressionPartElements getMultiplyDivideExpressionPartAccess() {
		return (pMultiplyDivideExpressionPart != null) ? pMultiplyDivideExpressionPart : (pMultiplyDivideExpressionPart = new MultiplyDivideExpressionPartElements());
	}
	
	public ParserRule getMultiplyDivideExpressionPartRule() {
		return getMultiplyDivideExpressionPartAccess().getRule();
	}

	//enum MultiplyDivideOperator:
	//	Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./";
	public MultiplyDivideOperatorElements getMultiplyDivideOperatorAccess() {
		return (unknownRuleMultiplyDivideOperator != null) ? unknownRuleMultiplyDivideOperator : (unknownRuleMultiplyDivideOperator = new MultiplyDivideOperatorElements());
	}
	
	public EnumRule getMultiplyDivideOperatorRule() {
		return getMultiplyDivideOperatorAccess().getRule();
	}

	//PowerExpression returns Expression:
	//	UnaryMinusExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryMinusExpression)?;
	public PowerExpressionElements getPowerExpressionAccess() {
		return (pPowerExpression != null) ? pPowerExpression : (pPowerExpression = new PowerExpressionElements());
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//enum PowerOperator:
	//	Power="^" | ElementWisePower=".^";
	public PowerOperatorElements getPowerOperatorAccess() {
		return (unknownRulePowerOperator != null) ? unknownRulePowerOperator : (unknownRulePowerOperator = new PowerOperatorElements());
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//UnaryMinusExpression returns Expression:
	//	FeatureCall | {UnaryMinusExpression} "-" operand=FeatureCall;
	public UnaryMinusExpressionElements getUnaryMinusExpressionAccess() {
		return (pUnaryMinusExpression != null) ? pUnaryMinusExpression : (pUnaryMinusExpression = new UnaryMinusExpressionElements());
	}
	
	public ParserRule getUnaryMinusExpressionRule() {
		return getUnaryMinusExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	PrimaryExpression | CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)?;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//FeatureCallPart:
	//	FeatureReference | ArrayElementReference | OperationCall;
	public FeatureCallPartElements getFeatureCallPartAccess() {
		return (pFeatureCallPart != null) ? pFeatureCallPart : (pFeatureCallPart = new FeatureCallPartElements());
	}
	
	public ParserRule getFeatureCallPartRule() {
		return getFeatureCallPartAccess().getRule();
	}

	//FeatureReference:
	//	"." featureName=(ID | "unit");
	public FeatureReferenceElements getFeatureReferenceAccess() {
		return (pFeatureReference != null) ? pFeatureReference : (pFeatureReference = new FeatureReferenceElements());
	}
	
	public ParserRule getFeatureReferenceRule() {
		return getFeatureReferenceAccess().getRule();
	}

	//ArrayElementReference:
	//	"[" subscripts+=Subscript ("," subscripts+=Subscript)* "]";
	public ArrayElementReferenceElements getArrayElementReferenceAccess() {
		return (pArrayElementReference != null) ? pArrayElementReference : (pArrayElementReference = new ArrayElementReferenceElements());
	}
	
	public ParserRule getArrayElementReferenceRule() {
		return getArrayElementReferenceAccess().getRule();
	}

	//OperationCall:
	//	{OperationCall} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public OperationCallElements getOperationCallAccess() {
		return (pOperationCall != null) ? pOperationCall : (pOperationCall = new OperationCallElements());
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	//CallablePrimaryExpression returns Expression:
	//	MatrixConstructionOperator | SymbolReference | ParenthesizedExpression;
	public CallablePrimaryExpressionElements getCallablePrimaryExpressionAccess() {
		return (pCallablePrimaryExpression != null) ? pCallablePrimaryExpression : (pCallablePrimaryExpression = new CallablePrimaryExpressionElements());
	}
	
	public ParserRule getCallablePrimaryExpressionRule() {
		return getCallablePrimaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | UnitConstructionOperator | BeginExpression | EndExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	NumericalLiteral | BooleanLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericalLiteral:
	//	RealLiteral | IntegerLiteral;
	public NumericalLiteralElements getNumericalLiteralAccess() {
		return (pNumericalLiteral != null) ? pNumericalLiteral : (pNumericalLiteral = new NumericalLiteralElements());
	}
	
	public ParserRule getNumericalLiteralRule() {
		return getNumericalLiteralAccess().getRule();
	}

	//RealLiteral:
	//	value=REAL imaginary?="j"? ("(" unit=UnitExpression ")")?;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INTEGER imaginary?="j"? ("(" unit=UnitExpression ")")?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=BooleanKind;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//enum BooleanKind:
	//	False="false" | True="true";
	public BooleanKindElements getBooleanKindAccess() {
		return (unknownRuleBooleanKind != null) ? unknownRuleBooleanKind : (unknownRuleBooleanKind = new BooleanKindElements());
	}
	
	public EnumRule getBooleanKindRule() {
		return getBooleanKindAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//QualifiedName:
	//	identifiers+=KeywordID ("::" identifiers+=KeywordID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//SymbolReference:
	//	global?="::"? name=QualifiedName;
	public SymbolReferenceElements getSymbolReferenceAccess() {
		return (pSymbolReference != null) ? pSymbolReference : (pSymbolReference = new SymbolReferenceElements());
	}
	
	public ParserRule getSymbolReferenceRule() {
		return getSymbolReferenceAccess().getRule();
	}

	//Subscript:
	//	all?=":" | expression=Expression;
	public SubscriptElements getSubscriptAccess() {
		return (pSubscript != null) ? pSubscript : (pSubscript = new SubscriptElements());
	}
	
	public ParserRule getSubscriptRule() {
		return getSubscriptAccess().getRule();
	}

	//MatrixConstructionOperator:
	//	"[" expressionLists+=ExpressionList (";" expressionLists+=ExpressionList)* "]";
	public MatrixConstructionOperatorElements getMatrixConstructionOperatorAccess() {
		return (pMatrixConstructionOperator != null) ? pMatrixConstructionOperator : (pMatrixConstructionOperator = new MatrixConstructionOperatorElements());
	}
	
	public ParserRule getMatrixConstructionOperatorRule() {
		return getMatrixConstructionOperatorAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=Expression ("," expressions+=Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//UnitConstructionOperator:
	//	"unit" "(" unitExpression=UnitExpression ")";
	public UnitConstructionOperatorElements getUnitConstructionOperatorAccess() {
		return (pUnitConstructionOperator != null) ? pUnitConstructionOperator : (pUnitConstructionOperator = new UnitConstructionOperatorElements());
	}
	
	public ParserRule getUnitConstructionOperatorRule() {
		return getUnitConstructionOperatorAccess().getRule();
	}

	//ParenthesizedExpression:
	//	"(" expression=Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//BeginExpression:
	//	{BeginExpression} "begin";
	public BeginExpressionElements getBeginExpressionAccess() {
		return (pBeginExpression != null) ? pBeginExpression : (pBeginExpression = new BeginExpressionElements());
	}
	
	public ParserRule getBeginExpressionRule() {
		return getBeginExpressionAccess().getRule();
	}

	//EndExpression:
	//	{EndExpression} "end";
	public EndExpressionElements getEndExpressionAccess() {
		return (pEndExpression != null) ? pEndExpression : (pEndExpression = new EndExpressionElements());
	}
	
	public ParserRule getEndExpressionRule() {
		return getEndExpressionAccess().getRule();
	}

	/// *
	// * Unit expressions
	// * /UnitExpression:
	//	unspecified?="?" | "eval" expression=Expression | numerator=UnitExpressionNumerator ("/"
	//	denominator=UnitExpressionDenominator)?;
	public UnitExpressionElements getUnitExpressionAccess() {
		return (pUnitExpression != null) ? pUnitExpression : (pUnitExpression = new UnitExpressionElements());
	}
	
	public ParserRule getUnitExpressionRule() {
		return getUnitExpressionAccess().getRule();
	}

	//UnitExpressionNumerator:
	//	one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*;
	public UnitExpressionNumeratorElements getUnitExpressionNumeratorAccess() {
		return (pUnitExpressionNumerator != null) ? pUnitExpressionNumerator : (pUnitExpressionNumerator = new UnitExpressionNumeratorElements());
	}
	
	public ParserRule getUnitExpressionNumeratorRule() {
		return getUnitExpressionNumeratorAccess().getRule();
	}

	//UnitExpressionDenominator:
	//	factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")";
	public UnitExpressionDenominatorElements getUnitExpressionDenominatorAccess() {
		return (pUnitExpressionDenominator != null) ? pUnitExpressionDenominator : (pUnitExpressionDenominator = new UnitExpressionDenominatorElements());
	}
	
	public ParserRule getUnitExpressionDenominatorRule() {
		return getUnitExpressionDenominatorAccess().getRule();
	}

	//UnitExpressionFactor:
	//	operand=KeywordID ("^" exponent=UnitExpressionExponent)?;
	public UnitExpressionFactorElements getUnitExpressionFactorAccess() {
		return (pUnitExpressionFactor != null) ? pUnitExpressionFactor : (pUnitExpressionFactor = new UnitExpressionFactorElements());
	}
	
	public ParserRule getUnitExpressionFactorRule() {
		return getUnitExpressionFactorAccess().getRule();
	}

	//UnitExpressionExponent:
	//	negative?="-"? value=INTEGER;
	public UnitExpressionExponentElements getUnitExpressionExponentAccess() {
		return (pUnitExpressionExponent != null) ? pUnitExpressionExponent : (pUnitExpressionExponent = new UnitExpressionExponentElements());
	}
	
	public ParserRule getUnitExpressionExponentRule() {
		return getUnitExpressionExponentAccess().getRule();
	}

	/// *
	// * Keyword ID
	// * /KeywordID returns ecore::EString:
	//	ID | "j";
	public KeywordIDElements getKeywordIDAccess() {
		return (pKeywordID != null) ? pKeywordID : (pKeywordID = new KeywordIDElements());
	}
	
	public ParserRule getKeywordIDRule() {
		return getKeywordIDAccess().getRule();
	}

	/// *
	// * Terminals
	// * /terminal ID:
	//	("_" | "a".."z" | "A".."Z") ("0".."9" | "_" | "a".."z" | "A".."Z")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v"))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal REAL returns ecore::EDouble:
	//	"0".."9"+ "." "0".."9"* (("e" | "E") ("+" | "-")? "0".."9"+)?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal INTEGER returns ecore::ELong:
	//	"0".."9"+;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
