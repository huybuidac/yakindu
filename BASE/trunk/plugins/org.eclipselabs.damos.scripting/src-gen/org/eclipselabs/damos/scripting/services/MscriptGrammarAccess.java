/*
* generated by Xtext
*/

package org.eclipselabs.damos.scripting.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MscriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mscript");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesPackageDefinitionParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//Mscript:
		//	packages+=PackageDefinition*;
		public ParserRule getRule() { return rule; }

		//packages+=PackageDefinition*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//PackageDefinition
		public RuleCall getPackagesPackageDefinitionParserRuleCall_0() { return cPackagesPackageDefinitionParserRuleCall_0; }
	}

	public class PackageDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPackageDefinitionElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDefinition:
		//	"package" name=Name "{" elements+=PackageDefinitionElement* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=Name "{" elements+=PackageDefinitionElement* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=PackageDefinitionElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//PackageDefinitionElement
		public RuleCall getElementsPackageDefinitionElementParserRuleCall_3_0() { return cElementsPackageDefinitionElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PackageDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDefinitionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PackageDefinitionElement:
		//	PackageDefinition | EnumerationDefinition;
		public ParserRule getRule() { return rule; }

		//PackageDefinition | EnumerationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDefinition
		public RuleCall getPackageDefinitionParserRuleCall_0() { return cPackageDefinitionParserRuleCall_0; }

		//EnumerationDefinition
		public RuleCall getEnumerationDefinitionParserRuleCall_1() { return cEnumerationDefinitionParserRuleCall_1; }
	}

	public class EnumerationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsEnumerationLiteralDefinitionParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLiteralsEnumerationLiteralDefinitionParserRuleCall_3_1_1_0 = (RuleCall)cLiteralsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Enumeration
		// * /EnumerationDefinition:
		//	"enumeration" name=IDENT "{" (literals+=EnumerationLiteralDefinition ("," literals+=EnumerationLiteralDefinition)*)?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"enumeration" name=IDENT "{" (literals+=EnumerationLiteralDefinition ("," literals+=EnumerationLiteralDefinition)*)? "}"
		public Group getGroup() { return cGroup; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//name=IDENT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_1_0() { return cNameIDENTTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(literals+=EnumerationLiteralDefinition ("," literals+=EnumerationLiteralDefinition)*)?
		public Group getGroup_3() { return cGroup_3; }

		//literals+=EnumerationLiteralDefinition
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }

		//EnumerationLiteralDefinition
		public RuleCall getLiteralsEnumerationLiteralDefinitionParserRuleCall_3_0_0() { return cLiteralsEnumerationLiteralDefinitionParserRuleCall_3_0_0; }

		//("," literals+=EnumerationLiteralDefinition)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//literals+=EnumerationLiteralDefinition
		public Assignment getLiteralsAssignment_3_1_1() { return cLiteralsAssignment_3_1_1; }

		//EnumerationLiteralDefinition
		public RuleCall getLiteralsEnumerationLiteralDefinitionParserRuleCall_3_1_1_0() { return cLiteralsEnumerationLiteralDefinitionParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumerationLiteralDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteralDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDENTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteralDefinition:
		//	name=IDENT;
		public ParserRule getRule() { return rule; }

		//name=IDENT
		public Assignment getNameAssignment() { return cNameAssignment; }

		//IDENT
		public RuleCall getNameIDENTTerminalRuleCall_0() { return cNameIDENTTerminalRuleCall_0; }
	}

	public class DataTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Data type specifier
		// * /DataTypeSpecifier:
		//	PrimitiveTypeSpecifier | ComplexTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//PrimitiveTypeSpecifier | ComplexTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveTypeSpecifier
		public RuleCall getPrimitiveTypeSpecifierParserRuleCall_0() { return cPrimitiveTypeSpecifierParserRuleCall_0; }

		//ComplexTypeSpecifier
		public RuleCall getComplexTypeSpecifierParserRuleCall_1() { return cComplexTypeSpecifierParserRuleCall_1; }
	}

	public class PrimitiveTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericalTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimitiveTypeSpecifier:
		//	NumericalTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//NumericalTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericalTypeSpecifier
		public RuleCall getNumericalTypeSpecifierParserRuleCall_0() { return cNumericalTypeSpecifierParserRuleCall_0; }

		//BooleanTypeSpecifier
		public RuleCall getBooleanTypeSpecifierParserRuleCall_1() { return cBooleanTypeSpecifierParserRuleCall_1; }

		//StringTypeSpecifier
		public RuleCall getStringTypeSpecifierParserRuleCall_2() { return cStringTypeSpecifierParserRuleCall_2; }
	}

	public class NumericalTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericalTypeSpecifier:
		//	RealTypeSpecifier | IntegerTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//RealTypeSpecifier | IntegerTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealTypeSpecifier
		public RuleCall getRealTypeSpecifierParserRuleCall_0() { return cRealTypeSpecifierParserRuleCall_0; }

		//IntegerTypeSpecifier
		public RuleCall getIntegerTypeSpecifierParserRuleCall_1() { return cIntegerTypeSpecifierParserRuleCall_1; }
	}

	public class RealTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// * ('[' dimensions ']')? * / RealTypeSpecifier:
		//	{RealTypeSpecifier} "Real" ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//{RealTypeSpecifier} "Real" ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//{RealTypeSpecifier}
		public Action getRealTypeSpecifierAction_0() { return cRealTypeSpecifierAction_0; }

		//"Real"
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class IntegerTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		/// * ('[' dimensions ']')? * / IntegerTypeSpecifier:
		//	{IntegerTypeSpecifier} "Integer" ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//{IntegerTypeSpecifier} "Integer" ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//{IntegerTypeSpecifier}
		public Action getIntegerTypeSpecifierAction_0() { return cIntegerTypeSpecifierAction_0; }

		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class BooleanTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// * ('[' dimensions ']')? * / BooleanTypeSpecifier:
		//	{BooleanTypeSpecifier} "Boolean";
		public ParserRule getRule() { return rule; }

		//{BooleanTypeSpecifier} "Boolean"
		public Group getGroup() { return cGroup; }

		//{BooleanTypeSpecifier}
		public Action getBooleanTypeSpecifierAction_0() { return cBooleanTypeSpecifierAction_0; }

		//"Boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}

	public class StringTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// * ('[' dimensions ']')? * / StringTypeSpecifier:
		//	{StringTypeSpecifier} "String";
		public ParserRule getRule() { return rule; }

		//{StringTypeSpecifier} "String"
		public Group getGroup() { return cGroup; }

		//{StringTypeSpecifier}
		public Action getStringTypeSpecifierAction_0() { return cStringTypeSpecifierAction_0; }

		//"String"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class ComplexTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeSpecifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// * ('[' dimensions ']')? * / ComplexTypeSpecifier:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Expressions
		// * /Expression:
		//	ConditionalExpression | RangeExpression;
		public ParserRule getRule() { return rule; }

		//ConditionalExpression | RangeExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }

		//RangeExpression
		public RuleCall getRangeExpressionParserRuleCall_1() { return cRangeExpressionParserRuleCall_1; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCasesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCasesConditionalExpressionCaseParserRuleCall_1_0 = (RuleCall)cCasesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseifKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCasesConditionalExpressionCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Keyword cElseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElseExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseExpressionExpressionParserRuleCall_4_0 = (RuleCall)cElseExpressionAssignment_4.eContents().get(0);
		
		//ConditionalExpression:
		//	"if" cases+=ConditionalExpressionCase ("elseif" cases+=ConditionalExpressionCase)* "else" elseExpression=Expression;
		public ParserRule getRule() { return rule; }

		//"if" cases+=ConditionalExpressionCase ("elseif" cases+=ConditionalExpressionCase)* "else" elseExpression=Expression
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cases+=ConditionalExpressionCase
		public Assignment getCasesAssignment_1() { return cCasesAssignment_1; }

		//ConditionalExpressionCase
		public RuleCall getCasesConditionalExpressionCaseParserRuleCall_1_0() { return cCasesConditionalExpressionCaseParserRuleCall_1_0; }

		//("elseif" cases+=ConditionalExpressionCase)*
		public Group getGroup_2() { return cGroup_2; }

		//"elseif"
		public Keyword getElseifKeyword_2_0() { return cElseifKeyword_2_0; }

		//cases+=ConditionalExpressionCase
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//ConditionalExpressionCase
		public RuleCall getCasesConditionalExpressionCaseParserRuleCall_2_1_0() { return cCasesConditionalExpressionCaseParserRuleCall_2_1_0; }

		//"else"
		public Keyword getElseKeyword_3() { return cElseKeyword_3; }

		//elseExpression=Expression
		public Assignment getElseExpressionAssignment_4() { return cElseExpressionAssignment_4; }

		//Expression
		public RuleCall getElseExpressionExpressionParserRuleCall_4_0() { return cElseExpressionExpressionParserRuleCall_4_0; }
	}

	public class ConditionalExpressionCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpressionCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionExpressionExpressionParserRuleCall_0_0 = (RuleCall)cConditionExpressionAssignment_0.eContents().get(0);
		private final Keyword cThenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cThenExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenExpressionExpressionParserRuleCall_2_0 = (RuleCall)cThenExpressionAssignment_2.eContents().get(0);
		
		//ConditionalExpressionCase:
		//	conditionExpression=Expression "then" thenExpression=Expression;
		public ParserRule getRule() { return rule; }

		//conditionExpression=Expression "then" thenExpression=Expression
		public Group getGroup() { return cGroup; }

		//conditionExpression=Expression
		public Assignment getConditionExpressionAssignment_0() { return cConditionExpressionAssignment_0; }

		//Expression
		public RuleCall getConditionExpressionExpressionParserRuleCall_0_0() { return cConditionExpressionExpressionParserRuleCall_0_0; }

		//"then"
		public Keyword getThenKeyword_1() { return cThenKeyword_1; }

		//thenExpression=Expression
		public Assignment getThenExpressionAssignment_2() { return cThenExpressionAssignment_2; }

		//Expression
		public RuleCall getThenExpressionExpressionParserRuleCall_2_0() { return cThenExpressionExpressionParserRuleCall_2_0; }
	}

	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRangeExpressionExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionsLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cColonKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExpressionsLogicalOrExpressionParserRuleCall_1_3_1_0 = (RuleCall)cExpressionsAssignment_1_3_1.eContents().get(0);
		
		//RangeExpression returns Expression:
		//	LogicalOrExpression ({RangeExpression.expressions+=current} ":" expressions+=LogicalOrExpression (":"
		//	expressions+=LogicalOrExpression)?)?;
		public ParserRule getRule() { return rule; }

		//LogicalOrExpression ({RangeExpression.expressions+=current} ":" expressions+=LogicalOrExpression (":"
		//expressions+=LogicalOrExpression)?)?
		public Group getGroup() { return cGroup; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }

		//({RangeExpression.expressions+=current} ":" expressions+=LogicalOrExpression (":" expressions+=LogicalOrExpression)?)?
		public Group getGroup_1() { return cGroup_1; }

		//{RangeExpression.expressions+=current}
		public Action getRangeExpressionExpressionsAction_1_0() { return cRangeExpressionExpressionsAction_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//expressions+=LogicalOrExpression
		public Assignment getExpressionsAssignment_1_2() { return cExpressionsAssignment_1_2; }

		//LogicalOrExpression
		public RuleCall getExpressionsLogicalOrExpressionParserRuleCall_1_2_0() { return cExpressionsLogicalOrExpressionParserRuleCall_1_2_0; }

		//(":" expressions+=LogicalOrExpression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//":"
		public Keyword getColonKeyword_1_3_0() { return cColonKeyword_1_3_0; }

		//expressions+=LogicalOrExpression
		public Assignment getExpressionsAssignment_1_3_1() { return cExpressionsAssignment_1_3_1; }

		//LogicalOrExpression
		public RuleCall getExpressionsLogicalOrExpressionParserRuleCall_1_3_1_0() { return cExpressionsLogicalOrExpressionParserRuleCall_1_3_1_0; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsLogicalAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//LogicalOrExpression returns Expression:
		//	LogicalAndExpression ({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?;
		public ParserRule getRule() { return rule; }

		//LogicalAndExpression ({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?
		public Group getGroup() { return cGroup; }

		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }

		//({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalOrExpression.operands+=current}
		public Action getLogicalOrExpressionOperandsAction_1_0() { return cLogicalOrExpressionOperandsAction_1_0; }

		//("or" operands+=LogicalAndExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"or"
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }

		//operands+=LogicalAndExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//LogicalAndExpression
		public RuleCall getOperandsLogicalAndExpressionParserRuleCall_1_1_1_0() { return cOperandsLogicalAndExpressionParserRuleCall_1_1_1_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsLogicalNotExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//LogicalAndExpression returns Expression:
		//	LogicalNotExpression ({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?;
		public ParserRule getRule() { return rule; }

		//LogicalNotExpression ({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?
		public Group getGroup() { return cGroup; }

		//LogicalNotExpression
		public RuleCall getLogicalNotExpressionParserRuleCall_0() { return cLogicalNotExpressionParserRuleCall_0; }

		//({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalAndExpression.operands+=current}
		public Action getLogicalAndExpressionOperandsAction_1_0() { return cLogicalAndExpressionOperandsAction_1_0; }

		//("and" operands+=LogicalNotExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"and"
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//operands+=LogicalNotExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//LogicalNotExpression
		public RuleCall getOperandsLogicalNotExpressionParserRuleCall_1_1_1_0() { return cOperandsLogicalNotExpressionParserRuleCall_1_1_1_0; }
	}

	public class LogicalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//LogicalNotExpression returns Expression:
		//	RelationalExpression | {LogicalNotExpression} "not" operand=RelationalExpression;
		public ParserRule getRule() { return rule; }

		//RelationalExpression | {LogicalNotExpression} "not" operand=RelationalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//{LogicalNotExpression} "not" operand=RelationalExpression
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalNotExpression}
		public Action getLogicalNotExpressionAction_1_0() { return cLogicalNotExpressionAction_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }

		//operand=RelationalExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//RelationalExpression
		public RuleCall getOperandRelationalExpressionParserRuleCall_1_2_0() { return cOperandRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorsRelationalOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorsAssignment_1_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsAddSubtractExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//	AddSubtractExpression ({RelationalExpression.operands+=current} (operators+=RelationalOperator
		//	operands+=AddSubtractExpression)+)?;
		public ParserRule getRule() { return rule; }

		//AddSubtractExpression ({RelationalExpression.operands+=current} (operators+=RelationalOperator
		//operands+=AddSubtractExpression)+)?
		public Group getGroup() { return cGroup; }

		//AddSubtractExpression
		public RuleCall getAddSubtractExpressionParserRuleCall_0() { return cAddSubtractExpressionParserRuleCall_0; }

		//({RelationalExpression.operands+=current} (operators+=RelationalOperator operands+=AddSubtractExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{RelationalExpression.operands+=current}
		public Action getRelationalExpressionOperandsAction_1_0() { return cRelationalExpressionOperandsAction_1_0; }

		//(operators+=RelationalOperator operands+=AddSubtractExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operators+=RelationalOperator
		public Assignment getOperatorsAssignment_1_1_0() { return cOperatorsAssignment_1_1_0; }

		//RelationalOperator
		public RuleCall getOperatorsRelationalOperatorEnumRuleCall_1_1_0_0() { return cOperatorsRelationalOperatorEnumRuleCall_1_1_0_0; }

		//operands+=AddSubtractExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//AddSubtractExpression
		public RuleCall getOperandsAddSubtractExpressionParserRuleCall_1_1_1_0() { return cOperandsAddSubtractExpressionParserRuleCall_1_1_1_0; }
	}

	public class AddSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddSubtractExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorsAddSubtractOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorsAssignment_1_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsMultiplyDivideExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//AddSubtractExpression returns Expression:
		//	MultiplyDivideExpression ({AddSubtractExpression.operands+=current} (operators+=AddSubtractOperator
		//	operands+=MultiplyDivideExpression)+)?;
		public ParserRule getRule() { return rule; }

		//MultiplyDivideExpression ({AddSubtractExpression.operands+=current} (operators+=AddSubtractOperator
		//operands+=MultiplyDivideExpression)+)?
		public Group getGroup() { return cGroup; }

		//MultiplyDivideExpression
		public RuleCall getMultiplyDivideExpressionParserRuleCall_0() { return cMultiplyDivideExpressionParserRuleCall_0; }

		//({AddSubtractExpression.operands+=current} (operators+=AddSubtractOperator operands+=MultiplyDivideExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AddSubtractExpression.operands+=current}
		public Action getAddSubtractExpressionOperandsAction_1_0() { return cAddSubtractExpressionOperandsAction_1_0; }

		//(operators+=AddSubtractOperator operands+=MultiplyDivideExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operators+=AddSubtractOperator
		public Assignment getOperatorsAssignment_1_1_0() { return cOperatorsAssignment_1_1_0; }

		//AddSubtractOperator
		public RuleCall getOperatorsAddSubtractOperatorEnumRuleCall_1_1_0_0() { return cOperatorsAddSubtractOperatorEnumRuleCall_1_1_0_0; }

		//operands+=MultiplyDivideExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//MultiplyDivideExpression
		public RuleCall getOperandsMultiplyDivideExpressionParserRuleCall_1_1_1_0() { return cOperandsMultiplyDivideExpressionParserRuleCall_1_1_1_0; }
	}

	public class MultiplyDivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyDivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplyDivideExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorsMultiplyDivideOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorsAssignment_1_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsPowerExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//MultiplyDivideExpression returns Expression:
		//	PowerExpression ({MultiplyDivideExpression.operands+=current} (operators+=MultiplyDivideOperator
		//	operands+=PowerExpression)+)?;
		public ParserRule getRule() { return rule; }

		//PowerExpression ({MultiplyDivideExpression.operands+=current} (operators+=MultiplyDivideOperator
		//operands+=PowerExpression)+)?
		public Group getGroup() { return cGroup; }

		//PowerExpression
		public RuleCall getPowerExpressionParserRuleCall_0() { return cPowerExpressionParserRuleCall_0; }

		//({MultiplyDivideExpression.operands+=current} (operators+=MultiplyDivideOperator operands+=PowerExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{MultiplyDivideExpression.operands+=current}
		public Action getMultiplyDivideExpressionOperandsAction_1_0() { return cMultiplyDivideExpressionOperandsAction_1_0; }

		//(operators+=MultiplyDivideOperator operands+=PowerExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operators+=MultiplyDivideOperator
		public Assignment getOperatorsAssignment_1_1_0() { return cOperatorsAssignment_1_1_0; }

		//MultiplyDivideOperator
		public RuleCall getOperatorsMultiplyDivideOperatorEnumRuleCall_1_1_0_0() { return cOperatorsMultiplyDivideOperatorEnumRuleCall_1_1_0_0; }

		//operands+=PowerExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//PowerExpression
		public RuleCall getOperandsPowerExpressionParserRuleCall_1_1_1_0() { return cOperandsPowerExpressionParserRuleCall_1_1_1_0; }
	}

	public class PowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryMinusExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorPowerOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExponentUnaryMinusExpressionParserRuleCall_1_2_0 = (RuleCall)cExponentAssignment_1_2.eContents().get(0);
		
		//PowerExpression returns Expression:
		//	UnaryMinusExpression ({PowerExpression.operands+=current} operator=PowerOperator exponent=UnaryMinusExpression)?;
		public ParserRule getRule() { return rule; }

		//UnaryMinusExpression ({PowerExpression.operands+=current} operator=PowerOperator exponent=UnaryMinusExpression)?
		public Group getGroup() { return cGroup; }

		//UnaryMinusExpression
		public RuleCall getUnaryMinusExpressionParserRuleCall_0() { return cUnaryMinusExpressionParserRuleCall_0; }

		//({PowerExpression.operands+=current} operator=PowerOperator exponent=UnaryMinusExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{PowerExpression.operands+=current}
		public Action getPowerExpressionOperandsAction_1_0() { return cPowerExpressionOperandsAction_1_0; }

		//operator=PowerOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//PowerOperator
		public RuleCall getOperatorPowerOperatorEnumRuleCall_1_1_0() { return cOperatorPowerOperatorEnumRuleCall_1_1_0; }

		//exponent=UnaryMinusExpression
		public Assignment getExponentAssignment_1_2() { return cExponentAssignment_1_2; }

		//UnaryMinusExpression
		public RuleCall getExponentUnaryMinusExpressionParserRuleCall_1_2_0() { return cExponentUnaryMinusExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryMinusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryMinusExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryMinusExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//UnaryMinusExpression returns Expression:
		//	PrimaryExpression | {UnaryMinusExpression} "-" operand=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression | {UnaryMinusExpression} "-" operand=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{UnaryMinusExpression} "-" operand=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryMinusExpression}
		public Action getUnaryMinusExpressionAction_1_0() { return cUnaryMinusExpressionAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//operand=PrimaryExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getOperandPrimaryExpressionParserRuleCall_1_2_0() { return cOperandPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSymbolReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMatrixConstructionOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBeginExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEndExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimaryExpression returns Expression:
		//	Literal | SymbolReference | ParenthesizedExpression | MatrixConstructionOperator | //	ArrayConstructionOperator |
		//	BeginExpression | EndExpression;
		public ParserRule getRule() { return rule; }

		//Literal | SymbolReference | ParenthesizedExpression | MatrixConstructionOperator | //	ArrayConstructionOperator |
		//BeginExpression | EndExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//SymbolReference
		public RuleCall getSymbolReferenceParserRuleCall_1() { return cSymbolReferenceParserRuleCall_1; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_2() { return cParenthesizedExpressionParserRuleCall_2; }

		//MatrixConstructionOperator
		public RuleCall getMatrixConstructionOperatorParserRuleCall_3() { return cMatrixConstructionOperatorParserRuleCall_3; }

		////	ArrayConstructionOperator |
		//BeginExpression
		public RuleCall getBeginExpressionParserRuleCall_4() { return cBeginExpressionParserRuleCall_4; }

		//EndExpression
		public RuleCall getEndExpressionParserRuleCall_5() { return cEndExpressionParserRuleCall_5; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericalLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	NumericalLiteral | BooleanLiteral | StringLiteral;
		public ParserRule getRule() { return rule; }

		//NumericalLiteral | BooleanLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericalLiteral
		public RuleCall getNumericalLiteralParserRuleCall_0() { return cNumericalLiteralParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
	}

	public class NumericalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericalLiteral:
		//	RealLiteral | IntegerLiteral;
		public ParserRule getRule() { return rule; }

		//RealLiteral | IntegerLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_0() { return cRealLiteralParserRuleCall_0; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueREALTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RealLiteral:
		//	value=REAL ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//value=REAL ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//value=REAL
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0_0() { return cValueREALTerminalRuleCall_0_0; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_1_1_0() { return cUnitUnitExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTEGERTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//IntegerLiteral:
		//	value=INTEGER ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//value=INTEGER ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//value=INTEGER
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_0_0() { return cValueINTEGERTerminalRuleCall_0_0; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_1_1_0() { return cUnitUnitExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanKindEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BooleanKind;
		public ParserRule getRule() { return rule; }

		//value=BooleanKind
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BooleanKind
		public RuleCall getValueBooleanKindEnumRuleCall_0() { return cValueBooleanKindEnumRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersIDENTTerminalRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//Name:
		//	identifiers+=IDENT ("::" identifiers+=IDENT)*;
		public ParserRule getRule() { return rule; }

		//identifiers+=IDENT ("::" identifiers+=IDENT)*
		public Group getGroup() { return cGroup; }

		//identifiers+=IDENT
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//IDENT
		public RuleCall getIdentifiersIDENTTerminalRuleCall_0_0() { return cIdentifiersIDENTTerminalRuleCall_0_0; }

		//("::" identifiers+=IDENT)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//identifiers+=IDENT
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//IDENT
		public RuleCall getIdentifiersIDENTTerminalRuleCall_1_1_0() { return cIdentifiersIDENTTerminalRuleCall_1_1_0; }
	}

	public class FunctionArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionArgumentList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_0_0_0 = (RuleCall)cArgumentsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_0_1_0_1_0 = (RuleCall)cArgumentsAssignment_0_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cNamedArgumentsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cNamedArgumentsNamedArgumentParserRuleCall_0_1_1_1_0 = (RuleCall)cNamedArgumentsAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNamedArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNamedArgumentsNamedArgumentParserRuleCall_1_0_0 = (RuleCall)cNamedArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNamedArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0 = (RuleCall)cNamedArgumentsAssignment_1_1_1.eContents().get(0);
		
		//FunctionArgumentList:
		//	arguments+=Expression (("," arguments+=Expression)* ("," namedArguments+=NamedArgument)*)
		//	/ *| 'for' forIndexList=ForIndexList* / | namedArguments+=NamedArgument ("," namedArguments+=NamedArgument)*;
		public ParserRule getRule() { return rule; }

		//arguments+=Expression (("," arguments+=Expression)* ("," namedArguments+=NamedArgument)*)
		/// *| 'for' forIndexList=ForIndexList* / | namedArguments+=NamedArgument ("," namedArguments+=NamedArgument)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//arguments+=Expression (("," arguments+=Expression)* ("," namedArguments+=NamedArgument)*)
		/// *| 'for' forIndexList=ForIndexList* /
		public Group getGroup_0() { return cGroup_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_0_0() { return cArgumentsAssignment_0_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_0_0_0() { return cArgumentsExpressionParserRuleCall_0_0_0; }

		//("," arguments+=Expression)* ("," namedArguments+=NamedArgument)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//("," arguments+=Expression)*
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//","
		public Keyword getCommaKeyword_0_1_0_0() { return cCommaKeyword_0_1_0_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_0_1_0_1() { return cArgumentsAssignment_0_1_0_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_0_1_0_1_0() { return cArgumentsExpressionParserRuleCall_0_1_0_1_0; }

		//("," namedArguments+=NamedArgument)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//","
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }

		//namedArguments+=NamedArgument
		public Assignment getNamedArgumentsAssignment_0_1_1_1() { return cNamedArgumentsAssignment_0_1_1_1; }

		//NamedArgument
		public RuleCall getNamedArgumentsNamedArgumentParserRuleCall_0_1_1_1_0() { return cNamedArgumentsNamedArgumentParserRuleCall_0_1_1_1_0; }

		//namedArguments+=NamedArgument ("," namedArguments+=NamedArgument)*
		public Group getGroup_1() { return cGroup_1; }

		//namedArguments+=NamedArgument
		public Assignment getNamedArgumentsAssignment_1_0() { return cNamedArgumentsAssignment_1_0; }

		//NamedArgument
		public RuleCall getNamedArgumentsNamedArgumentParserRuleCall_1_0_0() { return cNamedArgumentsNamedArgumentParserRuleCall_1_0_0; }

		//("," namedArguments+=NamedArgument)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//namedArguments+=NamedArgument
		public Assignment getNamedArgumentsAssignment_1_1_1() { return cNamedArgumentsAssignment_1_1_1; }

		//NamedArgument
		public RuleCall getNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0() { return cNamedArgumentsNamedArgumentParserRuleCall_1_1_1_0; }
	}

	public class NamedArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//NamedArgument:
		//	identifier=IDENT "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//identifier=IDENT "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//identifier=IDENT
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//IDENT
		public RuleCall getIdentifierIDENTTerminalRuleCall_0_0() { return cIdentifierIDENTTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class SymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGlobalColonColonKeyword_0_0 = (Keyword)cGlobalAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cComponentReferencesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentReferencesComponentReferenceParserRuleCall_2_0 = (RuleCall)cComponentReferencesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFunctionCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cFunctionCallLeftParenthesisKeyword_3_0_0 = (Keyword)cFunctionCallAssignment_3_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentListFunctionArgumentListParserRuleCall_3_1_0 = (RuleCall)cArgumentListAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SymbolReference:
		//	global?="::"? name=Name componentReferences+=ComponentReference* (functionCall?="(" argumentList=FunctionArgumentList?
		//	")")?;
		public ParserRule getRule() { return rule; }

		//global?="::"? name=Name componentReferences+=ComponentReference* (functionCall?="(" argumentList=FunctionArgumentList?
		//")")?
		public Group getGroup() { return cGroup; }

		//global?="::"?
		public Assignment getGlobalAssignment_0() { return cGlobalAssignment_0; }

		//"::"
		public Keyword getGlobalColonColonKeyword_0_0() { return cGlobalColonColonKeyword_0_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//componentReferences+=ComponentReference*
		public Assignment getComponentReferencesAssignment_2() { return cComponentReferencesAssignment_2; }

		//ComponentReference
		public RuleCall getComponentReferencesComponentReferenceParserRuleCall_2_0() { return cComponentReferencesComponentReferenceParserRuleCall_2_0; }

		//(functionCall?="(" argumentList=FunctionArgumentList? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//functionCall?="("
		public Assignment getFunctionCallAssignment_3_0() { return cFunctionCallAssignment_3_0; }

		//"("
		public Keyword getFunctionCallLeftParenthesisKeyword_3_0_0() { return cFunctionCallLeftParenthesisKeyword_3_0_0; }

		//argumentList=FunctionArgumentList?
		public Assignment getArgumentListAssignment_3_1() { return cArgumentListAssignment_3_1; }

		//FunctionArgumentList
		public RuleCall getArgumentListFunctionArgumentListParserRuleCall_3_1_0() { return cArgumentListFunctionArgumentListParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class ComponentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComponentReference:
		//	ArrayReference | MemberReference;
		public ParserRule getRule() { return rule; }

		//ArrayReference | MemberReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayReference
		public RuleCall getArrayReferenceParserRuleCall_0() { return cArrayReferenceParserRuleCall_0; }

		//MemberReference
		public RuleCall getMemberReferenceParserRuleCall_1() { return cMemberReferenceParserRuleCall_1; }
	}

	public class ArrayReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubscriptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubscriptsSubscriptParserRuleCall_1_0 = (RuleCall)cSubscriptsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubscriptsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubscriptsSubscriptParserRuleCall_2_1_0 = (RuleCall)cSubscriptsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayReference:
		//	"[" subscripts+=Subscript ("," subscripts+=Subscript)* "]";
		public ParserRule getRule() { return rule; }

		//"[" subscripts+=Subscript ("," subscripts+=Subscript)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//subscripts+=Subscript
		public Assignment getSubscriptsAssignment_1() { return cSubscriptsAssignment_1; }

		//Subscript
		public RuleCall getSubscriptsSubscriptParserRuleCall_1_0() { return cSubscriptsSubscriptParserRuleCall_1_0; }

		//("," subscripts+=Subscript)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//subscripts+=Subscript
		public Assignment getSubscriptsAssignment_2_1() { return cSubscriptsAssignment_2_1; }

		//Subscript
		public RuleCall getSubscriptsSubscriptParserRuleCall_2_1_0() { return cSubscriptsSubscriptParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MemberReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//MemberReference:
		//	"." identifier=IDENT;
		public ParserRule getRule() { return rule; }

		//"." identifier=IDENT
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//identifier=IDENT
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//IDENT
		public RuleCall getIdentifierIDENTTerminalRuleCall_1_0() { return cIdentifierIDENTTerminalRuleCall_1_0; }
	}

	public class SubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subscript");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColonSubscriptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionSubscriptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Subscript:
		//	ColonSubscript | ExpressionSubscript;
		public ParserRule getRule() { return rule; }

		//ColonSubscript | ExpressionSubscript
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColonSubscript
		public RuleCall getColonSubscriptParserRuleCall_0() { return cColonSubscriptParserRuleCall_0; }

		//ExpressionSubscript
		public RuleCall getExpressionSubscriptParserRuleCall_1() { return cExpressionSubscriptParserRuleCall_1; }
	}

	public class ColonSubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColonSubscript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColonSubscriptAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ColonSubscript:
		//	{ColonSubscript} ":";
		public ParserRule getRule() { return rule; }

		//{ColonSubscript} ":"
		public Group getGroup() { return cGroup; }

		//{ColonSubscript}
		public Action getColonSubscriptAction_0() { return cColonSubscriptAction_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class ExpressionSubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionSubscript");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ExpressionSubscript:
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}

	public class MatrixConstructionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixConstructionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionListsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionListsExpressionListParserRuleCall_1_0 = (RuleCall)cExpressionListsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionListsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionListsExpressionListParserRuleCall_2_1_0 = (RuleCall)cExpressionListsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MatrixConstructionOperator:
		//	"[" expressionLists+=ExpressionList (";" expressionLists+=ExpressionList)* "]";
		public ParserRule getRule() { return rule; }

		//"[" expressionLists+=ExpressionList (";" expressionLists+=ExpressionList)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expressionLists+=ExpressionList
		public Assignment getExpressionListsAssignment_1() { return cExpressionListsAssignment_1; }

		//ExpressionList
		public RuleCall getExpressionListsExpressionListParserRuleCall_1_0() { return cExpressionListsExpressionListParserRuleCall_1_0; }

		//(";" expressionLists+=ExpressionList)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//expressionLists+=ExpressionList
		public Assignment getExpressionListsAssignment_2_1() { return cExpressionListsAssignment_2_1; }

		//ExpressionList
		public RuleCall getExpressionListsExpressionListParserRuleCall_2_1_0() { return cExpressionListsExpressionListParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	expressions+=Expression ("," expressions+=Expression)*;
		public ParserRule getRule() { return rule; }

		//expressions+=Expression ("," expressions+=Expression)*
		public Group getGroup() { return cGroup; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//("," expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression: //	'(' expressionList=OutputExpressionList ')';
		//	"(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		////	'(' expressionList=OutputExpressionList ')';
		//"(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		////	'(' expressionList=OutputExpressionList ')';
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class BeginExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeginExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBeginExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////OutputExpressionList :
		////	expressions+=FirstOutputExpression (expressions+=RightOutputExpression)*;
		////
		////FirstOutputExpression returns Expression :
		////	{EmptyExpression} | Expression;
		////
		////RightOutputExpression returns Expression :
		////	',' {EmptyExpression} | ',' Expression;
		//BeginExpression:
		//	{BeginExpression} "begin";
		public ParserRule getRule() { return rule; }

		//{BeginExpression} "begin"
		public Group getGroup() { return cGroup; }

		//{BeginExpression}
		public Action getBeginExpressionAction_0() { return cBeginExpressionAction_0; }

		//"begin"
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }
	}

	public class EndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EndExpression:
		//	{EndExpression} "end";
		public ParserRule getRule() { return rule; }

		//{EndExpression} "end"
		public Group getGroup() { return cGroup; }

		//{EndExpression}
		public Action getEndExpressionAction_0() { return cEndExpressionAction_0; }

		//"end"
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
	}

	public class UnitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumeratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumeratorUnitExpressionNumeratorParserRuleCall_0_0 = (RuleCall)cNumeratorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDenominatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDenominatorUnitExpressionDenominatorParserRuleCall_1_1_0 = (RuleCall)cDenominatorAssignment_1_1.eContents().get(0);
		
		////ForIndexList :
		////	indices+=ForIndex (',' indices+=ForIndex)*;
		////	
		////ForIndex :
		////	identifier=IDENT ('in' inExpression=Expression)?;
		/// *
		// * Unit expressions
		// * /UnitExpression:
		//	numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?;
		public ParserRule getRule() { return rule; }

		//numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?
		public Group getGroup() { return cGroup; }

		//numerator=UnitExpressionNumerator
		public Assignment getNumeratorAssignment_0() { return cNumeratorAssignment_0; }

		//UnitExpressionNumerator
		public RuleCall getNumeratorUnitExpressionNumeratorParserRuleCall_0_0() { return cNumeratorUnitExpressionNumeratorParserRuleCall_0_0; }

		//("/" denominator=UnitExpressionDenominator)?
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//denominator=UnitExpressionDenominator
		public Assignment getDenominatorAssignment_1_1() { return cDenominatorAssignment_1_1; }

		//UnitExpressionDenominator
		public RuleCall getDenominatorUnitExpressionDenominatorParserRuleCall_1_1_0() { return cDenominatorUnitExpressionDenominatorParserRuleCall_1_1_0; }
	}

	public class UnitExpressionNumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionNumerator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOneAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOneINTEGERTerminalRuleCall_0_0 = (RuleCall)cOneAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFactorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_0_0 = (RuleCall)cFactorsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_1_1_0 = (RuleCall)cFactorsAssignment_1_1_1.eContents().get(0);
		
		//UnitExpressionNumerator:
		//	one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*;
		public ParserRule getRule() { return rule; }

		//one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//one=INTEGER
		public Assignment getOneAssignment_0() { return cOneAssignment_0; }

		//INTEGER
		public RuleCall getOneINTEGERTerminalRuleCall_0_0() { return cOneINTEGERTerminalRuleCall_0_0; }

		//factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1() { return cGroup_1; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_0() { return cFactorsAssignment_1_0; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_0_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_0_0; }

		//("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_1_1() { return cFactorsAssignment_1_1_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_1_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_1_1_0; }
	}

	public class UnitExpressionDenominatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionDenominator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_1_0 = (RuleCall)cFactorsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFactorsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_2_1_0 = (RuleCall)cFactorsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//UnitExpressionDenominator:
		//	factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")";
		public ParserRule getRule() { return rule; }

		//factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_0_0() { return cFactorsUnitExpressionFactorParserRuleCall_0_0; }

		//"(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_1() { return cFactorsAssignment_1_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_1_0; }

		//("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"*"
		public Keyword getAsteriskKeyword_1_2_0() { return cAsteriskKeyword_1_2_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_2_1() { return cFactorsAssignment_1_2_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_2_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class UnitExpressionFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandIDENTTerminalRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExponentUnitExpressionExponentParserRuleCall_1_1_0 = (RuleCall)cExponentAssignment_1_1.eContents().get(0);
		
		//UnitExpressionFactor:
		//	operand=IDENT ("^" exponent=UnitExpressionExponent)?;
		public ParserRule getRule() { return rule; }

		//operand=IDENT ("^" exponent=UnitExpressionExponent)?
		public Group getGroup() { return cGroup; }

		//operand=IDENT
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }

		//IDENT
		public RuleCall getOperandIDENTTerminalRuleCall_0_0() { return cOperandIDENTTerminalRuleCall_0_0; }

		//("^" exponent=UnitExpressionExponent)?
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//exponent=UnitExpressionExponent
		public Assignment getExponentAssignment_1_1() { return cExponentAssignment_1_1; }

		//UnitExpressionExponent
		public RuleCall getExponentUnitExpressionExponentParserRuleCall_1_1_0() { return cExponentUnitExpressionExponentParserRuleCall_1_1_0; }
	}

	public class UnitExpressionExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionExponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegativeHyphenMinusKeyword_0_0 = (Keyword)cNegativeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UnitExpressionExponent:
		//	negative?="-"? value=INTEGER;
		public ParserRule getRule() { return rule; }

		//negative?="-"? value=INTEGER
		public Group getGroup() { return cGroup; }

		//negative?="-"?
		public Assignment getNegativeAssignment_0() { return cNegativeAssignment_0; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_0_0() { return cNegativeHyphenMinusKeyword_0_0; }

		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
	}
	
	
	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThanLessThanSignKeyword_0_0 = (Keyword)cLessThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanOrEqualToEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLessThanOrEqualToEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanGreaterThanSignKeyword_2_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanOrEqualToEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterThanOrEqualToEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualToEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualToEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualToEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualToEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualToLessThanSignGreaterThanSignKeyword_5_0 = (Keyword)cNotEqualToEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationalOperator:
		//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=" | EqualTo="==" | NotEqualTo="<>";
		public EnumRule getRule() { return rule; }

		//LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=" | EqualTo="==" | NotEqualTo="<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_0() { return cLessThanEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThanLessThanSignKeyword_0_0() { return cLessThanLessThanSignKeyword_0_0; }

		//LessThanOrEqualTo="<="
		public EnumLiteralDeclaration getLessThanOrEqualToEnumLiteralDeclaration_1() { return cLessThanOrEqualToEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0() { return cLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0; }

		//GreaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_2() { return cGreaterThanEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_2_0() { return cGreaterThanGreaterThanSignKeyword_2_0; }

		//GreaterThanOrEqualTo=">="
		public EnumLiteralDeclaration getGreaterThanOrEqualToEnumLiteralDeclaration_3() { return cGreaterThanOrEqualToEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0; }

		//EqualTo="=="
		public EnumLiteralDeclaration getEqualToEnumLiteralDeclaration_4() { return cEqualToEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEqualToEqualsSignEqualsSignKeyword_4_0() { return cEqualToEqualsSignEqualsSignKeyword_4_0; }

		//NotEqualTo="<>"
		public EnumLiteralDeclaration getNotEqualToEnumLiteralDeclaration_5() { return cNotEqualToEnumLiteralDeclaration_5; }

		//"<>"
		public Keyword getNotEqualToLessThanSignGreaterThanSignKeyword_5_0() { return cNotEqualToLessThanSignGreaterThanSignKeyword_5_0; }
	}

	public class AddSubtractOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AddSubtractOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractHyphenMinusKeyword_1_0 = (Keyword)cSubtractEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AddSubtractOperator:
		//	Add="+" | Subtract="-";
		public EnumRule getRule() { return rule; }

		//Add="+" | Subtract="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }

		//Subtract="-"
		public EnumLiteralDeclaration getSubtractEnumLiteralDeclaration_1() { return cSubtractEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubtractHyphenMinusKeyword_1_0() { return cSubtractHyphenMinusKeyword_1_0; }
	}

	public class MultiplyDivideOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyDivideOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiplyAsteriskKeyword_0_0 = (Keyword)cMultiplyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivideSolidusKeyword_1_0 = (Keyword)cDivideEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cElementWiseMultiplyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cElementWiseMultiplyFullStopAsteriskKeyword_2_0 = (Keyword)cElementWiseMultiplyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cElementWiseDivideEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cElementWiseDivideFullStopSolidusKeyword_3_0 = (Keyword)cElementWiseDivideEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MultiplyDivideOperator:
		//	Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./";
		public EnumRule getRule() { return rule; }

		//Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Multiply="*"
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_0() { return cMultiplyEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_0_0() { return cMultiplyAsteriskKeyword_0_0; }

		//Divide="/"
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_1() { return cDivideEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivideSolidusKeyword_1_0() { return cDivideSolidusKeyword_1_0; }

		//ElementWiseMultiply=".*"
		public EnumLiteralDeclaration getElementWiseMultiplyEnumLiteralDeclaration_2() { return cElementWiseMultiplyEnumLiteralDeclaration_2; }

		//".*"
		public Keyword getElementWiseMultiplyFullStopAsteriskKeyword_2_0() { return cElementWiseMultiplyFullStopAsteriskKeyword_2_0; }

		//ElementWiseDivide="./"
		public EnumLiteralDeclaration getElementWiseDivideEnumLiteralDeclaration_3() { return cElementWiseDivideEnumLiteralDeclaration_3; }

		//"./"
		public Keyword getElementWiseDivideFullStopSolidusKeyword_3_0() { return cElementWiseDivideFullStopSolidusKeyword_3_0; }
	}

	public class PowerOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PowerOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPowerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPowerCircumflexAccentKeyword_0_0 = (Keyword)cPowerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cElementWisePowerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cElementWisePowerFullStopCircumflexAccentKeyword_1_0 = (Keyword)cElementWisePowerEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PowerOperator:
		//	Power="^" | ElementWisePower=".^";
		public EnumRule getRule() { return rule; }

		//Power="^" | ElementWisePower=".^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Power="^"
		public EnumLiteralDeclaration getPowerEnumLiteralDeclaration_0() { return cPowerEnumLiteralDeclaration_0; }

		//"^"
		public Keyword getPowerCircumflexAccentKeyword_0_0() { return cPowerCircumflexAccentKeyword_0_0; }

		//ElementWisePower=".^"
		public EnumLiteralDeclaration getElementWisePowerEnumLiteralDeclaration_1() { return cElementWisePowerEnumLiteralDeclaration_1; }

		//".^"
		public Keyword getElementWisePowerFullStopCircumflexAccentKeyword_1_0() { return cElementWisePowerFullStopCircumflexAccentKeyword_1_0; }
	}

	public class BooleanKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFalseFalseKeyword_0_0 = (Keyword)cFalseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTrueTrueKeyword_1_0 = (Keyword)cTrueEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanKind:
		//	False="false" | True="true";
		public EnumRule getRule() { return rule; }

		//False="false" | True="true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//False="false"
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_0() { return cFalseEnumLiteralDeclaration_0; }

		//"false"
		public Keyword getFalseFalseKeyword_0_0() { return cFalseFalseKeyword_0_0; }

		//True="true"
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_1() { return cTrueEnumLiteralDeclaration_1; }

		//"true"
		public Keyword getTrueTrueKeyword_1_0() { return cTrueTrueKeyword_1_0; }
	}
	
	private MscriptElements pMscript;
	private PackageDefinitionElements pPackageDefinition;
	private PackageDefinitionElementElements pPackageDefinitionElement;
	private EnumerationDefinitionElements pEnumerationDefinition;
	private EnumerationLiteralDefinitionElements pEnumerationLiteralDefinition;
	private DataTypeSpecifierElements pDataTypeSpecifier;
	private PrimitiveTypeSpecifierElements pPrimitiveTypeSpecifier;
	private NumericalTypeSpecifierElements pNumericalTypeSpecifier;
	private RealTypeSpecifierElements pRealTypeSpecifier;
	private IntegerTypeSpecifierElements pIntegerTypeSpecifier;
	private BooleanTypeSpecifierElements pBooleanTypeSpecifier;
	private StringTypeSpecifierElements pStringTypeSpecifier;
	private ComplexTypeSpecifierElements pComplexTypeSpecifier;
	private ExpressionElements pExpression;
	private ConditionalExpressionElements pConditionalExpression;
	private ConditionalExpressionCaseElements pConditionalExpressionCase;
	private RangeExpressionElements pRangeExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private LogicalNotExpressionElements pLogicalNotExpression;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private AddSubtractExpressionElements pAddSubtractExpression;
	private AddSubtractOperatorElements unknownRuleAddSubtractOperator;
	private MultiplyDivideExpressionElements pMultiplyDivideExpression;
	private MultiplyDivideOperatorElements unknownRuleMultiplyDivideOperator;
	private PowerExpressionElements pPowerExpression;
	private PowerOperatorElements unknownRulePowerOperator;
	private UnaryMinusExpressionElements pUnaryMinusExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private LiteralElements pLiteral;
	private NumericalLiteralElements pNumericalLiteral;
	private RealLiteralElements pRealLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private BooleanKindElements unknownRuleBooleanKind;
	private StringLiteralElements pStringLiteral;
	private NameElements pName;
	private FunctionArgumentListElements pFunctionArgumentList;
	private NamedArgumentElements pNamedArgument;
	private SymbolReferenceElements pSymbolReference;
	private ComponentReferenceElements pComponentReference;
	private ArrayReferenceElements pArrayReference;
	private MemberReferenceElements pMemberReference;
	private SubscriptElements pSubscript;
	private ColonSubscriptElements pColonSubscript;
	private ExpressionSubscriptElements pExpressionSubscript;
	private MatrixConstructionOperatorElements pMatrixConstructionOperator;
	private ExpressionListElements pExpressionList;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private BeginExpressionElements pBeginExpression;
	private EndExpressionElements pEndExpression;
	private UnitExpressionElements pUnitExpression;
	private UnitExpressionNumeratorElements pUnitExpressionNumerator;
	private UnitExpressionDenominatorElements pUnitExpressionDenominator;
	private UnitExpressionFactorElements pUnitExpressionFactor;
	private UnitExpressionExponentElements pUnitExpressionExponent;
	private TerminalRule tIDENT;
	private TerminalRule tSTRING;
	private TerminalRule tREAL;
	private TerminalRule tINTEGER;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public MscriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Mscript:
	//	packages+=PackageDefinition*;
	public MscriptElements getMscriptAccess() {
		return (pMscript != null) ? pMscript : (pMscript = new MscriptElements());
	}
	
	public ParserRule getMscriptRule() {
		return getMscriptAccess().getRule();
	}

	//PackageDefinition:
	//	"package" name=Name "{" elements+=PackageDefinitionElement* "}";
	public PackageDefinitionElements getPackageDefinitionAccess() {
		return (pPackageDefinition != null) ? pPackageDefinition : (pPackageDefinition = new PackageDefinitionElements());
	}
	
	public ParserRule getPackageDefinitionRule() {
		return getPackageDefinitionAccess().getRule();
	}

	//PackageDefinitionElement:
	//	PackageDefinition | EnumerationDefinition;
	public PackageDefinitionElementElements getPackageDefinitionElementAccess() {
		return (pPackageDefinitionElement != null) ? pPackageDefinitionElement : (pPackageDefinitionElement = new PackageDefinitionElementElements());
	}
	
	public ParserRule getPackageDefinitionElementRule() {
		return getPackageDefinitionElementAccess().getRule();
	}

	/// *
	// * Enumeration
	// * /EnumerationDefinition:
	//	"enumeration" name=IDENT "{" (literals+=EnumerationLiteralDefinition ("," literals+=EnumerationLiteralDefinition)*)?
	//	"}";
	public EnumerationDefinitionElements getEnumerationDefinitionAccess() {
		return (pEnumerationDefinition != null) ? pEnumerationDefinition : (pEnumerationDefinition = new EnumerationDefinitionElements());
	}
	
	public ParserRule getEnumerationDefinitionRule() {
		return getEnumerationDefinitionAccess().getRule();
	}

	//EnumerationLiteralDefinition:
	//	name=IDENT;
	public EnumerationLiteralDefinitionElements getEnumerationLiteralDefinitionAccess() {
		return (pEnumerationLiteralDefinition != null) ? pEnumerationLiteralDefinition : (pEnumerationLiteralDefinition = new EnumerationLiteralDefinitionElements());
	}
	
	public ParserRule getEnumerationLiteralDefinitionRule() {
		return getEnumerationLiteralDefinitionAccess().getRule();
	}

	/// *
	// * Data type specifier
	// * /DataTypeSpecifier:
	//	PrimitiveTypeSpecifier | ComplexTypeSpecifier;
	public DataTypeSpecifierElements getDataTypeSpecifierAccess() {
		return (pDataTypeSpecifier != null) ? pDataTypeSpecifier : (pDataTypeSpecifier = new DataTypeSpecifierElements());
	}
	
	public ParserRule getDataTypeSpecifierRule() {
		return getDataTypeSpecifierAccess().getRule();
	}

	//PrimitiveTypeSpecifier:
	//	NumericalTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
	public PrimitiveTypeSpecifierElements getPrimitiveTypeSpecifierAccess() {
		return (pPrimitiveTypeSpecifier != null) ? pPrimitiveTypeSpecifier : (pPrimitiveTypeSpecifier = new PrimitiveTypeSpecifierElements());
	}
	
	public ParserRule getPrimitiveTypeSpecifierRule() {
		return getPrimitiveTypeSpecifierAccess().getRule();
	}

	//NumericalTypeSpecifier:
	//	RealTypeSpecifier | IntegerTypeSpecifier;
	public NumericalTypeSpecifierElements getNumericalTypeSpecifierAccess() {
		return (pNumericalTypeSpecifier != null) ? pNumericalTypeSpecifier : (pNumericalTypeSpecifier = new NumericalTypeSpecifierElements());
	}
	
	public ParserRule getNumericalTypeSpecifierRule() {
		return getNumericalTypeSpecifierAccess().getRule();
	}

	/// * ('[' dimensions ']')? * / RealTypeSpecifier:
	//	{RealTypeSpecifier} "Real" ("(" unit=UnitExpression ")")?;
	public RealTypeSpecifierElements getRealTypeSpecifierAccess() {
		return (pRealTypeSpecifier != null) ? pRealTypeSpecifier : (pRealTypeSpecifier = new RealTypeSpecifierElements());
	}
	
	public ParserRule getRealTypeSpecifierRule() {
		return getRealTypeSpecifierAccess().getRule();
	}

	/// * ('[' dimensions ']')? * / IntegerTypeSpecifier:
	//	{IntegerTypeSpecifier} "Integer" ("(" unit=UnitExpression ")")?;
	public IntegerTypeSpecifierElements getIntegerTypeSpecifierAccess() {
		return (pIntegerTypeSpecifier != null) ? pIntegerTypeSpecifier : (pIntegerTypeSpecifier = new IntegerTypeSpecifierElements());
	}
	
	public ParserRule getIntegerTypeSpecifierRule() {
		return getIntegerTypeSpecifierAccess().getRule();
	}

	/// * ('[' dimensions ']')? * / BooleanTypeSpecifier:
	//	{BooleanTypeSpecifier} "Boolean";
	public BooleanTypeSpecifierElements getBooleanTypeSpecifierAccess() {
		return (pBooleanTypeSpecifier != null) ? pBooleanTypeSpecifier : (pBooleanTypeSpecifier = new BooleanTypeSpecifierElements());
	}
	
	public ParserRule getBooleanTypeSpecifierRule() {
		return getBooleanTypeSpecifierAccess().getRule();
	}

	/// * ('[' dimensions ']')? * / StringTypeSpecifier:
	//	{StringTypeSpecifier} "String";
	public StringTypeSpecifierElements getStringTypeSpecifierAccess() {
		return (pStringTypeSpecifier != null) ? pStringTypeSpecifier : (pStringTypeSpecifier = new StringTypeSpecifierElements());
	}
	
	public ParserRule getStringTypeSpecifierRule() {
		return getStringTypeSpecifierAccess().getRule();
	}

	/// * ('[' dimensions ']')? * / ComplexTypeSpecifier:
	//	name=Name;
	public ComplexTypeSpecifierElements getComplexTypeSpecifierAccess() {
		return (pComplexTypeSpecifier != null) ? pComplexTypeSpecifier : (pComplexTypeSpecifier = new ComplexTypeSpecifierElements());
	}
	
	public ParserRule getComplexTypeSpecifierRule() {
		return getComplexTypeSpecifierAccess().getRule();
	}

	/// *
	// * Expressions
	// * /Expression:
	//	ConditionalExpression | RangeExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ConditionalExpression:
	//	"if" cases+=ConditionalExpressionCase ("elseif" cases+=ConditionalExpressionCase)* "else" elseExpression=Expression;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//ConditionalExpressionCase:
	//	conditionExpression=Expression "then" thenExpression=Expression;
	public ConditionalExpressionCaseElements getConditionalExpressionCaseAccess() {
		return (pConditionalExpressionCase != null) ? pConditionalExpressionCase : (pConditionalExpressionCase = new ConditionalExpressionCaseElements());
	}
	
	public ParserRule getConditionalExpressionCaseRule() {
		return getConditionalExpressionCaseAccess().getRule();
	}

	//RangeExpression returns Expression:
	//	LogicalOrExpression ({RangeExpression.expressions+=current} ":" expressions+=LogicalOrExpression (":"
	//	expressions+=LogicalOrExpression)?)?;
	public RangeExpressionElements getRangeExpressionAccess() {
		return (pRangeExpression != null) ? pRangeExpression : (pRangeExpression = new RangeExpressionElements());
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.operands+=current} ("or" operands+=LogicalAndExpression)+)?;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	LogicalNotExpression ({LogicalAndExpression.operands+=current} ("and" operands+=LogicalNotExpression)+)?;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//	RelationalExpression | {LogicalNotExpression} "not" operand=RelationalExpression;
	public LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return (pLogicalNotExpression != null) ? pLogicalNotExpression : (pLogicalNotExpression = new LogicalNotExpressionElements());
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AddSubtractExpression ({RelationalExpression.operands+=current} (operators+=RelationalOperator
	//	operands+=AddSubtractExpression)+)?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator:
	//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=" | EqualTo="==" | NotEqualTo="<>";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AddSubtractExpression returns Expression:
	//	MultiplyDivideExpression ({AddSubtractExpression.operands+=current} (operators+=AddSubtractOperator
	//	operands+=MultiplyDivideExpression)+)?;
	public AddSubtractExpressionElements getAddSubtractExpressionAccess() {
		return (pAddSubtractExpression != null) ? pAddSubtractExpression : (pAddSubtractExpression = new AddSubtractExpressionElements());
	}
	
	public ParserRule getAddSubtractExpressionRule() {
		return getAddSubtractExpressionAccess().getRule();
	}

	//enum AddSubtractOperator:
	//	Add="+" | Subtract="-";
	public AddSubtractOperatorElements getAddSubtractOperatorAccess() {
		return (unknownRuleAddSubtractOperator != null) ? unknownRuleAddSubtractOperator : (unknownRuleAddSubtractOperator = new AddSubtractOperatorElements());
	}
	
	public EnumRule getAddSubtractOperatorRule() {
		return getAddSubtractOperatorAccess().getRule();
	}

	//MultiplyDivideExpression returns Expression:
	//	PowerExpression ({MultiplyDivideExpression.operands+=current} (operators+=MultiplyDivideOperator
	//	operands+=PowerExpression)+)?;
	public MultiplyDivideExpressionElements getMultiplyDivideExpressionAccess() {
		return (pMultiplyDivideExpression != null) ? pMultiplyDivideExpression : (pMultiplyDivideExpression = new MultiplyDivideExpressionElements());
	}
	
	public ParserRule getMultiplyDivideExpressionRule() {
		return getMultiplyDivideExpressionAccess().getRule();
	}

	//enum MultiplyDivideOperator:
	//	Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./";
	public MultiplyDivideOperatorElements getMultiplyDivideOperatorAccess() {
		return (unknownRuleMultiplyDivideOperator != null) ? unknownRuleMultiplyDivideOperator : (unknownRuleMultiplyDivideOperator = new MultiplyDivideOperatorElements());
	}
	
	public EnumRule getMultiplyDivideOperatorRule() {
		return getMultiplyDivideOperatorAccess().getRule();
	}

	//PowerExpression returns Expression:
	//	UnaryMinusExpression ({PowerExpression.operands+=current} operator=PowerOperator exponent=UnaryMinusExpression)?;
	public PowerExpressionElements getPowerExpressionAccess() {
		return (pPowerExpression != null) ? pPowerExpression : (pPowerExpression = new PowerExpressionElements());
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//enum PowerOperator:
	//	Power="^" | ElementWisePower=".^";
	public PowerOperatorElements getPowerOperatorAccess() {
		return (unknownRulePowerOperator != null) ? unknownRulePowerOperator : (unknownRulePowerOperator = new PowerOperatorElements());
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//UnaryMinusExpression returns Expression:
	//	PrimaryExpression | {UnaryMinusExpression} "-" operand=PrimaryExpression;
	public UnaryMinusExpressionElements getUnaryMinusExpressionAccess() {
		return (pUnaryMinusExpression != null) ? pUnaryMinusExpression : (pUnaryMinusExpression = new UnaryMinusExpressionElements());
	}
	
	public ParserRule getUnaryMinusExpressionRule() {
		return getUnaryMinusExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | SymbolReference | ParenthesizedExpression | MatrixConstructionOperator | //	ArrayConstructionOperator |
	//	BeginExpression | EndExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	NumericalLiteral | BooleanLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericalLiteral:
	//	RealLiteral | IntegerLiteral;
	public NumericalLiteralElements getNumericalLiteralAccess() {
		return (pNumericalLiteral != null) ? pNumericalLiteral : (pNumericalLiteral = new NumericalLiteralElements());
	}
	
	public ParserRule getNumericalLiteralRule() {
		return getNumericalLiteralAccess().getRule();
	}

	//RealLiteral:
	//	value=REAL ("(" unit=UnitExpression ")")?;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INTEGER ("(" unit=UnitExpression ")")?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=BooleanKind;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//enum BooleanKind:
	//	False="false" | True="true";
	public BooleanKindElements getBooleanKindAccess() {
		return (unknownRuleBooleanKind != null) ? unknownRuleBooleanKind : (unknownRuleBooleanKind = new BooleanKindElements());
	}
	
	public EnumRule getBooleanKindRule() {
		return getBooleanKindAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//Name:
	//	identifiers+=IDENT ("::" identifiers+=IDENT)*;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//FunctionArgumentList:
	//	arguments+=Expression (("," arguments+=Expression)* ("," namedArguments+=NamedArgument)*)
	//	/ *| 'for' forIndexList=ForIndexList* / | namedArguments+=NamedArgument ("," namedArguments+=NamedArgument)*;
	public FunctionArgumentListElements getFunctionArgumentListAccess() {
		return (pFunctionArgumentList != null) ? pFunctionArgumentList : (pFunctionArgumentList = new FunctionArgumentListElements());
	}
	
	public ParserRule getFunctionArgumentListRule() {
		return getFunctionArgumentListAccess().getRule();
	}

	//NamedArgument:
	//	identifier=IDENT "=" expression=Expression;
	public NamedArgumentElements getNamedArgumentAccess() {
		return (pNamedArgument != null) ? pNamedArgument : (pNamedArgument = new NamedArgumentElements());
	}
	
	public ParserRule getNamedArgumentRule() {
		return getNamedArgumentAccess().getRule();
	}

	//SymbolReference:
	//	global?="::"? name=Name componentReferences+=ComponentReference* (functionCall?="(" argumentList=FunctionArgumentList?
	//	")")?;
	public SymbolReferenceElements getSymbolReferenceAccess() {
		return (pSymbolReference != null) ? pSymbolReference : (pSymbolReference = new SymbolReferenceElements());
	}
	
	public ParserRule getSymbolReferenceRule() {
		return getSymbolReferenceAccess().getRule();
	}

	//ComponentReference:
	//	ArrayReference | MemberReference;
	public ComponentReferenceElements getComponentReferenceAccess() {
		return (pComponentReference != null) ? pComponentReference : (pComponentReference = new ComponentReferenceElements());
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}

	//ArrayReference:
	//	"[" subscripts+=Subscript ("," subscripts+=Subscript)* "]";
	public ArrayReferenceElements getArrayReferenceAccess() {
		return (pArrayReference != null) ? pArrayReference : (pArrayReference = new ArrayReferenceElements());
	}
	
	public ParserRule getArrayReferenceRule() {
		return getArrayReferenceAccess().getRule();
	}

	//MemberReference:
	//	"." identifier=IDENT;
	public MemberReferenceElements getMemberReferenceAccess() {
		return (pMemberReference != null) ? pMemberReference : (pMemberReference = new MemberReferenceElements());
	}
	
	public ParserRule getMemberReferenceRule() {
		return getMemberReferenceAccess().getRule();
	}

	//Subscript:
	//	ColonSubscript | ExpressionSubscript;
	public SubscriptElements getSubscriptAccess() {
		return (pSubscript != null) ? pSubscript : (pSubscript = new SubscriptElements());
	}
	
	public ParserRule getSubscriptRule() {
		return getSubscriptAccess().getRule();
	}

	//ColonSubscript:
	//	{ColonSubscript} ":";
	public ColonSubscriptElements getColonSubscriptAccess() {
		return (pColonSubscript != null) ? pColonSubscript : (pColonSubscript = new ColonSubscriptElements());
	}
	
	public ParserRule getColonSubscriptRule() {
		return getColonSubscriptAccess().getRule();
	}

	//ExpressionSubscript:
	//	expression=Expression;
	public ExpressionSubscriptElements getExpressionSubscriptAccess() {
		return (pExpressionSubscript != null) ? pExpressionSubscript : (pExpressionSubscript = new ExpressionSubscriptElements());
	}
	
	public ParserRule getExpressionSubscriptRule() {
		return getExpressionSubscriptAccess().getRule();
	}

	//MatrixConstructionOperator:
	//	"[" expressionLists+=ExpressionList (";" expressionLists+=ExpressionList)* "]";
	public MatrixConstructionOperatorElements getMatrixConstructionOperatorAccess() {
		return (pMatrixConstructionOperator != null) ? pMatrixConstructionOperator : (pMatrixConstructionOperator = new MatrixConstructionOperatorElements());
	}
	
	public ParserRule getMatrixConstructionOperatorRule() {
		return getMatrixConstructionOperatorAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=Expression ("," expressions+=Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//ParenthesizedExpression: //	'(' expressionList=OutputExpressionList ')';
	//	"(" expression=Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	////OutputExpressionList :
	////	expressions+=FirstOutputExpression (expressions+=RightOutputExpression)*;
	////
	////FirstOutputExpression returns Expression :
	////	{EmptyExpression} | Expression;
	////
	////RightOutputExpression returns Expression :
	////	',' {EmptyExpression} | ',' Expression;
	//BeginExpression:
	//	{BeginExpression} "begin";
	public BeginExpressionElements getBeginExpressionAccess() {
		return (pBeginExpression != null) ? pBeginExpression : (pBeginExpression = new BeginExpressionElements());
	}
	
	public ParserRule getBeginExpressionRule() {
		return getBeginExpressionAccess().getRule();
	}

	//EndExpression:
	//	{EndExpression} "end";
	public EndExpressionElements getEndExpressionAccess() {
		return (pEndExpression != null) ? pEndExpression : (pEndExpression = new EndExpressionElements());
	}
	
	public ParserRule getEndExpressionRule() {
		return getEndExpressionAccess().getRule();
	}

	////ForIndexList :
	////	indices+=ForIndex (',' indices+=ForIndex)*;
	////	
	////ForIndex :
	////	identifier=IDENT ('in' inExpression=Expression)?;
	/// *
	// * Unit expressions
	// * /UnitExpression:
	//	numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?;
	public UnitExpressionElements getUnitExpressionAccess() {
		return (pUnitExpression != null) ? pUnitExpression : (pUnitExpression = new UnitExpressionElements());
	}
	
	public ParserRule getUnitExpressionRule() {
		return getUnitExpressionAccess().getRule();
	}

	//UnitExpressionNumerator:
	//	one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*;
	public UnitExpressionNumeratorElements getUnitExpressionNumeratorAccess() {
		return (pUnitExpressionNumerator != null) ? pUnitExpressionNumerator : (pUnitExpressionNumerator = new UnitExpressionNumeratorElements());
	}
	
	public ParserRule getUnitExpressionNumeratorRule() {
		return getUnitExpressionNumeratorAccess().getRule();
	}

	//UnitExpressionDenominator:
	//	factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")";
	public UnitExpressionDenominatorElements getUnitExpressionDenominatorAccess() {
		return (pUnitExpressionDenominator != null) ? pUnitExpressionDenominator : (pUnitExpressionDenominator = new UnitExpressionDenominatorElements());
	}
	
	public ParserRule getUnitExpressionDenominatorRule() {
		return getUnitExpressionDenominatorAccess().getRule();
	}

	//UnitExpressionFactor:
	//	operand=IDENT ("^" exponent=UnitExpressionExponent)?;
	public UnitExpressionFactorElements getUnitExpressionFactorAccess() {
		return (pUnitExpressionFactor != null) ? pUnitExpressionFactor : (pUnitExpressionFactor = new UnitExpressionFactorElements());
	}
	
	public ParserRule getUnitExpressionFactorRule() {
		return getUnitExpressionFactorAccess().getRule();
	}

	//UnitExpressionExponent:
	//	negative?="-"? value=INTEGER;
	public UnitExpressionExponentElements getUnitExpressionExponentAccess() {
		return (pUnitExpressionExponent != null) ? pUnitExpressionExponent : (pUnitExpressionExponent = new UnitExpressionExponentElements());
	}
	
	public ParserRule getUnitExpressionExponentRule() {
		return getUnitExpressionExponentAccess().getRule();
	}

	/// *
	// * Terminals
	// * /terminal IDENT:
	//	("_" | "a".."z" | "A".."Z") ("0".."9" | "_" | "a".."z" | "A".."Z")*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v"))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal REAL returns ecore::EDouble:
	//	"0".."9"+ "." "0".."9"* (("e" | "E") ("+" | "-")? "0".."9"+)?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal INTEGER returns ecore::ELong:
	//	"0".."9"+;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
