«IMPORT blockdiagram»
«IMPORT org::esmp::dsm::codegen::c»

«EXTENSION org::esmp::dsm::codegen::c::extensions::Block»

«DEFINE main(CCodegenContext ctx) FOR Block»
	«EXPAND headerFile(ctx)»
«ENDDEFINE»

«DEFINE headerFile(CCodegenContext ctx) FOR Block»
	«FILE theHeaderFile(ctx) HEADER-»
		#ifndef «theHeaderMacro(ctx)»
		#define «theHeaderMacro(ctx)»
		
		#include <stdint.h>

		#define «theInitializeFunction(ctx)»()
	
		#define «theLocalDeclarationsMacro(ctx)» \
			«theCDataType(ctx)» «theVariablePrefix(ctx)»outputValue = «getBlockDataType().theValue(0)»;
		
		«LET inputs.first().ports.first() AS inputPort-»
			#define «inputPort.theConsumeInputValueFunction(ctx)»(value) \
				do { \
					«theCDataType(ctx)» x = (value); \
					if (x > «theParameterValue(ctx, "UpperLimit")») { \
						«theVariablePrefix(ctx)»outputValue = «theParameterValue(ctx, "UpperLimit")»; \
					} else if (x < «theParameterValue(ctx, "LowerLimit")») { \
						«theVariablePrefix(ctx)»outputValue = «theParameterValue(ctx, "LowerLimit")»; \
					} else { \
						«theVariablePrefix(ctx)»outputValue = x; \
					} \
				} while (0)
		«ENDLET-»
				
		#define «theComputeOutputValuesFunction(ctx)»()
		
		#define «outputs.first().ports.first().theGetOutputValueFunction(ctx)»() \
			«theVariablePrefix(ctx)»outputValue
		
		#define «theUpdateFunction(ctx)»()
		
		#endif /* «theHeaderMacro(ctx)» */
	«ENDFILE»
«ENDDEFINE»
