«IMPORT blockdiagram»
«IMPORT org::esmp::dsm::codegen::c»

«EXTENSION org::esmp::dsm::codegen::c::extensions::Block»

«DEFINE main(CCodegenContext ctx) FOR Block»
	«EXPAND headerFile(ctx)»
«ENDDEFINE»

«DEFINE headerFile(CCodegenContext ctx) FOR Block»
	«FILE theHeaderFile(ctx) HEADER-»
		#ifndef «theHeaderMacro(ctx)»
		#define «theHeaderMacro(ctx)»
		
		#include <stdint.h>
		
		#define «theInstanceDeclarationsMacro(ctx)» \
			static «theCDataType(ctx)» «theVariablePrefix(ctx)»previousValue;
	
		#define «theInitializeFunction(ctx)»() \
			«theVariablePrefix(ctx)»previousValue = «theParameterValue(ctx, "InitialCondition")»

		#define «theLocalDeclarationsMacro(ctx)» \
			«theCDataType(ctx)» «theVariablePrefix(ctx)»value; \
			«theCDataType(ctx)» «theVariablePrefix(ctx)»inputValue = «getBlockDataType().theValue(0)»;
	
		«LET inputs.first().ports.first() AS inputPort-»
			#define «inputPort.theConsumeInputValueFunction(ctx)»(value) \
				«theVariablePrefix(ctx)»inputValue = (value)
		«ENDLET-»
	
		#define «theComputeOutputValuesFunction(ctx)»() \
			do { \
				«subtract(ctx, theVariablePrefix(ctx) + "value", theVariablePrefix(ctx) + "inputValue", theVariablePrefix(ctx) + "previousValue")»; \
				«multiply(ctx, theVariablePrefix(ctx) + "value", theVariablePrefix(ctx) + "value", ctx.samplingFrequency)»; \
				«IF getBlockDataType().theValue(getParameterValue("Gain")) != getBlockDataType().theValue(1)-»
					«multiply(ctx, theVariablePrefix(ctx) + "value", theVariablePrefix(ctx) + "value", theParameterValue(ctx, "Gain"))»; \
				«ENDIF-»
			} while (0)
			
		«LET outputs.first().ports.first() AS outputPort-»
			#define «outputPort.theGetOutputValueFunction(ctx)»() \
				«theVariablePrefix(ctx)»value
		«ENDLET-»
		
		#define «theUpdateFunction(ctx)»() \
			«theVariablePrefix(ctx)»previousValue = «theVariablePrefix(ctx)»inputValue
		
		#endif /* «theHeaderMacro(ctx)» */
	«ENDFILE»
«ENDDEFINE»
