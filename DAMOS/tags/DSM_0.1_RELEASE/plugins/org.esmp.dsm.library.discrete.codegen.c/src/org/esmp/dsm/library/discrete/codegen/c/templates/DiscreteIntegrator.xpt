«IMPORT blockdiagram»
«IMPORT org::esmp::dsm::codegen::c»

«EXTENSION org::esmp::dsm::codegen::c::extensions::Block»

«DEFINE main(CCodegenContext ctx) FOR Block»
	«EXPAND headerFile(ctx)»
«ENDDEFINE»

«DEFINE headerFile(CCodegenContext ctx) FOR Block»
	«FILE theHeaderFile(ctx) HEADER-»
		#ifndef «theHeaderMacro(ctx)»
		#define «theHeaderMacro(ctx)»
		
		#include <stdint.h>
		
		#define «theInstanceDeclarationsMacro(ctx)» \
			static «theCDataType(ctx)» «theVariablePrefix(ctx)»sum;
		
		#define «theInitializeFunction(ctx)»() \
			«IF getParameterValueAsBoolean("Accumulation", false)-»
				«theVariablePrefix(ctx)»sum = «theParameterValue(ctx, "InitialValue")»
			«ELSE-»
				«multiply(ctx, theVariablePrefix(ctx) + "sum", theParameterValue(ctx, "InitialValue"), ctx.samplingFrequency)»
			«ENDIF-»
	
		#define «theLocalDeclarationsMacro(ctx)» \
			«IF !getParameterValueAsBoolean("Accumulation", false)-»
				«theCDataType(ctx)» «theVariablePrefix(ctx)»value; \
			«ENDIF-»
			«theCDataType(ctx)» «theVariablePrefix(ctx)»inputValue = «getBlockDataType().theValue(0)»;
		
		«LET inputs.first().ports.first() AS inputPort-»
			#define «inputPort.theConsumeInputValueFunction(ctx)»(value) \
				«IF getBlockDataType().theValue(getParameterValue("Gain")) == getBlockDataType().theValue(1)-»
					«theVariablePrefix(ctx)»inputValue = (value)
				«ELSE-»
					«multiply(ctx, theVariablePrefix(ctx) + "inputValue", "(value)", theParameterValue(ctx, "Gain"))»
				«ENDIF-»
		«ENDLET-»
		
		«IF getParameterValueAsBoolean("Accumulation", false)-»
			#define «theComputeOutputValuesFunction(ctx)»()
		«ELSE-»
			#define «theComputeOutputValuesFunction(ctx)»() \
				«divide(ctx, theVariablePrefix(ctx) + "value", theVariablePrefix(ctx) + "sum", ctx.samplingFrequency)»
		«ENDIF-»

		«LET outputs.first().ports.first() AS outputPort-»
			#define «outputPort.theGetOutputValueFunction(ctx)»() \
				«IF getParameterValueAsBoolean("Accumulation", false)-»
					«theVariablePrefix(ctx)»sum
				«ELSE-»
					«theVariablePrefix(ctx)»value
				«ENDIF-»
		«ENDLET-»
			
		#define «theUpdateFunction(ctx)»() \
			«add(ctx, theVariablePrefix(ctx) + "sum", theVariablePrefix(ctx) + "sum", theVariablePrefix(ctx) + "inputValue")»
		
		#endif /* «theHeaderMacro(ctx)» */
	«ENDFILE»
«ENDDEFINE»
