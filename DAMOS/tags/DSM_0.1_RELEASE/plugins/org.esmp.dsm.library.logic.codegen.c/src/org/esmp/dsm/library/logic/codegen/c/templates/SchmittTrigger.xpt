«IMPORT blockdiagram»
«IMPORT org::esmp::dsm::codegen::c»

«EXTENSION org::esmp::dsm::codegen::c::extensions::Block»

«DEFINE main(CCodegenContext ctx) FOR Block»
	«EXPAND headerFile(ctx)»
«ENDDEFINE»

«DEFINE headerFile(CCodegenContext ctx) FOR Block»
	«FILE theHeaderFile(ctx) HEADER-»
		#ifndef «theHeaderMacro(ctx)»
		#define «theHeaderMacro(ctx)»
		
		#include <stdint.h>

		#define «theInitializeFunction(ctx)»()
	
		#define «theInstanceDeclarationsMacro(ctx)» \
			static «theCDataType(ctx)» «theVariablePrefix(ctx)»outputValue = «theParameterValue(ctx, "InitialOutput")»;
		
		«LET inputs.first().ports.first() AS inputPort-»
			#define «inputPort.theConsumeInputValueFunction(ctx)»(value) \
				do { \
					«inputPort.getInputDataType().theCDataType(ctx)» x = (value); \
					if (x < «getInputDataType(inputPort).theValue(getParameterValue("LowerThreshold"))») { \
						«theVariablePrefix(ctx)»outputValue = «getBlockDataType().theValue(false)»; \
					} else if (x > «getInputDataType(inputPort).theValue(getParameterValue("UpperThreshold"))») { \
						«theVariablePrefix(ctx)»outputValue = «getBlockDataType().theValue(true)»; \
					} \
				} while (0)
		«ENDLET-»
				
		#define «theComputeOutputValuesFunction(ctx)»()
		
		#define «outputs.first().ports.first().theGetOutputValueFunction(ctx)»() \
			«theVariablePrefix(ctx)»outputValue
		
		#define «theUpdateFunction(ctx)»()
		
		#endif /* «theHeaderMacro(ctx)» */
	«ENDFILE»
«ENDDEFINE»
