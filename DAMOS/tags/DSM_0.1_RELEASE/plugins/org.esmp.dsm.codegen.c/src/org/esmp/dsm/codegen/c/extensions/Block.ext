import blockdiagram;
import executiongraph;
import org::esmp::dsm::codegen::c;
import org::esmp::dsm::expressions;

extension org::esmp::dsm::codegen::c::extensions::BlockDiagram reexport;

Boolean isConcrete(Block this) :
	!virtual && !type.structural;
	
Boolean isInport(Block this) :
	type.uriAsString == "http://www.esmp.org/dsm/1.0.0/Library/Structure/Inport.blocktype";
	
Boolean isOutport(Block this) :
	type.uriAsString == "http://www.esmp.org/dsm/1.0.0/Library/Structure/Outport.blocktype";

Integer getParameterValueAsInteger(Block this, String name, Integer defaultValue) :
	JAVA org.esmp.dsm.semantic.blockdiagram.util.BlockDiagramUtil.getParameterValueAsInteger(org.esmp.dsm.semantic.blockdiagram.ParameterableElement, java.lang.String, java.lang.Integer);

Real getParameterValueAsReal(Block this, String name, Real defaultValue) :
	JAVA org.esmp.dsm.semantic.blockdiagram.util.BlockDiagramUtil.getParameterValueAsDouble(org.esmp.dsm.semantic.blockdiagram.ParameterableElement, java.lang.String, java.lang.Double);

Boolean getParameterValueAsBoolean(Block this, String name, Boolean defaultValue) :
	JAVA org.esmp.dsm.semantic.blockdiagram.util.BlockDiagramUtil.getParameterValueAsBoolean(org.esmp.dsm.semantic.blockdiagram.ParameterableElement, java.lang.String, java.lang.Boolean);
	
String theHeaderFile(Block this, CCodegenContext ctx) :
	name + ".h";
	
String theSourceFile(Block this, CCodegenContext ctx) :
	name + ".c";

String theHeaderMacro(Block this, CCodegenContext ctx) :
	name.toHeaderMacro();
	
String theInputStructMember(Block this, CCodegenContext ctx) :
	name.toFirstLower();
	
String theOutputStructMember(Block this, CCodegenContext ctx) :
	name.toFirstLower();

String theTypePrefix(Block this, CCodegenContext ctx) :
	ctx.prefix + "_" + name + "_";

String theVariablePrefix(Block this, CCodegenContext ctx) :
	ctx.prefix + "_" + name + "_";
	
String theFunctionPrefix(Block this, CCodegenContext ctx) :
	ctx.prefix + "_" + name + "_";
	
String theMacroPrefix(Block this, CCodegenContext ctx) :
	ctx.prefix.toUpperCase() + "_" + name.toUpperCase() + "_";
	
String theFunctionPrefix(Port this, CCodegenContext ctx) :
	"";
	
String theFunctionPrefix(InputPort this, CCodegenContext ctx) :
	block.theFunctionPrefix(ctx) + input.specification.name + (input.specification.manyPorts ? "_" + index + "_" : "_");
	
String theFunctionPrefix(OutputPort this, CCodegenContext ctx) :
	block.theFunctionPrefix(ctx) + output.specification.name + (output.specification.manyPorts ? "_" + index + "_" : "_");

String theInstanceDeclarationsMacro(Block this, CCodegenContext ctx) :
	theMacroPrefix(ctx) + "INSTANCE_DECLS";
	
String theLocalDeclarationsMacro(Block this, CCodegenContext ctx) :
	theMacroPrefix(ctx) + "LOCAL_DECLS";

String theLocalInitializationsMacro(Block this, CCodegenContext ctx) :
	theMacroPrefix(ctx) + "LOCAL_INITS";

String theInitializeFunction(Block this, CCodegenContext ctx) :
	theFunctionPrefix(ctx) + "initialize";

String theConsumeInputValueFunction(InputPort this, CCodegenContext ctx) :
	theFunctionPrefix(ctx) + "consumeInputValue";
	
String theComputeOutputValuesFunction(Block this, CCodegenContext ctx) :
	theFunctionPrefix(ctx) + "computeOutputValues";
	
String theGetOutputValueFunction(OutputPort this, CCodegenContext ctx) :
	theFunctionPrefix(ctx) + "getOutputValue";

String theUpdateFunction(Block this, CCodegenContext ctx) :
	theFunctionPrefix(ctx) + "update";
	
/*
 * Arithmetic utility extensions
 */
 
private String toQuotedExpression(String this) :
	matches("(\\w*)|(\\A\\(.*\\)\\z)") ? this : "(" + this + ")";

/*
 *  Add extensions
 */		
private String add(DataType this, String x, String y) :
	null;

private String add(DoubleDataType this, String x, String y) :
	"(" + x + " + " + y + ")";

private String add(FixedPointDataType this, String x, String y) :
	"(" + x + " + " + y + ")";

String add(Block this, CCodegenContext ctx, String result, String x, Integer y) :
	result + " = " + getBlockDataType().add(x.toQuotedExpression(), getBlockDataType().theValue(y));

String add(Block this, CCodegenContext ctx, String result, String x, String y) :
	result + " = " + getBlockDataType().add(x.toQuotedExpression(), y.toQuotedExpression());

/*
 *  Subtract extensions
 */		
private String subtract(DataType this, String x, String y) :
	null;

private String subtract(DoubleDataType this, String x, String y) :
	"(" + x + " - " + y + ")";

private String subtract(FixedPointDataType this, String x, String y) :
	"(" + x + " - " + y + ")";

String subtract(Block this, CCodegenContext ctx, String result, String x, Integer y) :
	result + " = " + getBlockDataType().subtract(x.toQuotedExpression(), getBlockDataType().theValue(y));

String subtract(Block this, CCodegenContext ctx, String result, String x, String y) :
	result + " = " + getBlockDataType().subtract(x.toQuotedExpression(), y.toQuotedExpression());

/*
 *  Multiply extensions
 */		
private String multiply(DataType this, String x, String y) :
	null;

private String multiply(DoubleDataType this, String x, String y) :
	"(" + x + " * " + y + ")";

private String multiply(FixedPointDataType this, String x, String y) :
	fractionLength > 0 ? "(" + x + " * " + y + " >> " + fractionLength + ")" : "(" + x + " * " + y + ")";

String multiply(Block this, CCodegenContext ctx, String result, String x, Integer y) :
	result + " = " + getBlockDataType().multiply(x.toQuotedExpression(), getBlockDataType().theValue(y));

String multiply(Block this, CCodegenContext ctx, String result, String x, String y) :
	result + " = " + getBlockDataType().multiply(x.toQuotedExpression(), y.toQuotedExpression());

/*
 *  Divide extensions
 */		
private String divide(DataType this, String x, String y) :
	null;

private String divide(DoubleDataType this, String x, String y) :
	"(" + x + " / " + y + ")";

private String divide(FixedPointDataType this, String x, String y) :
	fractionLength > 0 ? "((" + x + " << " + fractionLength + ") / " + y + ")" : "(" + x + " / " + y + ")";

String divide(Block this, CCodegenContext ctx, String result, String x, Integer y) :
	result + " = " + getBlockDataType().divide(x.toQuotedExpression(), getBlockDataType().theValue(y));

String divide(Block this, CCodegenContext ctx, String result, String x, String y) :
	result + " = " + getBlockDataType().divide(x.toQuotedExpression(), y.toQuotedExpression());

/*
 * Convert value to string extensions
 */
	
String theValue(DataType this, Boolean value) :
	null;

String theValue(BooleanDataType this, Boolean value) :
	value ? "1" : "0";

String theValue(DoubleDataType this, Boolean value) :
	value ? "1" : "0";

String theValue(FixedPointDataType this, Boolean value) :
	theValue(value ? 1 : 0);

String theValue(DataType this, Integer value) :
	null;

String theValue(BooleanDataType this, Integer value) :
	value != 0 ? "1" : "0";

String theValue(DoubleDataType this, Integer value) :
	value.toString();
	
String theValue(FixedPointDataType this, Integer value) :
	JAVA org.esmp.dsm.codegen.c.util.BlockExtensionsHelper.toString(org.esmp.dsm.expressions.FixedPointDataType, java.lang.Integer);

String theValue(DataType this, String value) :
	null;

String theValue(BooleanDataType this, String value) :
	value == "1" || value == "true" ? "1" : "0";

String theValue(DoubleDataType this, String value) :
	value;
	
String theValue(FixedPointDataType this, String value) :
	JAVA org.esmp.dsm.codegen.c.util.BlockExtensionsHelper.toString(org.esmp.dsm.expressions.FixedPointDataType, java.lang.String);

/*
 * Return parameter value
 */
 
String theParameterValue(Block this, CCodegenContext ctx, String name) :
	getBlockDataType().theValue(getParameterValue(name));

/*
 * Data type extensions
 */

DataType getInputDataType(InputPort inputPort) :
	JAVA org.esmp.dsm.execution.datatype.util.DataTypeUtil.getDataType(org.eclipse.emf.ecore.EObject);

DataType getBlockDataType(Block block) :
	JAVA org.esmp.dsm.execution.datatype.util.DataTypeUtil.getDataType(org.eclipse.emf.ecore.EObject);
	
String theCDataType(Block this, CCodegenContext ctx) :
	getBlockDataType().theCDataType(ctx);

String theCDataType(DataType this, CCodegenContext ctx) :
	null;

String theCDataType(BooleanDataType this, CCodegenContext ctx) :
	"int";

String theCDataType(DoubleDataType this, CCodegenContext ctx) :
	"double";

String theCDataType(FixedPointDataType this, CCodegenContext ctx) :
	switch (wordLength) {
		case 8 : (signed ? "int8_t" : "uint8_t")
		case 16 : (signed ? "int16_t" : "uint16_t")
		case 32 : (signed ? "int32_t" : "uint32_t")
		default : (signed ? "int64_t" : "uint64_t")
	};

String theIntegerValue(Block this, CCodegenContext ctx, String x) :
	getBlockDataType().theIntegerValue(ctx, x);

String theIntegerValue(DataType this, CCodegenContext ctx, String x) :
	null;
	
String theIntegerValue(DoubleDataType this, CCodegenContext ctx, String x) :
	"((" + theCDataType(ctx) + ") " + x.toQuotedExpression() + ")";

String theIntegerValue(FixedPointDataType this, CCodegenContext ctx, String x) :
	fractionLength > 0 ? "(((" + theCDataType(ctx) + ") " + x.toQuotedExpression() + ") << " + fractionLength + ")" : "((" + theCDataType(ctx) + ") " + x.toQuotedExpression() + ")";
