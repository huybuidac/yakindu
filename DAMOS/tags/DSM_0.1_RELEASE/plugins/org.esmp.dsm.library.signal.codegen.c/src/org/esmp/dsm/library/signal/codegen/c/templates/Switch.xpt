«IMPORT blockdiagram»
«IMPORT org::esmp::dsm::codegen::c»
«IMPORT org::esmp::dsm::expressions»

«EXTENSION org::esmp::dsm::codegen::c::extensions::Block»

«DEFINE main(CCodegenContext ctx) FOR Block»
	«EXPAND headerFile(ctx)»
«ENDDEFINE»

«DEFINE headerFile(CCodegenContext ctx) FOR Block»
	«FILE theHeaderFile(ctx) HEADER-»
		#ifndef «theHeaderMacro(ctx)»
		#define «theHeaderMacro(ctx)»
		
		#include <stdint.h>

		#define «theInitializeFunction(ctx)»()
	
		#define «theLocalDeclarationsMacro(ctx)» \
			«theCDataType(ctx)» «theVariablePrefix(ctx)»controlInputValue = «getBlockDataType().theValue(0)»; \
			«theCDataType(ctx)» «theVariablePrefix(ctx)»onTrueInputValue = «getBlockDataType().theValue(0)»; \
			«theCDataType(ctx)» «theVariablePrefix(ctx)»onFalseInputValue = «getBlockDataType().theValue(0)»;
		
		«FOREACH inputs AS input-»
			«LET input.ports.first() AS inputPort-»
				#define «inputPort.theConsumeInputValueFunction(ctx)»(value) \
					«theVariablePrefix(ctx)»«input.specification.name.toFirstLower()»InputValue = (value);
			«ENDLET-»
		«ENDFOREACH-»
				
		#define «theComputeOutputValuesFunction(ctx)»()
		
		#define «outputs.first().ports.first().theGetOutputValueFunction(ctx)»() \
			(«theVariablePrefix(ctx)»controlInputValue != «getBlockDataType().theValue(0)» ? «theVariablePrefix(ctx)»onTrueInputValue : «theVariablePrefix(ctx)»onFalseInputValue)
		
		#define «theUpdateFunction(ctx)»()
		
		#endif /* «theHeaderMacro(ctx)» */
	«ENDFILE»
«ENDDEFINE»

«DEFINE cast(CCodegenContext ctx, DataType sourceDataType, DataType targetDataType) FOR Block-»
«ENDDEFINE»

«DEFINE cast(CCodegenContext ctx, DoubleDataType sourceDataType, DoubleDataType targetDataType) FOR Block-»
	«theVariablePrefix(ctx)»outputValue = (value)
«ENDDEFINE»

«DEFINE cast(CCodegenContext ctx, DoubleDataType sourceDataType, FixedPointDataType targetDataType) FOR Block-»
	«IF targetDataType.fractionLength > 0-»
		do { \
			«sourceDataType.theCDataType(ctx)» x = (value); \
			«targetDataType.theCDataType(ctx)» fractionPart = («targetDataType.theCDataType(ctx)») ((x - («targetDataType.theCDataType(ctx)») x) * «targetDataType.scalingFactor()»); \
			if (fractionPart > «targetDataType.scalingFactor() - 1») { \
				fractionPart = «targetDataType.scalingFactor() - 1»; \
			} \
			«theVariablePrefix(ctx)»outputValue = («targetDataType.theCDataType(ctx)») x << «targetDataType.fractionLength» | fractionPart; \
		} while (0)
	«ELSE-»
		«theVariablePrefix(ctx)»outputValue = («targetDataType.theCDataType(ctx)») (value)
	«ENDIF-»
«ENDDEFINE»

«DEFINE cast(CCodegenContext ctx, FixedPointDataType sourceDataType, DoubleDataType targetDataType) FOR Block-»
	«IF sourceDataType.fractionLength > 0-»
		do { \
			«sourceDataType.theCDataType(ctx)» x = (value); \
			«theVariablePrefix(ctx)»outputValue = (x >> «sourceDataType.fractionLength») + («targetDataType.theCDataType(ctx)») (x & ~(~(«sourceDataType.theCDataType(ctx)») 0 << «sourceDataType.fractionLength»)) / «sourceDataType.scalingFactor()»; \
		} while (0)
	«ELSE-»
		«theVariablePrefix(ctx)»outputValue = («targetDataType.theCDataType(ctx)») (value)
	«ENDIF-»
«ENDDEFINE»

«DEFINE cast(CCodegenContext ctx, FixedPointDataType sourceDataType, FixedPointDataType targetDataType) FOR Block-»
	«IF sourceDataType != targetDataType-»
		«theVariablePrefix(ctx)»outputValue = (value)«IF sourceDataType.fractionLength > targetDataType.fractionLength» >> «sourceDataType.fractionLength - targetDataType.fractionLength»«ELSE» << «targetDataType.fractionLength - sourceDataType.fractionLength»«ENDIF»
	«ELSE-»
		«theVariablePrefix(ctx)»outputValue = (value)
	«ENDIF-»
«ENDDEFINE»
